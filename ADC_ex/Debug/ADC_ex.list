
ADC_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049c8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd8  08004bd8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004be0  08004be0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be0  08004be0  00014be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000958  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009b4  200009b4  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000108f8  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000230f  00000000  00000000  000309c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cd0  00000000  00000000  00032cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009e9  00000000  00000000  000339a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000256b3  00000000  00000000  00034391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f633  00000000  00000000  00059a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6723  00000000  00000000  00069077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003b20  00000000  00000000  0014f79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001532bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004b60 	.word	0x08004b60

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08004b60 	.word	0x08004b60

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fcea 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f840 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f9a0 	bl	80008dc <MX_GPIO_Init>
  MX_ETH_Init();
 800059c:	f000 f8f8 	bl	8000790 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005a0:	f000 f944 	bl	800082c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a4:	f000 f96c 	bl	8000880 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005a8:	f000 f8a0 	bl	80006ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80005ac:	4815      	ldr	r0, [pc, #84]	; (8000604 <main+0x78>)
 80005ae:	f000 ff45 	bl	800143c <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80005b2:	4814      	ldr	r0, [pc, #80]	; (8000604 <main+0x78>)
 80005b4:	f000 fdb2 	bl	800111c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80005b8:	210a      	movs	r1, #10
 80005ba:	4812      	ldr	r0, [pc, #72]	; (8000604 <main+0x78>)
 80005bc:	f000 feb3 	bl	8001326 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 80005c0:	4810      	ldr	r0, [pc, #64]	; (8000604 <main+0x78>)
 80005c2:	f001 f929 	bl	8001818 <HAL_ADC_GetValue>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <main+0x7c>)
 80005cc:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80005ce:	480d      	ldr	r0, [pc, #52]	; (8000604 <main+0x78>)
 80005d0:	f000 fe76 	bl	80012c0 <HAL_ADC_Stop>

	  memset(uart_buf, 0, sizeof(uart_buf));
 80005d4:	221e      	movs	r2, #30
 80005d6:	2100      	movs	r1, #0
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <main+0x80>)
 80005da:	f003 fe3d 	bl	8004258 <memset>
	  sprintf(uart_buf, "ADC Value : %d \r\n", adc_value);
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <main+0x7c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	490a      	ldr	r1, [pc, #40]	; (8000610 <main+0x84>)
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <main+0x80>)
 80005e8:	f003 fe16 	bl	8004218 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, sizeof(uart_buf), 100);
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	221e      	movs	r2, #30
 80005f0:	4906      	ldr	r1, [pc, #24]	; (800060c <main+0x80>)
 80005f2:	4808      	ldr	r0, [pc, #32]	; (8000614 <main+0x88>)
 80005f4:	f002 ff99 	bl	800352a <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fc:	f000 fd26 	bl	800104c <HAL_Delay>
  {
 8000600:	e7d7      	b.n	80005b2 <main+0x26>
 8000602:	bf00      	nop
 8000604:	200001f0 	.word	0x200001f0
 8000608:	20000858 	.word	0x20000858
 800060c:	20000838 	.word	0x20000838
 8000610:	08004b78 	.word	0x08004b78
 8000614:	200002e8 	.word	0x200002e8

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fe16 	bl	8004258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800068c:	23a8      	movs	r3, #168	; 0xa8
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000694:	2307      	movs	r3, #7
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fa5f 	bl	8002b60 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 f9ce 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2105      	movs	r1, #5
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fcc0 	bl	8003050 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d6:	f000 f9b7 	bl	8000a48 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_ADC1_Init+0x98>)
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <MX_ADC1_Init+0x9c>)
 8000702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC1_Init+0x98>)
 8000706:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800070a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_ADC1_Init+0x98>)
 800072e:	4a17      	ldr	r2, [pc, #92]	; (800078c <MX_ADC1_Init+0xa0>)
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ADC1_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_ADC1_Init+0x98>)
 800073a:	2201      	movs	r2, #1
 800073c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_ADC1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_ADC1_Init+0x98>)
 8000748:	2201      	movs	r2, #1
 800074a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <MX_ADC1_Init+0x98>)
 800074e:	f000 fca1 	bl	8001094 <HAL_ADC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000758:	f000 f976 	bl	8000a48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800075c:	2303      	movs	r3, #3
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_ADC1_Init+0x98>)
 800076e:	f001 f87f 	bl	8001870 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000778:	f000 f966 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200001f0 	.word	0x200001f0
 8000788:	40012000 	.word	0x40012000
 800078c:	0f000001 	.word	0x0f000001

08000790 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_ETH_Init+0x84>)
 8000796:	4a20      	ldr	r2, [pc, #128]	; (8000818 <MX_ETH_Init+0x88>)
 8000798:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_ETH_Init+0x8c>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_ETH_Init+0x8c>)
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_ETH_Init+0x8c>)
 80007a8:	22e1      	movs	r2, #225	; 0xe1
 80007aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_ETH_Init+0x8c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_ETH_Init+0x8c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_ETH_Init+0x8c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_ETH_Init+0x84>)
 80007c0:	4a16      	ldr	r2, [pc, #88]	; (800081c <MX_ETH_Init+0x8c>)
 80007c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_ETH_Init+0x84>)
 80007c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007ca:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_ETH_Init+0x84>)
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <MX_ETH_Init+0x90>)
 80007d0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_ETH_Init+0x84>)
 80007d4:	4a13      	ldr	r2, [pc, #76]	; (8000824 <MX_ETH_Init+0x94>)
 80007d6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_ETH_Init+0x84>)
 80007da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007de:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <MX_ETH_Init+0x84>)
 80007e2:	f001 fb8f 	bl	8001f04 <HAL_ETH_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007ec:	f000 f92c 	bl	8000a48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007f0:	2238      	movs	r2, #56	; 0x38
 80007f2:	2100      	movs	r1, #0
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <MX_ETH_Init+0x98>)
 80007f6:	f003 fd2f 	bl	8004258 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_ETH_Init+0x98>)
 80007fc:	2221      	movs	r2, #33	; 0x21
 80007fe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_ETH_Init+0x98>)
 8000802:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000806:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_ETH_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000238 	.word	0x20000238
 8000818:	40028000 	.word	0x40028000
 800081c:	2000085c 	.word	0x2000085c
 8000820:	20000150 	.word	0x20000150
 8000824:	200000b0 	.word	0x200000b0
 8000828:	20000078 	.word	0x20000078

0800082c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_USART3_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000864:	f002 fe14 	bl	8003490 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f8eb 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200002e8 	.word	0x200002e8
 800087c:	40004800 	.word	0x40004800

08000880 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800088a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2204      	movs	r2, #4
 8000890:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	2202      	movs	r2, #2
 8000896:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c4:	f002 f82f 	bl	8002926 <HAL_PCD_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ce:	f000 f8bb 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000032c 	.word	0x2000032c

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
 80008f6:	4b50      	ldr	r3, [pc, #320]	; (8000a38 <MX_GPIO_Init+0x15c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a4f      	ldr	r2, [pc, #316]	; (8000a38 <MX_GPIO_Init+0x15c>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b4d      	ldr	r3, [pc, #308]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	4b49      	ldr	r3, [pc, #292]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a48      	ldr	r2, [pc, #288]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b46      	ldr	r3, [pc, #280]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a41      	ldr	r2, [pc, #260]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <MX_GPIO_Init+0x15c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <MX_GPIO_Init+0x15c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a3a      	ldr	r2, [pc, #232]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b34      	ldr	r3, [pc, #208]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a33      	ldr	r2, [pc, #204]	; (8000a38 <MX_GPIO_Init+0x15c>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b31      	ldr	r3, [pc, #196]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a2c      	ldr	r2, [pc, #176]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a0:	4826      	ldr	r0, [pc, #152]	; (8000a3c <MX_GPIO_Init+0x160>)
 80009a2:	f001 ff83 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	4825      	ldr	r0, [pc, #148]	; (8000a40 <MX_GPIO_Init+0x164>)
 80009ac:	f001 ff7e 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	481f      	ldr	r0, [pc, #124]	; (8000a44 <MX_GPIO_Init+0x168>)
 80009c8:	f001 fdc4 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4815      	ldr	r0, [pc, #84]	; (8000a3c <MX_GPIO_Init+0x160>)
 80009e6:	f001 fdb5 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ea:	2340      	movs	r3, #64	; 0x40
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	480f      	ldr	r0, [pc, #60]	; (8000a40 <MX_GPIO_Init+0x164>)
 8000a02:	f001 fda7 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <MX_GPIO_Init+0x164>)
 8000a1a:	f001 fd9b 	bl	8002554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2028      	movs	r0, #40	; 0x28
 8000a24:	f001 fa37 	bl	8001e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a28:	2028      	movs	r0, #40	; 0x28
 8000a2a:	f001 fa50 	bl	8001ece <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2e:	bf00      	nop
 8000a30:	3730      	adds	r7, #48	; 0x30
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020400 	.word	0x40020400
 8000a40:	40021800 	.word	0x40021800
 8000a44:	40020800 	.word	0x40020800

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <HAL_ADC_MspInit+0x8c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d12f      	bne.n	8000b26 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_ADC_MspInit+0x90>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_ADC_MspInit+0x90>)
 8000ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_ADC_MspInit+0x90>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_ADC_MspInit+0x90>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <HAL_ADC_MspInit+0x90>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_ADC_MspInit+0x90>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000afe:	2308      	movs	r3, #8
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b02:	2303      	movs	r3, #3
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <HAL_ADC_MspInit+0x94>)
 8000b12:	f001 fd1f 	bl	8002554 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2012      	movs	r0, #18
 8000b1c:	f001 f9bb 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b20:	2012      	movs	r0, #18
 8000b22:	f001 f9d4 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	; 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40012000 	.word	0x40012000
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020000 	.word	0x40020000

08000b3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a55      	ldr	r2, [pc, #340]	; (8000cb0 <HAL_ETH_MspInit+0x174>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	f040 80a4 	bne.w	8000ca8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
 8000b64:	4b53      	ldr	r3, [pc, #332]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a52      	ldr	r2, [pc, #328]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000b6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b50      	ldr	r3, [pc, #320]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b78:	623b      	str	r3, [r7, #32]
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
 8000b80:	4b4c      	ldr	r3, [pc, #304]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a4b      	ldr	r2, [pc, #300]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000b86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8c:	4b49      	ldr	r3, [pc, #292]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b94:	61fb      	str	r3, [r7, #28]
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
 8000b9c:	4b45      	ldr	r3, [pc, #276]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a44      	ldr	r2, [pc, #272]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000ba2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bb0:	61bb      	str	r3, [r7, #24]
 8000bb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	4b3e      	ldr	r3, [pc, #248]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a3d      	ldr	r2, [pc, #244]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b3b      	ldr	r3, [pc, #236]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	4a36      	ldr	r2, [pc, #216]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6313      	str	r3, [r2, #48]	; 0x30
 8000be0:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	4b30      	ldr	r3, [pc, #192]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	4a2f      	ldr	r2, [pc, #188]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4a28      	ldr	r2, [pc, #160]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c16:	6313      	str	r3, [r2, #48]	; 0x30
 8000c18:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <HAL_ETH_MspInit+0x178>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c24:	2332      	movs	r3, #50	; 0x32
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c34:	230b      	movs	r3, #11
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481e      	ldr	r0, [pc, #120]	; (8000cb8 <HAL_ETH_MspInit+0x17c>)
 8000c40:	f001 fc88 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c44:	2386      	movs	r3, #134	; 0x86
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4817      	ldr	r0, [pc, #92]	; (8000cbc <HAL_ETH_MspInit+0x180>)
 8000c60:	f001 fc78 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c76:	230b      	movs	r3, #11
 8000c78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <HAL_ETH_MspInit+0x184>)
 8000c82:	f001 fc67 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c98:	230b      	movs	r3, #11
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000ca4:	f001 fc56 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ca8:	bf00      	nop
 8000caa:	3738      	adds	r7, #56	; 0x38
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40028000 	.word	0x40028000
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020400 	.word	0x40020400
 8000cc4:	40021800 	.word	0x40021800

08000cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_UART_MspInit+0x84>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12c      	bne.n	8000d44 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d34:	2307      	movs	r3, #7
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_UART_MspInit+0x8c>)
 8000d40:	f001 fc08 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020c00 	.word	0x40020c00

08000d58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d78:	d13f      	bne.n	8000dfa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <HAL_PCD_MspInit+0xac>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <HAL_PCD_MspInit+0xac>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <HAL_PCD_MspInit+0xac>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000da8:	230a      	movs	r3, #10
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4815      	ldr	r0, [pc, #84]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000db4:	f001 fbce 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480e      	ldr	r0, [pc, #56]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000dce:	f001 fbc1 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_PCD_MspInit+0xac>)
 8000dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <HAL_PCD_MspInit+0xac>)
 8000dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ddc:	6353      	str	r3, [r2, #52]	; 0x34
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_PCD_MspInit+0xac>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_PCD_MspInit+0xac>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_PCD_MspInit+0xac>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020000 	.word	0x40020000

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <NMI_Handler+0x4>

08000e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <MemManage_Handler+0x4>

08000e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e58:	f000 f8d8 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <ADC_IRQHandler+0x10>)
 8000e66:	f000 fbc7 	bl	80015f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200001f0 	.word	0x200001f0

08000e74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000e78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e7c:	f001 fd30 	bl	80028e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb4:	f003 f9d8 	bl	8004268 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20030000 	.word	0x20030000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	20000864 	.word	0x20000864
 8000eec:	200009b8 	.word	0x200009b8

08000ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f4c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f1a:	490e      	ldr	r1, [pc, #56]	; (8000f54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f30:	4c0b      	ldr	r4, [pc, #44]	; (8000f60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3e:	f7ff ffd7 	bl	8000ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f003 f997 	bl	8004274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fb21 	bl	800058c <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f4c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f58:	08004be8 	.word	0x08004be8
  ldr r2, =_sbss
 8000f5c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f60:	200009b4 	.word	0x200009b4

08000f64 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <CAN1_RX0_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_Init+0x40>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_Init+0x40>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_Init+0x40>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 ff75 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f808 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff fd5a 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x54>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 ff8d 	bl	8001eea <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f000 ff55 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_InitTick+0x5c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	20000008 	.word	0x20000008
 8001008:	20000004 	.word	0x20000004

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008
 8001030:	20000868 	.word	0x20000868

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000868 	.word	0x20000868

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff ffee 	bl	8001034 <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_Delay+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffde 	bl	8001034 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008

08001094 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e033      	b.n	8001112 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff fcf6 	bl	8000aa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 0310 	and.w	r3, r3, #16
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d118      	bne.n	8001104 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010da:	f023 0302 	bic.w	r3, r3, #2
 80010de:	f043 0202 	orr.w	r2, r3, #2
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 fcf4 	bl	8001ad4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f023 0303 	bic.w	r3, r3, #3
 80010fa:	f043 0201 	orr.w	r2, r3, #1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
 8001102:	e001      	b.n	8001108 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800112e:	2b01      	cmp	r3, #1
 8001130:	d101      	bne.n	8001136 <HAL_ADC_Start+0x1a>
 8001132:	2302      	movs	r3, #2
 8001134:	e0b2      	b.n	800129c <HAL_ADC_Start+0x180>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b01      	cmp	r3, #1
 800114a:	d018      	beq.n	800117e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0201 	orr.w	r2, r2, #1
 800115a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800115c:	4b52      	ldr	r3, [pc, #328]	; (80012a8 <HAL_ADC_Start+0x18c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a52      	ldr	r2, [pc, #328]	; (80012ac <HAL_ADC_Start+0x190>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	0c9a      	lsrs	r2, r3, #18
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001170:	e002      	b.n	8001178 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	3b01      	subs	r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f9      	bne.n	8001172 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b01      	cmp	r3, #1
 800118a:	d17a      	bne.n	8001282 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ca:	d106      	bne.n	80011da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d0:	f023 0206 	bic.w	r2, r3, #6
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	645a      	str	r2, [r3, #68]	; 0x44
 80011d8:	e002      	b.n	80011e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e8:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <HAL_ADC_Start+0x194>)
 80011ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 031f 	and.w	r3, r3, #31
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d12a      	bne.n	8001258 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a2b      	ldr	r2, [pc, #172]	; (80012b4 <HAL_ADC_Start+0x198>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d015      	beq.n	8001238 <HAL_ADC_Start+0x11c>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a29      	ldr	r2, [pc, #164]	; (80012b8 <HAL_ADC_Start+0x19c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d105      	bne.n	8001222 <HAL_ADC_Start+0x106>
 8001216:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <HAL_ADC_Start+0x194>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00a      	beq.n	8001238 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a25      	ldr	r2, [pc, #148]	; (80012bc <HAL_ADC_Start+0x1a0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d136      	bne.n	800129a <HAL_ADC_Start+0x17e>
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_ADC_Start+0x194>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	2b00      	cmp	r3, #0
 8001236:	d130      	bne.n	800129a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d129      	bne.n	800129a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	e020      	b.n	800129a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <HAL_ADC_Start+0x198>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d11b      	bne.n	800129a <HAL_ADC_Start+0x17e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d114      	bne.n	800129a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	e00b      	b.n	800129a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f043 0210 	orr.w	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f043 0201 	orr.w	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	20000000 	.word	0x20000000
 80012ac:	431bde83 	.word	0x431bde83
 80012b0:	40012300 	.word	0x40012300
 80012b4:	40012000 	.word	0x40012000
 80012b8:	40012100 	.word	0x40012100
 80012bc:	40012200 	.word	0x40012200

080012c0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <HAL_ADC_Stop+0x16>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e021      	b.n	800131a <HAL_ADC_Stop+0x5a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d109      	bne.n	8001310 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	f043 0201 	orr.w	r2, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001342:	d113      	bne.n	800136c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800134e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001352:	d10b      	bne.n	800136c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f043 0220 	orr.w	r2, r3, #32
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e063      	b.n	8001434 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800136c:	f7ff fe62 	bl	8001034 <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001372:	e021      	b.n	80013b8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137a:	d01d      	beq.n	80013b8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d007      	beq.n	8001392 <HAL_ADC_PollForConversion+0x6c>
 8001382:	f7ff fe57 	bl	8001034 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d212      	bcs.n	80013b8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b02      	cmp	r3, #2
 800139e:	d00b      	beq.n	80013b8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f043 0204 	orr.w	r2, r3, #4
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e03d      	b.n	8001434 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d1d6      	bne.n	8001374 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f06f 0212 	mvn.w	r2, #18
 80013ce:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d123      	bne.n	8001432 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d11f      	bne.n	8001432 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800140a:	2b00      	cmp	r3, #0
 800140c:	d111      	bne.n	8001432 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d105      	bne.n	8001432 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_ADC_Start_IT+0x1a>
 8001452:	2302      	movs	r3, #2
 8001454:	e0bd      	b.n	80015d2 <HAL_ADC_Start_IT+0x196>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b01      	cmp	r3, #1
 800146a:	d018      	beq.n	800149e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 0201 	orr.w	r2, r2, #1
 800147a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800147c:	4b58      	ldr	r3, [pc, #352]	; (80015e0 <HAL_ADC_Start_IT+0x1a4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a58      	ldr	r2, [pc, #352]	; (80015e4 <HAL_ADC_Start_IT+0x1a8>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0c9a      	lsrs	r2, r3, #18
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001490:	e002      	b.n	8001498 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3b01      	subs	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f9      	bne.n	8001492 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	f040 8085 	bne.w	80015b8 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014b6:	f023 0301 	bic.w	r3, r3, #1
 80014ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d007      	beq.n	80014e0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ec:	d106      	bne.n	80014fc <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f023 0206 	bic.w	r2, r3, #6
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	645a      	str	r2, [r3, #68]	; 0x44
 80014fa:	e002      	b.n	8001502 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <HAL_ADC_Start_IT+0x1ac>)
 800150c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001516:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001526:	f043 0320 	orr.w	r3, r3, #32
 800152a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 031f 	and.w	r3, r3, #31
 8001534:	2b00      	cmp	r3, #0
 8001536:	d12a      	bne.n	800158e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a2b      	ldr	r2, [pc, #172]	; (80015ec <HAL_ADC_Start_IT+0x1b0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d015      	beq.n	800156e <HAL_ADC_Start_IT+0x132>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a2a      	ldr	r2, [pc, #168]	; (80015f0 <HAL_ADC_Start_IT+0x1b4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d105      	bne.n	8001558 <HAL_ADC_Start_IT+0x11c>
 800154c:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_ADC_Start_IT+0x1ac>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 031f 	and.w	r3, r3, #31
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00a      	beq.n	800156e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a25      	ldr	r2, [pc, #148]	; (80015f4 <HAL_ADC_Start_IT+0x1b8>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d136      	bne.n	80015d0 <HAL_ADC_Start_IT+0x194>
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_ADC_Start_IT+0x1ac>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d130      	bne.n	80015d0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d129      	bne.n	80015d0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	e020      	b.n	80015d0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a16      	ldr	r2, [pc, #88]	; (80015ec <HAL_ADC_Start_IT+0x1b0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d11b      	bne.n	80015d0 <HAL_ADC_Start_IT+0x194>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d114      	bne.n	80015d0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	e00b      	b.n	80015d0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f043 0210 	orr.w	r2, r3, #16
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	f043 0201 	orr.w	r2, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000000 	.word	0x20000000
 80015e4:	431bde83 	.word	0x431bde83
 80015e8:	40012300 	.word	0x40012300
 80015ec:	40012000 	.word	0x40012000
 80015f0:	40012100 	.word	0x40012100
 80015f4:	40012200 	.word	0x40012200

080015f8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	f003 0320 	and.w	r3, r3, #32
 8001626:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d049      	beq.n	80016c2 <HAL_ADC_IRQHandler+0xca>
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d046      	beq.n	80016c2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d12b      	bne.n	80016b2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800165e:	2b00      	cmp	r3, #0
 8001660:	d127      	bne.n	80016b2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800167a:	2b00      	cmp	r3, #0
 800167c:	d119      	bne.n	80016b2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0220 	bic.w	r2, r2, #32
 800168c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d105      	bne.n	80016b2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f8bd 	bl	8001832 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f06f 0212 	mvn.w	r2, #18
 80016c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d057      	beq.n	8001788 <HAL_ADC_IRQHandler+0x190>
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d054      	beq.n	8001788 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d105      	bne.n	80016f6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d139      	bne.n	8001778 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800171c:	2b00      	cmp	r3, #0
 800171e:	d12b      	bne.n	8001778 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800172a:	2b00      	cmp	r3, #0
 800172c:	d124      	bne.n	8001778 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001738:	2b00      	cmp	r3, #0
 800173a:	d11d      	bne.n	8001778 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001740:	2b00      	cmp	r3, #0
 8001742:	d119      	bne.n	8001778 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001752:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 faa7 	bl	8001ccc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f06f 020c 	mvn.w	r2, #12
 8001786:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001796:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d017      	beq.n	80017ce <HAL_ADC_IRQHandler+0x1d6>
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d014      	beq.n	80017ce <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d10d      	bne.n	80017ce <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f841 	bl	8001846 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f06f 0201 	mvn.w	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f003 0320 	and.w	r3, r3, #32
 80017d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017dc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d015      	beq.n	8001810 <HAL_ADC_IRQHandler+0x218>
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d012      	beq.n	8001810 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f043 0202 	orr.w	r2, r3, #2
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f06f 0220 	mvn.w	r2, #32
 80017fe:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f82a 	bl	800185a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f06f 0220 	mvn.w	r2, #32
 800180e:	601a      	str	r2, [r3, #0]
  }
}
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1c>
 8001888:	2302      	movs	r3, #2
 800188a:	e113      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x244>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b09      	cmp	r3, #9
 800189a:	d925      	bls.n	80018e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68d9      	ldr	r1, [r3, #12]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	3b1e      	subs	r3, #30
 80018b2:	2207      	movs	r2, #7
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43da      	mvns	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	400a      	ands	r2, r1
 80018c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68d9      	ldr	r1, [r3, #12]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	4603      	mov	r3, r0
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4403      	add	r3, r0
 80018da:	3b1e      	subs	r3, #30
 80018dc:	409a      	lsls	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	e022      	b.n	800192e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6919      	ldr	r1, [r3, #16]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	2207      	movs	r2, #7
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	400a      	ands	r2, r1
 800190a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6919      	ldr	r1, [r3, #16]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	4603      	mov	r3, r0
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4403      	add	r3, r0
 8001924:	409a      	lsls	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b06      	cmp	r3, #6
 8001934:	d824      	bhi.n	8001980 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b05      	subs	r3, #5
 8001948:	221f      	movs	r2, #31
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	400a      	ands	r2, r1
 8001956:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	4618      	mov	r0, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	3b05      	subs	r3, #5
 8001972:	fa00 f203 	lsl.w	r2, r0, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	635a      	str	r2, [r3, #52]	; 0x34
 800197e:	e04c      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d824      	bhi.n	80019d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b23      	subs	r3, #35	; 0x23
 800199a:	221f      	movs	r2, #31
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43da      	mvns	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	400a      	ands	r2, r1
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	3b23      	subs	r3, #35	; 0x23
 80019c4:	fa00 f203 	lsl.w	r2, r0, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
 80019d0:	e023      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	3b41      	subs	r3, #65	; 0x41
 80019e4:	221f      	movs	r2, #31
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	400a      	ands	r2, r1
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4618      	mov	r0, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b41      	subs	r3, #65	; 0x41
 8001a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <HAL_ADC_ConfigChannel+0x250>)
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a28      	ldr	r2, [pc, #160]	; (8001ac4 <HAL_ADC_ConfigChannel+0x254>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d10f      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x1d8>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b12      	cmp	r3, #18
 8001a2e:	d10b      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <HAL_ADC_ConfigChannel+0x254>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d12b      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x23a>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <HAL_ADC_ConfigChannel+0x258>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d003      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0x1f4>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b11      	cmp	r3, #17
 8001a62:	d122      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a11      	ldr	r2, [pc, #68]	; (8001ac8 <HAL_ADC_ConfigChannel+0x258>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d111      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_ADC_ConfigChannel+0x25c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a11      	ldr	r2, [pc, #68]	; (8001ad0 <HAL_ADC_ConfigChannel+0x260>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	0c9a      	lsrs	r2, r3, #18
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a9c:	e002      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f9      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40012300 	.word	0x40012300
 8001ac4:	40012000 	.word	0x40012000
 8001ac8:	10000012 	.word	0x10000012
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	431bde83 	.word	0x431bde83

08001ad4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001adc:	4b79      	ldr	r3, [pc, #484]	; (8001cc4 <ADC_Init+0x1f0>)
 8001ade:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6899      	ldr	r1, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	4a58      	ldr	r2, [pc, #352]	; (8001cc8 <ADC_Init+0x1f4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d022      	beq.n	8001bb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6899      	ldr	r1, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	e00f      	b.n	8001bd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0202 	bic.w	r2, r2, #2
 8001be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6899      	ldr	r1, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7e1b      	ldrb	r3, [r3, #24]
 8001bec:	005a      	lsls	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01b      	beq.n	8001c38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6859      	ldr	r1, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	035a      	lsls	r2, r3, #13
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	e007      	b.n	8001c48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	051a      	lsls	r2, r3, #20
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6899      	ldr	r1, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c8a:	025a      	lsls	r2, r3, #9
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6899      	ldr	r1, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	029a      	lsls	r2, r3, #10
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	609a      	str	r2, [r3, #8]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	40012300 	.word	0x40012300
 8001cc8:	0f000001 	.word	0x0f000001

08001ccc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff29 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff3e 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff8e 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff31 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e06c      	b.n	8001ff0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d106      	bne.n	8001f2e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2223      	movs	r2, #35	; 0x23
 8001f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7fe fe07 	bl	8000b3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_ETH_Init+0xf4>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a30      	ldr	r2, [pc, #192]	; (8001ff8 <HAL_ETH_Init+0xf4>)
 8001f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_ETH_Init+0xf4>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <HAL_ETH_Init+0xf8>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4a2b      	ldr	r2, [pc, #172]	; (8001ffc <HAL_ETH_Init+0xf8>)
 8001f50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f54:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f56:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <HAL_ETH_Init+0xf8>)
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	4927      	ldr	r1, [pc, #156]	; (8001ffc <HAL_ETH_Init+0xf8>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f64:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <HAL_ETH_Init+0xf8>)
 8001f66:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f80:	f7ff f858 	bl	8001034 <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f86:	e011      	b.n	8001fac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f88:	f7ff f854 	bl	8001034 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f96:	d909      	bls.n	8001fac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	22e0      	movs	r2, #224	; 0xe0
 8001fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e021      	b.n	8001ff0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1e4      	bne.n	8001f88 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f958 	bl	8002274 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f9ff 	bl	80023c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fa55 	bl	800247a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f9bd 	bl	8002358 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2210      	movs	r2, #16
 8001fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40013800 	.word	0x40013800

08002000 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4b51      	ldr	r3, [pc, #324]	; (800215c <ETH_SetMACConfig+0x15c>)
 8002016:	4013      	ands	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	7c1b      	ldrb	r3, [r3, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <ETH_SetMACConfig+0x28>
 8002022:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002026:	e000      	b.n	800202a <ETH_SetMACConfig+0x2a>
 8002028:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	7c5b      	ldrb	r3, [r3, #17]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <ETH_SetMACConfig+0x38>
 8002032:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002036:	e000      	b.n	800203a <ETH_SetMACConfig+0x3a>
 8002038:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800203a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002040:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	7fdb      	ldrb	r3, [r3, #31]
 8002046:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002048:	431a      	orrs	r2, r3
                        macconf->Speed |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800204e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	7f92      	ldrb	r2, [r2, #30]
 8002054:	2a00      	cmp	r2, #0
 8002056:	d102      	bne.n	800205e <ETH_SetMACConfig+0x5e>
 8002058:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800205c:	e000      	b.n	8002060 <ETH_SetMACConfig+0x60>
 800205e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002060:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	7f1b      	ldrb	r3, [r3, #28]
 8002066:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002068:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800206e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	791b      	ldrb	r3, [r3, #4]
 8002074:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002076:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800207e:	2a00      	cmp	r2, #0
 8002080:	d102      	bne.n	8002088 <ETH_SetMACConfig+0x88>
 8002082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002086:	e000      	b.n	800208a <ETH_SetMACConfig+0x8a>
 8002088:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800208a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	7bdb      	ldrb	r3, [r3, #15]
 8002090:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002092:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002098:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020a0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020a2:	4313      	orrs	r3, r2
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7fe ffc6 	bl	800104c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020d6:	4013      	ands	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020de:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80020e6:	2a00      	cmp	r2, #0
 80020e8:	d101      	bne.n	80020ee <ETH_SetMACConfig+0xee>
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	e000      	b.n	80020f0 <ETH_SetMACConfig+0xf0>
 80020ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020f0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80020fe:	2a01      	cmp	r2, #1
 8002100:	d101      	bne.n	8002106 <ETH_SetMACConfig+0x106>
 8002102:	2208      	movs	r2, #8
 8002104:	e000      	b.n	8002108 <ETH_SetMACConfig+0x108>
 8002106:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002108:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002110:	2a01      	cmp	r2, #1
 8002112:	d101      	bne.n	8002118 <ETH_SetMACConfig+0x118>
 8002114:	2204      	movs	r2, #4
 8002116:	e000      	b.n	800211a <ETH_SetMACConfig+0x11a>
 8002118:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800211a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002122:	2a01      	cmp	r2, #1
 8002124:	d101      	bne.n	800212a <ETH_SetMACConfig+0x12a>
 8002126:	2202      	movs	r2, #2
 8002128:	e000      	b.n	800212c <ETH_SetMACConfig+0x12c>
 800212a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800212c:	4313      	orrs	r3, r2
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002144:	2001      	movs	r0, #1
 8002146:	f7fe ff81 	bl	800104c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	619a      	str	r2, [r3, #24]
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	ff20810f 	.word	0xff20810f

08002160 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4b3d      	ldr	r3, [pc, #244]	; (8002270 <ETH_SetDMAConfig+0x110>)
 800217a:	4013      	ands	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	7b1b      	ldrb	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <ETH_SetDMAConfig+0x2c>
 8002186:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800218a:	e000      	b.n	800218e <ETH_SetDMAConfig+0x2e>
 800218c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	7b5b      	ldrb	r3, [r3, #13]
 8002192:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002194:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	7f52      	ldrb	r2, [r2, #29]
 800219a:	2a00      	cmp	r2, #0
 800219c:	d102      	bne.n	80021a4 <ETH_SetDMAConfig+0x44>
 800219e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021a2:	e000      	b.n	80021a6 <ETH_SetDMAConfig+0x46>
 80021a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	7b9b      	ldrb	r3, [r3, #14]
 80021ac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021ae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	7f1b      	ldrb	r3, [r3, #28]
 80021ba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80021bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	7f9b      	ldrb	r3, [r3, #30]
 80021c2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021c4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021d4:	4313      	orrs	r3, r2
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e4:	461a      	mov	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f6:	2001      	movs	r0, #1
 80021f8:	f7fe ff28 	bl	800104c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002204:	461a      	mov	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	791b      	ldrb	r3, [r3, #4]
 800220e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002214:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800221a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002220:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002228:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800222a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002232:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002238:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002242:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002246:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002254:	2001      	movs	r0, #1
 8002256:	f7fe fef9 	bl	800104c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002262:	461a      	mov	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	f8de3f23 	.word	0xf8de3f23

08002274 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0a6      	sub	sp, #152	; 0x98
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800227c:	2301      	movs	r3, #1
 800227e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002288:	2300      	movs	r3, #0
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002292:	2301      	movs	r3, #1
 8002294:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800229e:	2301      	movs	r3, #1
 80022a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022b0:	2300      	movs	r3, #0
 80022b2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80022d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022da:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80022e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022ec:	4619      	mov	r1, r3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff fe86 	bl	8002000 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80022f4:	2301      	movs	r3, #1
 80022f6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80022f8:	2301      	movs	r3, #1
 80022fa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80022fc:	2301      	movs	r3, #1
 80022fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002302:	2301      	movs	r3, #1
 8002304:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002316:	2300      	movs	r3, #0
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800231a:	2301      	movs	r3, #1
 800231c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002320:	2301      	movs	r3, #1
 8002322:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002328:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800232a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800232e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002334:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800233c:	2300      	movs	r3, #0
 800233e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002344:	f107 0308 	add.w	r3, r7, #8
 8002348:	4619      	mov	r1, r3
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ff08 	bl	8002160 <ETH_SetDMAConfig>
}
 8002350:	bf00      	nop
 8002352:	3798      	adds	r7, #152	; 0x98
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3305      	adds	r3, #5
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	3204      	adds	r2, #4
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <ETH_MACAddressConfig+0x68>)
 800237a:	4413      	add	r3, r2
 800237c:	461a      	mov	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3303      	adds	r3, #3
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	061a      	lsls	r2, r3, #24
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3302      	adds	r3, #2
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	041b      	lsls	r3, r3, #16
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3301      	adds	r3, #1
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	4313      	orrs	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	7812      	ldrb	r2, [r2, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <ETH_MACAddressConfig+0x6c>)
 80023aa:	4413      	add	r3, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	6013      	str	r3, [r2, #0]
}
 80023b2:	bf00      	nop
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40028040 	.word	0x40028040
 80023c4:	40028044 	.word	0x40028044

080023c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e03e      	b.n	8002454 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68d9      	ldr	r1, [r3, #12]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	440b      	add	r3, r1
 80023e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2200      	movs	r2, #0
 80023f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	3206      	adds	r2, #6
 8002408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d80c      	bhi.n	8002438 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68d9      	ldr	r1, [r3, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	440b      	add	r3, r1
 8002430:	461a      	mov	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	e004      	b.n	8002442 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	461a      	mov	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3301      	adds	r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d9bd      	bls.n	80023d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246c:	611a      	str	r2, [r3, #16]
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e046      	b.n	8002516 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6919      	ldr	r1, [r3, #16]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2200      	movs	r2, #0
 80024a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2200      	movs	r2, #0
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024c4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80024cc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	3212      	adds	r2, #18
 80024e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d80c      	bhi.n	8002506 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6919      	ldr	r1, [r3, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	461a      	mov	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	60da      	str	r2, [r3, #12]
 8002504:	e004      	b.n	8002510 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	461a      	mov	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3301      	adds	r3, #1
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d9b5      	bls.n	8002488 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002546:	60da      	str	r2, [r3, #12]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e177      	b.n	8002860 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 8166 	bne.w	800285a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d017      	beq.n	8002644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80c0 	beq.w	800285a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b66      	ldr	r3, [pc, #408]	; (8002878 <HAL_GPIO_Init+0x324>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a65      	ldr	r2, [pc, #404]	; (8002878 <HAL_GPIO_Init+0x324>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b63      	ldr	r3, [pc, #396]	; (8002878 <HAL_GPIO_Init+0x324>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f6:	4a61      	ldr	r2, [pc, #388]	; (800287c <HAL_GPIO_Init+0x328>)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a58      	ldr	r2, [pc, #352]	; (8002880 <HAL_GPIO_Init+0x32c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d037      	beq.n	8002792 <HAL_GPIO_Init+0x23e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a57      	ldr	r2, [pc, #348]	; (8002884 <HAL_GPIO_Init+0x330>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d031      	beq.n	800278e <HAL_GPIO_Init+0x23a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a56      	ldr	r2, [pc, #344]	; (8002888 <HAL_GPIO_Init+0x334>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d02b      	beq.n	800278a <HAL_GPIO_Init+0x236>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a55      	ldr	r2, [pc, #340]	; (800288c <HAL_GPIO_Init+0x338>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d025      	beq.n	8002786 <HAL_GPIO_Init+0x232>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a54      	ldr	r2, [pc, #336]	; (8002890 <HAL_GPIO_Init+0x33c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01f      	beq.n	8002782 <HAL_GPIO_Init+0x22e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a53      	ldr	r2, [pc, #332]	; (8002894 <HAL_GPIO_Init+0x340>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d019      	beq.n	800277e <HAL_GPIO_Init+0x22a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a52      	ldr	r2, [pc, #328]	; (8002898 <HAL_GPIO_Init+0x344>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_GPIO_Init+0x226>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a51      	ldr	r2, [pc, #324]	; (800289c <HAL_GPIO_Init+0x348>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00d      	beq.n	8002776 <HAL_GPIO_Init+0x222>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a50      	ldr	r2, [pc, #320]	; (80028a0 <HAL_GPIO_Init+0x34c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <HAL_GPIO_Init+0x21e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4f      	ldr	r2, [pc, #316]	; (80028a4 <HAL_GPIO_Init+0x350>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_GPIO_Init+0x21a>
 800276a:	2309      	movs	r3, #9
 800276c:	e012      	b.n	8002794 <HAL_GPIO_Init+0x240>
 800276e:	230a      	movs	r3, #10
 8002770:	e010      	b.n	8002794 <HAL_GPIO_Init+0x240>
 8002772:	2308      	movs	r3, #8
 8002774:	e00e      	b.n	8002794 <HAL_GPIO_Init+0x240>
 8002776:	2307      	movs	r3, #7
 8002778:	e00c      	b.n	8002794 <HAL_GPIO_Init+0x240>
 800277a:	2306      	movs	r3, #6
 800277c:	e00a      	b.n	8002794 <HAL_GPIO_Init+0x240>
 800277e:	2305      	movs	r3, #5
 8002780:	e008      	b.n	8002794 <HAL_GPIO_Init+0x240>
 8002782:	2304      	movs	r3, #4
 8002784:	e006      	b.n	8002794 <HAL_GPIO_Init+0x240>
 8002786:	2303      	movs	r3, #3
 8002788:	e004      	b.n	8002794 <HAL_GPIO_Init+0x240>
 800278a:	2302      	movs	r3, #2
 800278c:	e002      	b.n	8002794 <HAL_GPIO_Init+0x240>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_GPIO_Init+0x240>
 8002792:	2300      	movs	r3, #0
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	f002 0203 	and.w	r2, r2, #3
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	4093      	lsls	r3, r2
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a4:	4935      	ldr	r1, [pc, #212]	; (800287c <HAL_GPIO_Init+0x328>)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b2:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <HAL_GPIO_Init+0x354>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d6:	4a34      	ldr	r2, [pc, #208]	; (80028a8 <HAL_GPIO_Init+0x354>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027dc:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <HAL_GPIO_Init+0x354>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002800:	4a29      	ldr	r2, [pc, #164]	; (80028a8 <HAL_GPIO_Init+0x354>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002806:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <HAL_GPIO_Init+0x354>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800282a:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_GPIO_Init+0x354>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002830:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <HAL_GPIO_Init+0x354>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002854:	4a14      	ldr	r2, [pc, #80]	; (80028a8 <HAL_GPIO_Init+0x354>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3301      	adds	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b0f      	cmp	r3, #15
 8002864:	f67f ae84 	bls.w	8002570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3724      	adds	r7, #36	; 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40013800 	.word	0x40013800
 8002880:	40020000 	.word	0x40020000
 8002884:	40020400 	.word	0x40020400
 8002888:	40020800 	.word	0x40020800
 800288c:	40020c00 	.word	0x40020c00
 8002890:	40021000 	.word	0x40021000
 8002894:	40021400 	.word	0x40021400
 8002898:	40021800 	.word	0x40021800
 800289c:	40021c00 	.word	0x40021c00
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40022400 	.word	0x40022400
 80028a8:	40013c00 	.word	0x40013c00

080028ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
 80028b8:	4613      	mov	r3, r2
 80028ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028bc:	787b      	ldrb	r3, [r7, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c8:	e003      	b.n	80028d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ca:	887b      	ldrh	r3, [r7, #2]
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	619a      	str	r2, [r3, #24]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f806 	bl	8002910 <HAL_GPIO_EXTI_Callback>
  }
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40013c00 	.word	0x40013c00

08002910 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002928:	b08f      	sub	sp, #60	; 0x3c
 800292a:	af0a      	add	r7, sp, #40	; 0x28
 800292c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e10f      	b.n	8002b58 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fa00 	bl	8000d58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2203      	movs	r2, #3
 800295c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f001 f9ad 	bl	8003cd6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	603b      	str	r3, [r7, #0]
 8002982:	687e      	ldr	r6, [r7, #4]
 8002984:	466d      	mov	r5, sp
 8002986:	f106 0410 	add.w	r4, r6, #16
 800298a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800298c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002992:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002996:	e885 0003 	stmia.w	r5, {r0, r1}
 800299a:	1d33      	adds	r3, r6, #4
 800299c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800299e:	6838      	ldr	r0, [r7, #0]
 80029a0:	f001 f938 	bl	8003c14 <USB_CoreInit>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2202      	movs	r2, #2
 80029ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e0d0      	b.n	8002b58 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 f99b 	bl	8003cf8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e04a      	b.n	8002a5e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	333d      	adds	r3, #61	; 0x3d
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	333c      	adds	r3, #60	; 0x3c
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	b298      	uxth	r0, r3
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	3344      	adds	r3, #68	; 0x44
 8002a04:	4602      	mov	r2, r0
 8002a06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	3340      	adds	r3, #64	; 0x40
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	3348      	adds	r3, #72	; 0x48
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	334c      	adds	r3, #76	; 0x4c
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3354      	adds	r3, #84	; 0x54
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d3af      	bcc.n	80029c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	e044      	b.n	8002af8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a6e:	7bfa      	ldrb	r2, [r7, #15]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	3301      	adds	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d3b5      	bcc.n	8002a6e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	687e      	ldr	r6, [r7, #4]
 8002b0a:	466d      	mov	r5, sp
 8002b0c:	f106 0410 	add.w	r4, r6, #16
 8002b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b20:	1d33      	adds	r3, r6, #4
 8002b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b24:	6838      	ldr	r0, [r7, #0]
 8002b26:	f001 f933 	bl	8003d90 <USB_DevInit>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e00d      	b.n	8002b58 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f001 fafe 	bl	8004152 <USB_DevDisconnect>

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e267      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d075      	beq.n	8002c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b7e:	4b88      	ldr	r3, [pc, #544]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d00c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8a:	4b85      	ldr	r3, [pc, #532]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d112      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b96:	4b82      	ldr	r3, [pc, #520]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba2:	d10b      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	4b7e      	ldr	r3, [pc, #504]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d05b      	beq.n	8002c68 <HAL_RCC_OscConfig+0x108>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d157      	bne.n	8002c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e242      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc4:	d106      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x74>
 8002bc6:	4b76      	ldr	r3, [pc, #472]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a75      	ldr	r2, [pc, #468]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e01d      	b.n	8002c10 <HAL_RCC_OscConfig+0xb0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x98>
 8002bde:	4b70      	ldr	r3, [pc, #448]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a6f      	ldr	r2, [pc, #444]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4b6d      	ldr	r3, [pc, #436]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a6c      	ldr	r2, [pc, #432]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0xb0>
 8002bf8:	4b69      	ldr	r3, [pc, #420]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a68      	ldr	r2, [pc, #416]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b66      	ldr	r3, [pc, #408]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a65      	ldr	r2, [pc, #404]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fe fa0c 	bl	8001034 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c20:	f7fe fa08 	bl	8001034 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e207      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	4b5b      	ldr	r3, [pc, #364]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0xc0>
 8002c3e:	e014      	b.n	8002c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe f9f8 	bl	8001034 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe f9f4 	bl	8001034 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e1f3      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5a:	4b51      	ldr	r3, [pc, #324]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0xe8>
 8002c66:	e000      	b.n	8002c6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d063      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c76:	4b4a      	ldr	r3, [pc, #296]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c82:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d11c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8e:	4b44      	ldr	r3, [pc, #272]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d116      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9a:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x152>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e1c7      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b3b      	ldr	r3, [pc, #236]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4937      	ldr	r1, [pc, #220]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc6:	e03a      	b.n	8002d3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd0:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <HAL_RCC_OscConfig+0x244>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7fe f9ad 	bl	8001034 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cde:	f7fe f9a9 	bl	8001034 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e1a8      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf0:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfc:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4925      	ldr	r1, [pc, #148]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
 8002d10:	e015      	b.n	8002d3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_RCC_OscConfig+0x244>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe f98c 	bl	8001034 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d20:	f7fe f988 	bl	8001034 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e187      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d036      	beq.n	8002db8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d016      	beq.n	8002d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <HAL_RCC_OscConfig+0x248>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe f96c 	bl	8001034 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d60:	f7fe f968 	bl	8001034 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e167      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_RCC_OscConfig+0x240>)
 8002d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x200>
 8002d7e:	e01b      	b.n	8002db8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_RCC_OscConfig+0x248>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d86:	f7fe f955 	bl	8001034 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8c:	e00e      	b.n	8002dac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8e:	f7fe f951 	bl	8001034 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d907      	bls.n	8002dac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e150      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
 8002da0:	40023800 	.word	0x40023800
 8002da4:	42470000 	.word	0x42470000
 8002da8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dac:	4b88      	ldr	r3, [pc, #544]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1ea      	bne.n	8002d8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8097 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dca:	4b81      	ldr	r3, [pc, #516]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10f      	bne.n	8002df6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	4b7d      	ldr	r3, [pc, #500]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a7c      	ldr	r2, [pc, #496]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
 8002de6:	4b7a      	ldr	r3, [pc, #488]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b77      	ldr	r3, [pc, #476]	; (8002fd4 <HAL_RCC_OscConfig+0x474>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d118      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e02:	4b74      	ldr	r3, [pc, #464]	; (8002fd4 <HAL_RCC_OscConfig+0x474>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a73      	ldr	r2, [pc, #460]	; (8002fd4 <HAL_RCC_OscConfig+0x474>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe f911 	bl	8001034 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e16:	f7fe f90d 	bl	8001034 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e10c      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	4b6a      	ldr	r3, [pc, #424]	; (8002fd4 <HAL_RCC_OscConfig+0x474>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x2ea>
 8002e3c:	4b64      	ldr	r3, [pc, #400]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a63      	ldr	r2, [pc, #396]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
 8002e48:	e01c      	b.n	8002e84 <HAL_RCC_OscConfig+0x324>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b05      	cmp	r3, #5
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x30c>
 8002e52:	4b5f      	ldr	r3, [pc, #380]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	4a5e      	ldr	r2, [pc, #376]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5e:	4b5c      	ldr	r3, [pc, #368]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	4a5b      	ldr	r2, [pc, #364]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0x324>
 8002e6c:	4b58      	ldr	r3, [pc, #352]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	4a57      	ldr	r2, [pc, #348]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	6713      	str	r3, [r2, #112]	; 0x70
 8002e78:	4b55      	ldr	r3, [pc, #340]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	4a54      	ldr	r2, [pc, #336]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	f023 0304 	bic.w	r3, r3, #4
 8002e82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d015      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8c:	f7fe f8d2 	bl	8001034 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f7fe f8ce 	bl	8001034 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e0cb      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eaa:	4b49      	ldr	r3, [pc, #292]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0ee      	beq.n	8002e94 <HAL_RCC_OscConfig+0x334>
 8002eb6:	e014      	b.n	8002ee2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb8:	f7fe f8bc 	bl	8001034 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec0:	f7fe f8b8 	bl	8001034 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e0b5      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed6:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ee      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee2:	7dfb      	ldrb	r3, [r7, #23]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee8:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	4a38      	ldr	r2, [pc, #224]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80a1 	beq.w	8003040 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002efe:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d05c      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d141      	bne.n	8002f96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f12:	4b31      	ldr	r3, [pc, #196]	; (8002fd8 <HAL_RCC_OscConfig+0x478>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fe f88c 	bl	8001034 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fe f888 	bl	8001034 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e087      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f32:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69da      	ldr	r2, [r3, #28]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	019b      	lsls	r3, r3, #6
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	3b01      	subs	r3, #1
 8002f58:	041b      	lsls	r3, r3, #16
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	061b      	lsls	r3, r3, #24
 8002f62:	491b      	ldr	r1, [pc, #108]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <HAL_RCC_OscConfig+0x478>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6e:	f7fe f861 	bl	8001034 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fe f85d 	bl	8001034 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e05c      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x416>
 8002f94:	e054      	b.n	8003040 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_RCC_OscConfig+0x478>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe f84a 	bl	8001034 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fe f846 	bl	8001034 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e045      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x444>
 8002fc2:	e03d      	b.n	8003040 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d107      	bne.n	8002fdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e038      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <HAL_RCC_OscConfig+0x4ec>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d028      	beq.n	800303c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d121      	bne.n	800303c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d11a      	bne.n	800303c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800300c:	4013      	ands	r3, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003012:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003014:	4293      	cmp	r3, r2
 8003016:	d111      	bne.n	800303c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	3b01      	subs	r3, #1
 8003026:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d107      	bne.n	800303c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800

08003050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0cc      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003064:	4b68      	ldr	r3, [pc, #416]	; (8003208 <HAL_RCC_ClockConfig+0x1b8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d90c      	bls.n	800308c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003072:	4b65      	ldr	r3, [pc, #404]	; (8003208 <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307a:	4b63      	ldr	r3, [pc, #396]	; (8003208 <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0b8      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d020      	beq.n	80030da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a4:	4b59      	ldr	r3, [pc, #356]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4a58      	ldr	r2, [pc, #352]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030bc:	4b53      	ldr	r3, [pc, #332]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	4a52      	ldr	r2, [pc, #328]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c8:	4b50      	ldr	r3, [pc, #320]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	494d      	ldr	r1, [pc, #308]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d044      	beq.n	8003170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	4b47      	ldr	r3, [pc, #284]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d119      	bne.n	800312e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e07f      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d003      	beq.n	800310e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310a:	2b03      	cmp	r3, #3
 800310c:	d107      	bne.n	800311e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310e:	4b3f      	ldr	r3, [pc, #252]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e06f      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311e:	4b3b      	ldr	r3, [pc, #236]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e067      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800312e:	4b37      	ldr	r3, [pc, #220]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f023 0203 	bic.w	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4934      	ldr	r1, [pc, #208]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	4313      	orrs	r3, r2
 800313e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003140:	f7fd ff78 	bl	8001034 <HAL_GetTick>
 8003144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	e00a      	b.n	800315e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003148:	f7fd ff74 	bl	8001034 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	; 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e04f      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315e:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 020c 	and.w	r2, r3, #12
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	429a      	cmp	r2, r3
 800316e:	d1eb      	bne.n	8003148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003170:	4b25      	ldr	r3, [pc, #148]	; (8003208 <HAL_RCC_ClockConfig+0x1b8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d20c      	bcs.n	8003198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b22      	ldr	r3, [pc, #136]	; (8003208 <HAL_RCC_ClockConfig+0x1b8>)
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e032      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4916      	ldr	r1, [pc, #88]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031c2:	4b12      	ldr	r3, [pc, #72]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	490e      	ldr	r1, [pc, #56]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031d6:	f000 f821 	bl	800321c <HAL_RCC_GetSysClockFreq>
 80031da:	4602      	mov	r2, r0
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	490a      	ldr	r1, [pc, #40]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	5ccb      	ldrb	r3, [r1, r3]
 80031ea:	fa22 f303 	lsr.w	r3, r2, r3
 80031ee:	4a09      	ldr	r2, [pc, #36]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031f2:	4b09      	ldr	r3, [pc, #36]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd fed8 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023c00 	.word	0x40023c00
 800320c:	40023800 	.word	0x40023800
 8003210:	08004b8c 	.word	0x08004b8c
 8003214:	20000000 	.word	0x20000000
 8003218:	20000004 	.word	0x20000004

0800321c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800321c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003220:	b094      	sub	sp, #80	; 0x50
 8003222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	647b      	str	r3, [r7, #68]	; 0x44
 8003228:	2300      	movs	r3, #0
 800322a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800322c:	2300      	movs	r3, #0
 800322e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003234:	4b79      	ldr	r3, [pc, #484]	; (800341c <HAL_RCC_GetSysClockFreq+0x200>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b08      	cmp	r3, #8
 800323e:	d00d      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x40>
 8003240:	2b08      	cmp	r3, #8
 8003242:	f200 80e1 	bhi.w	8003408 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0x34>
 800324a:	2b04      	cmp	r3, #4
 800324c:	d003      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x3a>
 800324e:	e0db      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003250:	4b73      	ldr	r3, [pc, #460]	; (8003420 <HAL_RCC_GetSysClockFreq+0x204>)
 8003252:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003254:	e0db      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003256:	4b73      	ldr	r3, [pc, #460]	; (8003424 <HAL_RCC_GetSysClockFreq+0x208>)
 8003258:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800325a:	e0d8      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800325c:	4b6f      	ldr	r3, [pc, #444]	; (800341c <HAL_RCC_GetSysClockFreq+0x200>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003264:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003266:	4b6d      	ldr	r3, [pc, #436]	; (800341c <HAL_RCC_GetSysClockFreq+0x200>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d063      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003272:	4b6a      	ldr	r3, [pc, #424]	; (800341c <HAL_RCC_GetSysClockFreq+0x200>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	099b      	lsrs	r3, r3, #6
 8003278:	2200      	movs	r2, #0
 800327a:	63bb      	str	r3, [r7, #56]	; 0x38
 800327c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003284:	633b      	str	r3, [r7, #48]	; 0x30
 8003286:	2300      	movs	r3, #0
 8003288:	637b      	str	r3, [r7, #52]	; 0x34
 800328a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800328e:	4622      	mov	r2, r4
 8003290:	462b      	mov	r3, r5
 8003292:	f04f 0000 	mov.w	r0, #0
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	0159      	lsls	r1, r3, #5
 800329c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a0:	0150      	lsls	r0, r2, #5
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4621      	mov	r1, r4
 80032a8:	1a51      	subs	r1, r2, r1
 80032aa:	6139      	str	r1, [r7, #16]
 80032ac:	4629      	mov	r1, r5
 80032ae:	eb63 0301 	sbc.w	r3, r3, r1
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032c0:	4659      	mov	r1, fp
 80032c2:	018b      	lsls	r3, r1, #6
 80032c4:	4651      	mov	r1, sl
 80032c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ca:	4651      	mov	r1, sl
 80032cc:	018a      	lsls	r2, r1, #6
 80032ce:	4651      	mov	r1, sl
 80032d0:	ebb2 0801 	subs.w	r8, r2, r1
 80032d4:	4659      	mov	r1, fp
 80032d6:	eb63 0901 	sbc.w	r9, r3, r1
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ee:	4690      	mov	r8, r2
 80032f0:	4699      	mov	r9, r3
 80032f2:	4623      	mov	r3, r4
 80032f4:	eb18 0303 	adds.w	r3, r8, r3
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	462b      	mov	r3, r5
 80032fc:	eb49 0303 	adc.w	r3, r9, r3
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800330e:	4629      	mov	r1, r5
 8003310:	024b      	lsls	r3, r1, #9
 8003312:	4621      	mov	r1, r4
 8003314:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003318:	4621      	mov	r1, r4
 800331a:	024a      	lsls	r2, r1, #9
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003322:	2200      	movs	r2, #0
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
 8003326:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003328:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800332c:	f7fc ffb0 	bl	8000290 <__aeabi_uldivmod>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4613      	mov	r3, r2
 8003336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003338:	e058      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333a:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_RCC_GetSysClockFreq+0x200>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	099b      	lsrs	r3, r3, #6
 8003340:	2200      	movs	r2, #0
 8003342:	4618      	mov	r0, r3
 8003344:	4611      	mov	r1, r2
 8003346:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
 8003350:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003354:	4642      	mov	r2, r8
 8003356:	464b      	mov	r3, r9
 8003358:	f04f 0000 	mov.w	r0, #0
 800335c:	f04f 0100 	mov.w	r1, #0
 8003360:	0159      	lsls	r1, r3, #5
 8003362:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003366:	0150      	lsls	r0, r2, #5
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4641      	mov	r1, r8
 800336e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003372:	4649      	mov	r1, r9
 8003374:	eb63 0b01 	sbc.w	fp, r3, r1
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003384:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003388:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800338c:	ebb2 040a 	subs.w	r4, r2, sl
 8003390:	eb63 050b 	sbc.w	r5, r3, fp
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	00eb      	lsls	r3, r5, #3
 800339e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a2:	00e2      	lsls	r2, r4, #3
 80033a4:	4614      	mov	r4, r2
 80033a6:	461d      	mov	r5, r3
 80033a8:	4643      	mov	r3, r8
 80033aa:	18e3      	adds	r3, r4, r3
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	464b      	mov	r3, r9
 80033b0:	eb45 0303 	adc.w	r3, r5, r3
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c2:	4629      	mov	r1, r5
 80033c4:	028b      	lsls	r3, r1, #10
 80033c6:	4621      	mov	r1, r4
 80033c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033cc:	4621      	mov	r1, r4
 80033ce:	028a      	lsls	r2, r1, #10
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d6:	2200      	movs	r2, #0
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	61fa      	str	r2, [r7, #28]
 80033dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e0:	f7fc ff56 	bl	8000290 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4613      	mov	r3, r2
 80033ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_GetSysClockFreq+0x200>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	3301      	adds	r3, #1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003406:	e002      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetSysClockFreq+0x204>)
 800340a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800340c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003410:	4618      	mov	r0, r3
 8003412:	3750      	adds	r7, #80	; 0x50
 8003414:	46bd      	mov	sp, r7
 8003416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	00f42400 	.word	0x00f42400
 8003424:	007a1200 	.word	0x007a1200

08003428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <HAL_RCC_GetHCLKFreq+0x14>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000000 	.word	0x20000000

08003440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003444:	f7ff fff0 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8003448:	4602      	mov	r2, r0
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	0a9b      	lsrs	r3, r3, #10
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	4903      	ldr	r1, [pc, #12]	; (8003464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003456:	5ccb      	ldrb	r3, [r1, r3]
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40023800 	.word	0x40023800
 8003464:	08004b9c 	.word	0x08004b9c

08003468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800346c:	f7ff ffdc 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0b5b      	lsrs	r3, r3, #13
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4903      	ldr	r1, [pc, #12]	; (800348c <HAL_RCC_GetPCLK2Freq+0x24>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	08004b9c 	.word	0x08004b9c

08003490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e03f      	b.n	8003522 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd fc06 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2224      	movs	r2, #36	; 0x24
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f929 	bl	800372c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b08a      	sub	sp, #40	; 0x28
 800352e:	af02      	add	r7, sp, #8
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b20      	cmp	r3, #32
 8003548:	d17c      	bne.n	8003644 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_UART_Transmit+0x2c>
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e075      	b.n	8003646 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_UART_Transmit+0x3e>
 8003564:	2302      	movs	r3, #2
 8003566:	e06e      	b.n	8003646 <HAL_UART_Transmit+0x11c>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2221      	movs	r2, #33	; 0x21
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800357e:	f7fd fd59 	bl	8001034 <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003598:	d108      	bne.n	80035ac <HAL_UART_Transmit+0x82>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	e003      	b.n	80035b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035bc:	e02a      	b.n	8003614 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2180      	movs	r1, #128	; 0x80
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f840 	bl	800364e <UART_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e036      	b.n	8003646 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	3302      	adds	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	e007      	b.n	8003606 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	3301      	adds	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1cf      	bne.n	80035be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2200      	movs	r2, #0
 8003626:	2140      	movs	r1, #64	; 0x40
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f810 	bl	800364e <UART_WaitOnFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e006      	b.n	8003646 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	e000      	b.n	8003646 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b090      	sub	sp, #64	; 0x40
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4613      	mov	r3, r2
 800365c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365e:	e050      	b.n	8003702 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003666:	d04c      	beq.n	8003702 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <UART_WaitOnFlagUntilTimeout+0x30>
 800366e:	f7fd fce1 	bl	8001034 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800367a:	429a      	cmp	r2, r3
 800367c:	d241      	bcs.n	8003702 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	330c      	adds	r3, #12
 800369c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800369e:	637a      	str	r2, [r7, #52]	; 0x34
 80036a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a6:	e841 2300 	strex	r3, r2, [r1]
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1e5      	bne.n	800367e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3314      	adds	r3, #20
 80036b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	613b      	str	r3, [r7, #16]
   return(result);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3314      	adds	r3, #20
 80036d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036d2:	623a      	str	r2, [r7, #32]
 80036d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	69f9      	ldr	r1, [r7, #28]
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	61bb      	str	r3, [r7, #24]
   return(result);
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e5      	bne.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e00f      	b.n	8003722 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4013      	ands	r3, r2
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	429a      	cmp	r2, r3
 800371e:	d09f      	beq.n	8003660 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3740      	adds	r7, #64	; 0x40
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800372c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003730:	b0c0      	sub	sp, #256	; 0x100
 8003732:	af00      	add	r7, sp, #0
 8003734:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	68d9      	ldr	r1, [r3, #12]
 800374a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	ea40 0301 	orr.w	r3, r0, r1
 8003754:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	431a      	orrs	r2, r3
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	431a      	orrs	r2, r3
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003784:	f021 010c 	bic.w	r1, r1, #12
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003792:	430b      	orrs	r3, r1
 8003794:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a6:	6999      	ldr	r1, [r3, #24]
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	ea40 0301 	orr.w	r3, r0, r1
 80037b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4b8f      	ldr	r3, [pc, #572]	; (80039f8 <UART_SetConfig+0x2cc>)
 80037bc:	429a      	cmp	r2, r3
 80037be:	d005      	beq.n	80037cc <UART_SetConfig+0xa0>
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4b8d      	ldr	r3, [pc, #564]	; (80039fc <UART_SetConfig+0x2d0>)
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d104      	bne.n	80037d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037cc:	f7ff fe4c 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 80037d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037d4:	e003      	b.n	80037de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037d6:	f7ff fe33 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 80037da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e8:	f040 810c 	bne.w	8003a04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037fe:	4622      	mov	r2, r4
 8003800:	462b      	mov	r3, r5
 8003802:	1891      	adds	r1, r2, r2
 8003804:	65b9      	str	r1, [r7, #88]	; 0x58
 8003806:	415b      	adcs	r3, r3
 8003808:	65fb      	str	r3, [r7, #92]	; 0x5c
 800380a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800380e:	4621      	mov	r1, r4
 8003810:	eb12 0801 	adds.w	r8, r2, r1
 8003814:	4629      	mov	r1, r5
 8003816:	eb43 0901 	adc.w	r9, r3, r1
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800382a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800382e:	4690      	mov	r8, r2
 8003830:	4699      	mov	r9, r3
 8003832:	4623      	mov	r3, r4
 8003834:	eb18 0303 	adds.w	r3, r8, r3
 8003838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800383c:	462b      	mov	r3, r5
 800383e:	eb49 0303 	adc.w	r3, r9, r3
 8003842:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003852:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003856:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800385a:	460b      	mov	r3, r1
 800385c:	18db      	adds	r3, r3, r3
 800385e:	653b      	str	r3, [r7, #80]	; 0x50
 8003860:	4613      	mov	r3, r2
 8003862:	eb42 0303 	adc.w	r3, r2, r3
 8003866:	657b      	str	r3, [r7, #84]	; 0x54
 8003868:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800386c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003870:	f7fc fd0e 	bl	8000290 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4b61      	ldr	r3, [pc, #388]	; (8003a00 <UART_SetConfig+0x2d4>)
 800387a:	fba3 2302 	umull	r2, r3, r3, r2
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	011c      	lsls	r4, r3, #4
 8003882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003886:	2200      	movs	r2, #0
 8003888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800388c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003890:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003894:	4642      	mov	r2, r8
 8003896:	464b      	mov	r3, r9
 8003898:	1891      	adds	r1, r2, r2
 800389a:	64b9      	str	r1, [r7, #72]	; 0x48
 800389c:	415b      	adcs	r3, r3
 800389e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038a4:	4641      	mov	r1, r8
 80038a6:	eb12 0a01 	adds.w	sl, r2, r1
 80038aa:	4649      	mov	r1, r9
 80038ac:	eb43 0b01 	adc.w	fp, r3, r1
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038c4:	4692      	mov	sl, r2
 80038c6:	469b      	mov	fp, r3
 80038c8:	4643      	mov	r3, r8
 80038ca:	eb1a 0303 	adds.w	r3, sl, r3
 80038ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038d2:	464b      	mov	r3, r9
 80038d4:	eb4b 0303 	adc.w	r3, fp, r3
 80038d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038f0:	460b      	mov	r3, r1
 80038f2:	18db      	adds	r3, r3, r3
 80038f4:	643b      	str	r3, [r7, #64]	; 0x40
 80038f6:	4613      	mov	r3, r2
 80038f8:	eb42 0303 	adc.w	r3, r2, r3
 80038fc:	647b      	str	r3, [r7, #68]	; 0x44
 80038fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003902:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003906:	f7fc fcc3 	bl	8000290 <__aeabi_uldivmod>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4611      	mov	r1, r2
 8003910:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <UART_SetConfig+0x2d4>)
 8003912:	fba3 2301 	umull	r2, r3, r3, r1
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	2264      	movs	r2, #100	; 0x64
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	1acb      	subs	r3, r1, r3
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003926:	4b36      	ldr	r3, [pc, #216]	; (8003a00 <UART_SetConfig+0x2d4>)
 8003928:	fba3 2302 	umull	r2, r3, r3, r2
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003934:	441c      	add	r4, r3
 8003936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800393a:	2200      	movs	r2, #0
 800393c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003940:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003944:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003948:	4642      	mov	r2, r8
 800394a:	464b      	mov	r3, r9
 800394c:	1891      	adds	r1, r2, r2
 800394e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003950:	415b      	adcs	r3, r3
 8003952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003954:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003958:	4641      	mov	r1, r8
 800395a:	1851      	adds	r1, r2, r1
 800395c:	6339      	str	r1, [r7, #48]	; 0x30
 800395e:	4649      	mov	r1, r9
 8003960:	414b      	adcs	r3, r1
 8003962:	637b      	str	r3, [r7, #52]	; 0x34
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003970:	4659      	mov	r1, fp
 8003972:	00cb      	lsls	r3, r1, #3
 8003974:	4651      	mov	r1, sl
 8003976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800397a:	4651      	mov	r1, sl
 800397c:	00ca      	lsls	r2, r1, #3
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	4603      	mov	r3, r0
 8003984:	4642      	mov	r2, r8
 8003986:	189b      	adds	r3, r3, r2
 8003988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800398c:	464b      	mov	r3, r9
 800398e:	460a      	mov	r2, r1
 8003990:	eb42 0303 	adc.w	r3, r2, r3
 8003994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039ac:	460b      	mov	r3, r1
 80039ae:	18db      	adds	r3, r3, r3
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b2:	4613      	mov	r3, r2
 80039b4:	eb42 0303 	adc.w	r3, r2, r3
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039c2:	f7fc fc65 	bl	8000290 <__aeabi_uldivmod>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <UART_SetConfig+0x2d4>)
 80039cc:	fba3 1302 	umull	r1, r3, r3, r2
 80039d0:	095b      	lsrs	r3, r3, #5
 80039d2:	2164      	movs	r1, #100	; 0x64
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	3332      	adds	r3, #50	; 0x32
 80039de:	4a08      	ldr	r2, [pc, #32]	; (8003a00 <UART_SetConfig+0x2d4>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	f003 0207 	and.w	r2, r3, #7
 80039ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4422      	add	r2, r4
 80039f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039f4:	e106      	b.n	8003c04 <UART_SetConfig+0x4d8>
 80039f6:	bf00      	nop
 80039f8:	40011000 	.word	0x40011000
 80039fc:	40011400 	.word	0x40011400
 8003a00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a16:	4642      	mov	r2, r8
 8003a18:	464b      	mov	r3, r9
 8003a1a:	1891      	adds	r1, r2, r2
 8003a1c:	6239      	str	r1, [r7, #32]
 8003a1e:	415b      	adcs	r3, r3
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
 8003a22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a26:	4641      	mov	r1, r8
 8003a28:	1854      	adds	r4, r2, r1
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	eb43 0501 	adc.w	r5, r3, r1
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	00eb      	lsls	r3, r5, #3
 8003a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a3e:	00e2      	lsls	r2, r4, #3
 8003a40:	4614      	mov	r4, r2
 8003a42:	461d      	mov	r5, r3
 8003a44:	4643      	mov	r3, r8
 8003a46:	18e3      	adds	r3, r4, r3
 8003a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a4c:	464b      	mov	r3, r9
 8003a4e:	eb45 0303 	adc.w	r3, r5, r3
 8003a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a72:	4629      	mov	r1, r5
 8003a74:	008b      	lsls	r3, r1, #2
 8003a76:	4621      	mov	r1, r4
 8003a78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	008a      	lsls	r2, r1, #2
 8003a80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a84:	f7fc fc04 	bl	8000290 <__aeabi_uldivmod>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4b60      	ldr	r3, [pc, #384]	; (8003c10 <UART_SetConfig+0x4e4>)
 8003a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	011c      	lsls	r4, r3, #4
 8003a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003aa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003aa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003aa8:	4642      	mov	r2, r8
 8003aaa:	464b      	mov	r3, r9
 8003aac:	1891      	adds	r1, r2, r2
 8003aae:	61b9      	str	r1, [r7, #24]
 8003ab0:	415b      	adcs	r3, r3
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab8:	4641      	mov	r1, r8
 8003aba:	1851      	adds	r1, r2, r1
 8003abc:	6139      	str	r1, [r7, #16]
 8003abe:	4649      	mov	r1, r9
 8003ac0:	414b      	adcs	r3, r1
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ad0:	4659      	mov	r1, fp
 8003ad2:	00cb      	lsls	r3, r1, #3
 8003ad4:	4651      	mov	r1, sl
 8003ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ada:	4651      	mov	r1, sl
 8003adc:	00ca      	lsls	r2, r1, #3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	189b      	adds	r3, r3, r2
 8003ae8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aec:	464b      	mov	r3, r9
 8003aee:	460a      	mov	r2, r1
 8003af0:	eb42 0303 	adc.w	r3, r2, r3
 8003af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b10:	4649      	mov	r1, r9
 8003b12:	008b      	lsls	r3, r1, #2
 8003b14:	4641      	mov	r1, r8
 8003b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b1a:	4641      	mov	r1, r8
 8003b1c:	008a      	lsls	r2, r1, #2
 8003b1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b22:	f7fc fbb5 	bl	8000290 <__aeabi_uldivmod>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <UART_SetConfig+0x4e4>)
 8003b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	2264      	movs	r2, #100	; 0x64
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	1acb      	subs	r3, r1, r3
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	3332      	adds	r3, #50	; 0x32
 8003b40:	4a33      	ldr	r2, [pc, #204]	; (8003c10 <UART_SetConfig+0x4e4>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b4c:	441c      	add	r4, r3
 8003b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b52:	2200      	movs	r2, #0
 8003b54:	673b      	str	r3, [r7, #112]	; 0x70
 8003b56:	677a      	str	r2, [r7, #116]	; 0x74
 8003b58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	1891      	adds	r1, r2, r2
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	415b      	adcs	r3, r3
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	1851      	adds	r1, r2, r1
 8003b70:	6039      	str	r1, [r7, #0]
 8003b72:	4649      	mov	r1, r9
 8003b74:	414b      	adcs	r3, r1
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b84:	4659      	mov	r1, fp
 8003b86:	00cb      	lsls	r3, r1, #3
 8003b88:	4651      	mov	r1, sl
 8003b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b8e:	4651      	mov	r1, sl
 8003b90:	00ca      	lsls	r2, r1, #3
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	4642      	mov	r2, r8
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	460a      	mov	r2, r1
 8003ba2:	eb42 0303 	adc.w	r3, r2, r3
 8003ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8003bb2:	667a      	str	r2, [r7, #100]	; 0x64
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	008b      	lsls	r3, r1, #2
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bca:	4641      	mov	r1, r8
 8003bcc:	008a      	lsls	r2, r1, #2
 8003bce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bd2:	f7fc fb5d 	bl	8000290 <__aeabi_uldivmod>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <UART_SetConfig+0x4e4>)
 8003bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	2164      	movs	r1, #100	; 0x64
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	3332      	adds	r3, #50	; 0x32
 8003bee:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <UART_SetConfig+0x4e4>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	f003 020f 	and.w	r2, r3, #15
 8003bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4422      	add	r2, r4
 8003c02:	609a      	str	r2, [r3, #8]
}
 8003c04:	bf00      	nop
 8003c06:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c10:	51eb851f 	.word	0x51eb851f

08003c14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c14:	b084      	sub	sp, #16
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	f107 001c 	add.w	r0, r7, #28
 8003c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d122      	bne.n	8003c72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d105      	bne.n	8003c66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 faa2 	bl	80041b0 <USB_CoreReset>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	73fb      	strb	r3, [r7, #15]
 8003c70:	e01a      	b.n	8003ca8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fa96 	bl	80041b0 <USB_CoreReset>
 8003c84:	4603      	mov	r3, r0
 8003c86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38
 8003c9a:	e005      	b.n	8003ca8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d10b      	bne.n	8003cc6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f043 0206 	orr.w	r2, r3, #6
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f043 0220 	orr.w	r2, r3, #32
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cd2:	b004      	add	sp, #16
 8003cd4:	4770      	bx	lr

08003cd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f023 0201 	bic.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d115      	bne.n	8003d46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d26:	2001      	movs	r0, #1
 8003d28:	f7fd f990 	bl	800104c <HAL_Delay>
      ms++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fa2e 	bl	8004194 <USB_GetMode>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d01e      	beq.n	8003d7c <USB_SetCurrentMode+0x84>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b31      	cmp	r3, #49	; 0x31
 8003d42:	d9f0      	bls.n	8003d26 <USB_SetCurrentMode+0x2e>
 8003d44:	e01a      	b.n	8003d7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d115      	bne.n	8003d78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d58:	2001      	movs	r0, #1
 8003d5a:	f7fd f977 	bl	800104c <HAL_Delay>
      ms++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fa15 	bl	8004194 <USB_GetMode>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <USB_SetCurrentMode+0x84>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b31      	cmp	r3, #49	; 0x31
 8003d74:	d9f0      	bls.n	8003d58 <USB_SetCurrentMode+0x60>
 8003d76:	e001      	b.n	8003d7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e005      	b.n	8003d88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b32      	cmp	r3, #50	; 0x32
 8003d80:	d101      	bne.n	8003d86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d90:	b084      	sub	sp, #16
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	e009      	b.n	8003dc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	3340      	adds	r3, #64	; 0x40
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	2200      	movs	r2, #0
 8003dbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b0e      	cmp	r3, #14
 8003dc8:	d9f2      	bls.n	8003db0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d11c      	bne.n	8003e0a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dde:	f043 0302 	orr.w	r3, r3, #2
 8003de2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
 8003e08:	e00b      	b.n	8003e22 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e34:	4619      	mov	r1, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	680b      	ldr	r3, [r1, #0]
 8003e40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d10c      	bne.n	8003e62 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e4e:	2100      	movs	r1, #0
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f965 	bl	8004120 <USB_SetDevSpeed>
 8003e56:	e008      	b.n	8003e6a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e58:	2101      	movs	r1, #1
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f960 	bl	8004120 <USB_SetDevSpeed>
 8003e60:	e003      	b.n	8003e6a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e62:	2103      	movs	r1, #3
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f95b 	bl	8004120 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e6a:	2110      	movs	r1, #16
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f8f3 	bl	8004058 <USB_FlushTxFifo>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f91f 	bl	80040c0 <USB_FlushRxFifo>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	461a      	mov	r2, r3
 8003e94:	2300      	movs	r3, #0
 8003e96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2300      	movs	r3, #0
 8003eae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	e043      	b.n	8003f3e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ecc:	d118      	bne.n	8003f00 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	e013      	b.n	8003f12 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e008      	b.n	8003f12 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1e:	461a      	mov	r2, r3
 8003f20:	2300      	movs	r3, #0
 8003f22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f30:	461a      	mov	r2, r3
 8003f32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d3b7      	bcc.n	8003eb6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	e043      	b.n	8003fd4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f62:	d118      	bne.n	8003f96 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f76:	461a      	mov	r2, r3
 8003f78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e013      	b.n	8003fa8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	e008      	b.n	8003fa8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d3b7      	bcc.n	8003f4c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ffc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	2b00      	cmp	r3, #0
 8004002:	d105      	bne.n	8004010 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f043 0210 	orr.w	r2, r3, #16
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <USB_DevInit+0x2c4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800401c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f043 0208 	orr.w	r2, r3, #8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d107      	bne.n	8004044 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800403c:	f043 0304 	orr.w	r3, r3, #4
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004044:	7dfb      	ldrb	r3, [r7, #23]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004050:	b004      	add	sp, #16
 8004052:	4770      	bx	lr
 8004054:	803c3800 	.word	0x803c3800

08004058 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3301      	adds	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a13      	ldr	r2, [pc, #76]	; (80040bc <USB_FlushTxFifo+0x64>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e01b      	b.n	80040b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	daf2      	bge.n	8004066 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	019b      	lsls	r3, r3, #6
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a08      	ldr	r2, [pc, #32]	; (80040bc <USB_FlushTxFifo+0x64>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e006      	b.n	80040b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d0f0      	beq.n	8004090 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	00030d40 	.word	0x00030d40

080040c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a11      	ldr	r2, [pc, #68]	; (800411c <USB_FlushRxFifo+0x5c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e018      	b.n	8004110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	daf2      	bge.n	80040cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2210      	movs	r2, #16
 80040ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3301      	adds	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a08      	ldr	r2, [pc, #32]	; (800411c <USB_FlushRxFifo+0x5c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e006      	b.n	8004110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b10      	cmp	r3, #16
 800410c:	d0f0      	beq.n	80040f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	00030d40 	.word	0x00030d40

08004120 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	68f9      	ldr	r1, [r7, #12]
 800413c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800416c:	f023 0303 	bic.w	r3, r3, #3
 8004170:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f003 0301 	and.w	r3, r3, #1
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3301      	adds	r3, #1
 80041c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4a13      	ldr	r2, [pc, #76]	; (8004214 <USB_CoreReset+0x64>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e01b      	b.n	8004206 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	daf2      	bge.n	80041bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f043 0201 	orr.w	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3301      	adds	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a09      	ldr	r2, [pc, #36]	; (8004214 <USB_CoreReset+0x64>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d901      	bls.n	80041f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e006      	b.n	8004206 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b01      	cmp	r3, #1
 8004202:	d0f0      	beq.n	80041e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	00030d40 	.word	0x00030d40

08004218 <siprintf>:
 8004218:	b40e      	push	{r1, r2, r3}
 800421a:	b500      	push	{lr}
 800421c:	b09c      	sub	sp, #112	; 0x70
 800421e:	ab1d      	add	r3, sp, #116	; 0x74
 8004220:	9002      	str	r0, [sp, #8]
 8004222:	9006      	str	r0, [sp, #24]
 8004224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004228:	4809      	ldr	r0, [pc, #36]	; (8004250 <siprintf+0x38>)
 800422a:	9107      	str	r1, [sp, #28]
 800422c:	9104      	str	r1, [sp, #16]
 800422e:	4909      	ldr	r1, [pc, #36]	; (8004254 <siprintf+0x3c>)
 8004230:	f853 2b04 	ldr.w	r2, [r3], #4
 8004234:	9105      	str	r1, [sp, #20]
 8004236:	6800      	ldr	r0, [r0, #0]
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	a902      	add	r1, sp, #8
 800423c:	f000 f992 	bl	8004564 <_svfiprintf_r>
 8004240:	9b02      	ldr	r3, [sp, #8]
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	b01c      	add	sp, #112	; 0x70
 8004248:	f85d eb04 	ldr.w	lr, [sp], #4
 800424c:	b003      	add	sp, #12
 800424e:	4770      	bx	lr
 8004250:	20000058 	.word	0x20000058
 8004254:	ffff0208 	.word	0xffff0208

08004258 <memset>:
 8004258:	4402      	add	r2, r0
 800425a:	4603      	mov	r3, r0
 800425c:	4293      	cmp	r3, r2
 800425e:	d100      	bne.n	8004262 <memset+0xa>
 8004260:	4770      	bx	lr
 8004262:	f803 1b01 	strb.w	r1, [r3], #1
 8004266:	e7f9      	b.n	800425c <memset+0x4>

08004268 <__errno>:
 8004268:	4b01      	ldr	r3, [pc, #4]	; (8004270 <__errno+0x8>)
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000058 	.word	0x20000058

08004274 <__libc_init_array>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	4d0d      	ldr	r5, [pc, #52]	; (80042ac <__libc_init_array+0x38>)
 8004278:	4c0d      	ldr	r4, [pc, #52]	; (80042b0 <__libc_init_array+0x3c>)
 800427a:	1b64      	subs	r4, r4, r5
 800427c:	10a4      	asrs	r4, r4, #2
 800427e:	2600      	movs	r6, #0
 8004280:	42a6      	cmp	r6, r4
 8004282:	d109      	bne.n	8004298 <__libc_init_array+0x24>
 8004284:	4d0b      	ldr	r5, [pc, #44]	; (80042b4 <__libc_init_array+0x40>)
 8004286:	4c0c      	ldr	r4, [pc, #48]	; (80042b8 <__libc_init_array+0x44>)
 8004288:	f000 fc6a 	bl	8004b60 <_init>
 800428c:	1b64      	subs	r4, r4, r5
 800428e:	10a4      	asrs	r4, r4, #2
 8004290:	2600      	movs	r6, #0
 8004292:	42a6      	cmp	r6, r4
 8004294:	d105      	bne.n	80042a2 <__libc_init_array+0x2e>
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	f855 3b04 	ldr.w	r3, [r5], #4
 800429c:	4798      	blx	r3
 800429e:	3601      	adds	r6, #1
 80042a0:	e7ee      	b.n	8004280 <__libc_init_array+0xc>
 80042a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a6:	4798      	blx	r3
 80042a8:	3601      	adds	r6, #1
 80042aa:	e7f2      	b.n	8004292 <__libc_init_array+0x1e>
 80042ac:	08004be0 	.word	0x08004be0
 80042b0:	08004be0 	.word	0x08004be0
 80042b4:	08004be0 	.word	0x08004be0
 80042b8:	08004be4 	.word	0x08004be4

080042bc <__retarget_lock_acquire_recursive>:
 80042bc:	4770      	bx	lr

080042be <__retarget_lock_release_recursive>:
 80042be:	4770      	bx	lr

080042c0 <_free_r>:
 80042c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042c2:	2900      	cmp	r1, #0
 80042c4:	d044      	beq.n	8004350 <_free_r+0x90>
 80042c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ca:	9001      	str	r0, [sp, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f1a1 0404 	sub.w	r4, r1, #4
 80042d2:	bfb8      	it	lt
 80042d4:	18e4      	addlt	r4, r4, r3
 80042d6:	f000 f8df 	bl	8004498 <__malloc_lock>
 80042da:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <_free_r+0x94>)
 80042dc:	9801      	ldr	r0, [sp, #4]
 80042de:	6813      	ldr	r3, [r2, #0]
 80042e0:	b933      	cbnz	r3, 80042f0 <_free_r+0x30>
 80042e2:	6063      	str	r3, [r4, #4]
 80042e4:	6014      	str	r4, [r2, #0]
 80042e6:	b003      	add	sp, #12
 80042e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042ec:	f000 b8da 	b.w	80044a4 <__malloc_unlock>
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	d908      	bls.n	8004306 <_free_r+0x46>
 80042f4:	6825      	ldr	r5, [r4, #0]
 80042f6:	1961      	adds	r1, r4, r5
 80042f8:	428b      	cmp	r3, r1
 80042fa:	bf01      	itttt	eq
 80042fc:	6819      	ldreq	r1, [r3, #0]
 80042fe:	685b      	ldreq	r3, [r3, #4]
 8004300:	1949      	addeq	r1, r1, r5
 8004302:	6021      	streq	r1, [r4, #0]
 8004304:	e7ed      	b.n	80042e2 <_free_r+0x22>
 8004306:	461a      	mov	r2, r3
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	b10b      	cbz	r3, 8004310 <_free_r+0x50>
 800430c:	42a3      	cmp	r3, r4
 800430e:	d9fa      	bls.n	8004306 <_free_r+0x46>
 8004310:	6811      	ldr	r1, [r2, #0]
 8004312:	1855      	adds	r5, r2, r1
 8004314:	42a5      	cmp	r5, r4
 8004316:	d10b      	bne.n	8004330 <_free_r+0x70>
 8004318:	6824      	ldr	r4, [r4, #0]
 800431a:	4421      	add	r1, r4
 800431c:	1854      	adds	r4, r2, r1
 800431e:	42a3      	cmp	r3, r4
 8004320:	6011      	str	r1, [r2, #0]
 8004322:	d1e0      	bne.n	80042e6 <_free_r+0x26>
 8004324:	681c      	ldr	r4, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	6053      	str	r3, [r2, #4]
 800432a:	440c      	add	r4, r1
 800432c:	6014      	str	r4, [r2, #0]
 800432e:	e7da      	b.n	80042e6 <_free_r+0x26>
 8004330:	d902      	bls.n	8004338 <_free_r+0x78>
 8004332:	230c      	movs	r3, #12
 8004334:	6003      	str	r3, [r0, #0]
 8004336:	e7d6      	b.n	80042e6 <_free_r+0x26>
 8004338:	6825      	ldr	r5, [r4, #0]
 800433a:	1961      	adds	r1, r4, r5
 800433c:	428b      	cmp	r3, r1
 800433e:	bf04      	itt	eq
 8004340:	6819      	ldreq	r1, [r3, #0]
 8004342:	685b      	ldreq	r3, [r3, #4]
 8004344:	6063      	str	r3, [r4, #4]
 8004346:	bf04      	itt	eq
 8004348:	1949      	addeq	r1, r1, r5
 800434a:	6021      	streq	r1, [r4, #0]
 800434c:	6054      	str	r4, [r2, #4]
 800434e:	e7ca      	b.n	80042e6 <_free_r+0x26>
 8004350:	b003      	add	sp, #12
 8004352:	bd30      	pop	{r4, r5, pc}
 8004354:	200009ac 	.word	0x200009ac

08004358 <sbrk_aligned>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	4e0e      	ldr	r6, [pc, #56]	; (8004394 <sbrk_aligned+0x3c>)
 800435c:	460c      	mov	r4, r1
 800435e:	6831      	ldr	r1, [r6, #0]
 8004360:	4605      	mov	r5, r0
 8004362:	b911      	cbnz	r1, 800436a <sbrk_aligned+0x12>
 8004364:	f000 fba6 	bl	8004ab4 <_sbrk_r>
 8004368:	6030      	str	r0, [r6, #0]
 800436a:	4621      	mov	r1, r4
 800436c:	4628      	mov	r0, r5
 800436e:	f000 fba1 	bl	8004ab4 <_sbrk_r>
 8004372:	1c43      	adds	r3, r0, #1
 8004374:	d00a      	beq.n	800438c <sbrk_aligned+0x34>
 8004376:	1cc4      	adds	r4, r0, #3
 8004378:	f024 0403 	bic.w	r4, r4, #3
 800437c:	42a0      	cmp	r0, r4
 800437e:	d007      	beq.n	8004390 <sbrk_aligned+0x38>
 8004380:	1a21      	subs	r1, r4, r0
 8004382:	4628      	mov	r0, r5
 8004384:	f000 fb96 	bl	8004ab4 <_sbrk_r>
 8004388:	3001      	adds	r0, #1
 800438a:	d101      	bne.n	8004390 <sbrk_aligned+0x38>
 800438c:	f04f 34ff 	mov.w	r4, #4294967295
 8004390:	4620      	mov	r0, r4
 8004392:	bd70      	pop	{r4, r5, r6, pc}
 8004394:	200009b0 	.word	0x200009b0

08004398 <_malloc_r>:
 8004398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800439c:	1ccd      	adds	r5, r1, #3
 800439e:	f025 0503 	bic.w	r5, r5, #3
 80043a2:	3508      	adds	r5, #8
 80043a4:	2d0c      	cmp	r5, #12
 80043a6:	bf38      	it	cc
 80043a8:	250c      	movcc	r5, #12
 80043aa:	2d00      	cmp	r5, #0
 80043ac:	4607      	mov	r7, r0
 80043ae:	db01      	blt.n	80043b4 <_malloc_r+0x1c>
 80043b0:	42a9      	cmp	r1, r5
 80043b2:	d905      	bls.n	80043c0 <_malloc_r+0x28>
 80043b4:	230c      	movs	r3, #12
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	2600      	movs	r6, #0
 80043ba:	4630      	mov	r0, r6
 80043bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004494 <_malloc_r+0xfc>
 80043c4:	f000 f868 	bl	8004498 <__malloc_lock>
 80043c8:	f8d8 3000 	ldr.w	r3, [r8]
 80043cc:	461c      	mov	r4, r3
 80043ce:	bb5c      	cbnz	r4, 8004428 <_malloc_r+0x90>
 80043d0:	4629      	mov	r1, r5
 80043d2:	4638      	mov	r0, r7
 80043d4:	f7ff ffc0 	bl	8004358 <sbrk_aligned>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	4604      	mov	r4, r0
 80043dc:	d155      	bne.n	800448a <_malloc_r+0xf2>
 80043de:	f8d8 4000 	ldr.w	r4, [r8]
 80043e2:	4626      	mov	r6, r4
 80043e4:	2e00      	cmp	r6, #0
 80043e6:	d145      	bne.n	8004474 <_malloc_r+0xdc>
 80043e8:	2c00      	cmp	r4, #0
 80043ea:	d048      	beq.n	800447e <_malloc_r+0xe6>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	4631      	mov	r1, r6
 80043f0:	4638      	mov	r0, r7
 80043f2:	eb04 0903 	add.w	r9, r4, r3
 80043f6:	f000 fb5d 	bl	8004ab4 <_sbrk_r>
 80043fa:	4581      	cmp	r9, r0
 80043fc:	d13f      	bne.n	800447e <_malloc_r+0xe6>
 80043fe:	6821      	ldr	r1, [r4, #0]
 8004400:	1a6d      	subs	r5, r5, r1
 8004402:	4629      	mov	r1, r5
 8004404:	4638      	mov	r0, r7
 8004406:	f7ff ffa7 	bl	8004358 <sbrk_aligned>
 800440a:	3001      	adds	r0, #1
 800440c:	d037      	beq.n	800447e <_malloc_r+0xe6>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	442b      	add	r3, r5
 8004412:	6023      	str	r3, [r4, #0]
 8004414:	f8d8 3000 	ldr.w	r3, [r8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d038      	beq.n	800448e <_malloc_r+0xf6>
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	42a2      	cmp	r2, r4
 8004420:	d12b      	bne.n	800447a <_malloc_r+0xe2>
 8004422:	2200      	movs	r2, #0
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	e00f      	b.n	8004448 <_malloc_r+0xb0>
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	1b52      	subs	r2, r2, r5
 800442c:	d41f      	bmi.n	800446e <_malloc_r+0xd6>
 800442e:	2a0b      	cmp	r2, #11
 8004430:	d917      	bls.n	8004462 <_malloc_r+0xca>
 8004432:	1961      	adds	r1, r4, r5
 8004434:	42a3      	cmp	r3, r4
 8004436:	6025      	str	r5, [r4, #0]
 8004438:	bf18      	it	ne
 800443a:	6059      	strne	r1, [r3, #4]
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	bf08      	it	eq
 8004440:	f8c8 1000 	streq.w	r1, [r8]
 8004444:	5162      	str	r2, [r4, r5]
 8004446:	604b      	str	r3, [r1, #4]
 8004448:	4638      	mov	r0, r7
 800444a:	f104 060b 	add.w	r6, r4, #11
 800444e:	f000 f829 	bl	80044a4 <__malloc_unlock>
 8004452:	f026 0607 	bic.w	r6, r6, #7
 8004456:	1d23      	adds	r3, r4, #4
 8004458:	1af2      	subs	r2, r6, r3
 800445a:	d0ae      	beq.n	80043ba <_malloc_r+0x22>
 800445c:	1b9b      	subs	r3, r3, r6
 800445e:	50a3      	str	r3, [r4, r2]
 8004460:	e7ab      	b.n	80043ba <_malloc_r+0x22>
 8004462:	42a3      	cmp	r3, r4
 8004464:	6862      	ldr	r2, [r4, #4]
 8004466:	d1dd      	bne.n	8004424 <_malloc_r+0x8c>
 8004468:	f8c8 2000 	str.w	r2, [r8]
 800446c:	e7ec      	b.n	8004448 <_malloc_r+0xb0>
 800446e:	4623      	mov	r3, r4
 8004470:	6864      	ldr	r4, [r4, #4]
 8004472:	e7ac      	b.n	80043ce <_malloc_r+0x36>
 8004474:	4634      	mov	r4, r6
 8004476:	6876      	ldr	r6, [r6, #4]
 8004478:	e7b4      	b.n	80043e4 <_malloc_r+0x4c>
 800447a:	4613      	mov	r3, r2
 800447c:	e7cc      	b.n	8004418 <_malloc_r+0x80>
 800447e:	230c      	movs	r3, #12
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	4638      	mov	r0, r7
 8004484:	f000 f80e 	bl	80044a4 <__malloc_unlock>
 8004488:	e797      	b.n	80043ba <_malloc_r+0x22>
 800448a:	6025      	str	r5, [r4, #0]
 800448c:	e7dc      	b.n	8004448 <_malloc_r+0xb0>
 800448e:	605b      	str	r3, [r3, #4]
 8004490:	deff      	udf	#255	; 0xff
 8004492:	bf00      	nop
 8004494:	200009ac 	.word	0x200009ac

08004498 <__malloc_lock>:
 8004498:	4801      	ldr	r0, [pc, #4]	; (80044a0 <__malloc_lock+0x8>)
 800449a:	f7ff bf0f 	b.w	80042bc <__retarget_lock_acquire_recursive>
 800449e:	bf00      	nop
 80044a0:	200009a8 	.word	0x200009a8

080044a4 <__malloc_unlock>:
 80044a4:	4801      	ldr	r0, [pc, #4]	; (80044ac <__malloc_unlock+0x8>)
 80044a6:	f7ff bf0a 	b.w	80042be <__retarget_lock_release_recursive>
 80044aa:	bf00      	nop
 80044ac:	200009a8 	.word	0x200009a8

080044b0 <__ssputs_r>:
 80044b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b4:	688e      	ldr	r6, [r1, #8]
 80044b6:	461f      	mov	r7, r3
 80044b8:	42be      	cmp	r6, r7
 80044ba:	680b      	ldr	r3, [r1, #0]
 80044bc:	4682      	mov	sl, r0
 80044be:	460c      	mov	r4, r1
 80044c0:	4690      	mov	r8, r2
 80044c2:	d82c      	bhi.n	800451e <__ssputs_r+0x6e>
 80044c4:	898a      	ldrh	r2, [r1, #12]
 80044c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044ca:	d026      	beq.n	800451a <__ssputs_r+0x6a>
 80044cc:	6965      	ldr	r5, [r4, #20]
 80044ce:	6909      	ldr	r1, [r1, #16]
 80044d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044d4:	eba3 0901 	sub.w	r9, r3, r1
 80044d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044dc:	1c7b      	adds	r3, r7, #1
 80044de:	444b      	add	r3, r9
 80044e0:	106d      	asrs	r5, r5, #1
 80044e2:	429d      	cmp	r5, r3
 80044e4:	bf38      	it	cc
 80044e6:	461d      	movcc	r5, r3
 80044e8:	0553      	lsls	r3, r2, #21
 80044ea:	d527      	bpl.n	800453c <__ssputs_r+0x8c>
 80044ec:	4629      	mov	r1, r5
 80044ee:	f7ff ff53 	bl	8004398 <_malloc_r>
 80044f2:	4606      	mov	r6, r0
 80044f4:	b360      	cbz	r0, 8004550 <__ssputs_r+0xa0>
 80044f6:	6921      	ldr	r1, [r4, #16]
 80044f8:	464a      	mov	r2, r9
 80044fa:	f000 faeb 	bl	8004ad4 <memcpy>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004508:	81a3      	strh	r3, [r4, #12]
 800450a:	6126      	str	r6, [r4, #16]
 800450c:	6165      	str	r5, [r4, #20]
 800450e:	444e      	add	r6, r9
 8004510:	eba5 0509 	sub.w	r5, r5, r9
 8004514:	6026      	str	r6, [r4, #0]
 8004516:	60a5      	str	r5, [r4, #8]
 8004518:	463e      	mov	r6, r7
 800451a:	42be      	cmp	r6, r7
 800451c:	d900      	bls.n	8004520 <__ssputs_r+0x70>
 800451e:	463e      	mov	r6, r7
 8004520:	6820      	ldr	r0, [r4, #0]
 8004522:	4632      	mov	r2, r6
 8004524:	4641      	mov	r1, r8
 8004526:	f000 faab 	bl	8004a80 <memmove>
 800452a:	68a3      	ldr	r3, [r4, #8]
 800452c:	1b9b      	subs	r3, r3, r6
 800452e:	60a3      	str	r3, [r4, #8]
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	4433      	add	r3, r6
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	2000      	movs	r0, #0
 8004538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453c:	462a      	mov	r2, r5
 800453e:	f000 fad7 	bl	8004af0 <_realloc_r>
 8004542:	4606      	mov	r6, r0
 8004544:	2800      	cmp	r0, #0
 8004546:	d1e0      	bne.n	800450a <__ssputs_r+0x5a>
 8004548:	6921      	ldr	r1, [r4, #16]
 800454a:	4650      	mov	r0, sl
 800454c:	f7ff feb8 	bl	80042c0 <_free_r>
 8004550:	230c      	movs	r3, #12
 8004552:	f8ca 3000 	str.w	r3, [sl]
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	f04f 30ff 	mov.w	r0, #4294967295
 8004562:	e7e9      	b.n	8004538 <__ssputs_r+0x88>

08004564 <_svfiprintf_r>:
 8004564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004568:	4698      	mov	r8, r3
 800456a:	898b      	ldrh	r3, [r1, #12]
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	b09d      	sub	sp, #116	; 0x74
 8004570:	4607      	mov	r7, r0
 8004572:	460d      	mov	r5, r1
 8004574:	4614      	mov	r4, r2
 8004576:	d50e      	bpl.n	8004596 <_svfiprintf_r+0x32>
 8004578:	690b      	ldr	r3, [r1, #16]
 800457a:	b963      	cbnz	r3, 8004596 <_svfiprintf_r+0x32>
 800457c:	2140      	movs	r1, #64	; 0x40
 800457e:	f7ff ff0b 	bl	8004398 <_malloc_r>
 8004582:	6028      	str	r0, [r5, #0]
 8004584:	6128      	str	r0, [r5, #16]
 8004586:	b920      	cbnz	r0, 8004592 <_svfiprintf_r+0x2e>
 8004588:	230c      	movs	r3, #12
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	e0d0      	b.n	8004734 <_svfiprintf_r+0x1d0>
 8004592:	2340      	movs	r3, #64	; 0x40
 8004594:	616b      	str	r3, [r5, #20]
 8004596:	2300      	movs	r3, #0
 8004598:	9309      	str	r3, [sp, #36]	; 0x24
 800459a:	2320      	movs	r3, #32
 800459c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80045a4:	2330      	movs	r3, #48	; 0x30
 80045a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800474c <_svfiprintf_r+0x1e8>
 80045aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045ae:	f04f 0901 	mov.w	r9, #1
 80045b2:	4623      	mov	r3, r4
 80045b4:	469a      	mov	sl, r3
 80045b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045ba:	b10a      	cbz	r2, 80045c0 <_svfiprintf_r+0x5c>
 80045bc:	2a25      	cmp	r2, #37	; 0x25
 80045be:	d1f9      	bne.n	80045b4 <_svfiprintf_r+0x50>
 80045c0:	ebba 0b04 	subs.w	fp, sl, r4
 80045c4:	d00b      	beq.n	80045de <_svfiprintf_r+0x7a>
 80045c6:	465b      	mov	r3, fp
 80045c8:	4622      	mov	r2, r4
 80045ca:	4629      	mov	r1, r5
 80045cc:	4638      	mov	r0, r7
 80045ce:	f7ff ff6f 	bl	80044b0 <__ssputs_r>
 80045d2:	3001      	adds	r0, #1
 80045d4:	f000 80a9 	beq.w	800472a <_svfiprintf_r+0x1c6>
 80045d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045da:	445a      	add	r2, fp
 80045dc:	9209      	str	r2, [sp, #36]	; 0x24
 80045de:	f89a 3000 	ldrb.w	r3, [sl]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80a1 	beq.w	800472a <_svfiprintf_r+0x1c6>
 80045e8:	2300      	movs	r3, #0
 80045ea:	f04f 32ff 	mov.w	r2, #4294967295
 80045ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045f2:	f10a 0a01 	add.w	sl, sl, #1
 80045f6:	9304      	str	r3, [sp, #16]
 80045f8:	9307      	str	r3, [sp, #28]
 80045fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045fe:	931a      	str	r3, [sp, #104]	; 0x68
 8004600:	4654      	mov	r4, sl
 8004602:	2205      	movs	r2, #5
 8004604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004608:	4850      	ldr	r0, [pc, #320]	; (800474c <_svfiprintf_r+0x1e8>)
 800460a:	f7fb fdf1 	bl	80001f0 <memchr>
 800460e:	9a04      	ldr	r2, [sp, #16]
 8004610:	b9d8      	cbnz	r0, 800464a <_svfiprintf_r+0xe6>
 8004612:	06d0      	lsls	r0, r2, #27
 8004614:	bf44      	itt	mi
 8004616:	2320      	movmi	r3, #32
 8004618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800461c:	0711      	lsls	r1, r2, #28
 800461e:	bf44      	itt	mi
 8004620:	232b      	movmi	r3, #43	; 0x2b
 8004622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004626:	f89a 3000 	ldrb.w	r3, [sl]
 800462a:	2b2a      	cmp	r3, #42	; 0x2a
 800462c:	d015      	beq.n	800465a <_svfiprintf_r+0xf6>
 800462e:	9a07      	ldr	r2, [sp, #28]
 8004630:	4654      	mov	r4, sl
 8004632:	2000      	movs	r0, #0
 8004634:	f04f 0c0a 	mov.w	ip, #10
 8004638:	4621      	mov	r1, r4
 800463a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800463e:	3b30      	subs	r3, #48	; 0x30
 8004640:	2b09      	cmp	r3, #9
 8004642:	d94d      	bls.n	80046e0 <_svfiprintf_r+0x17c>
 8004644:	b1b0      	cbz	r0, 8004674 <_svfiprintf_r+0x110>
 8004646:	9207      	str	r2, [sp, #28]
 8004648:	e014      	b.n	8004674 <_svfiprintf_r+0x110>
 800464a:	eba0 0308 	sub.w	r3, r0, r8
 800464e:	fa09 f303 	lsl.w	r3, r9, r3
 8004652:	4313      	orrs	r3, r2
 8004654:	9304      	str	r3, [sp, #16]
 8004656:	46a2      	mov	sl, r4
 8004658:	e7d2      	b.n	8004600 <_svfiprintf_r+0x9c>
 800465a:	9b03      	ldr	r3, [sp, #12]
 800465c:	1d19      	adds	r1, r3, #4
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	9103      	str	r1, [sp, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	bfbb      	ittet	lt
 8004666:	425b      	neglt	r3, r3
 8004668:	f042 0202 	orrlt.w	r2, r2, #2
 800466c:	9307      	strge	r3, [sp, #28]
 800466e:	9307      	strlt	r3, [sp, #28]
 8004670:	bfb8      	it	lt
 8004672:	9204      	strlt	r2, [sp, #16]
 8004674:	7823      	ldrb	r3, [r4, #0]
 8004676:	2b2e      	cmp	r3, #46	; 0x2e
 8004678:	d10c      	bne.n	8004694 <_svfiprintf_r+0x130>
 800467a:	7863      	ldrb	r3, [r4, #1]
 800467c:	2b2a      	cmp	r3, #42	; 0x2a
 800467e:	d134      	bne.n	80046ea <_svfiprintf_r+0x186>
 8004680:	9b03      	ldr	r3, [sp, #12]
 8004682:	1d1a      	adds	r2, r3, #4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	9203      	str	r2, [sp, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	bfb8      	it	lt
 800468c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004690:	3402      	adds	r4, #2
 8004692:	9305      	str	r3, [sp, #20]
 8004694:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800475c <_svfiprintf_r+0x1f8>
 8004698:	7821      	ldrb	r1, [r4, #0]
 800469a:	2203      	movs	r2, #3
 800469c:	4650      	mov	r0, sl
 800469e:	f7fb fda7 	bl	80001f0 <memchr>
 80046a2:	b138      	cbz	r0, 80046b4 <_svfiprintf_r+0x150>
 80046a4:	9b04      	ldr	r3, [sp, #16]
 80046a6:	eba0 000a 	sub.w	r0, r0, sl
 80046aa:	2240      	movs	r2, #64	; 0x40
 80046ac:	4082      	lsls	r2, r0
 80046ae:	4313      	orrs	r3, r2
 80046b0:	3401      	adds	r4, #1
 80046b2:	9304      	str	r3, [sp, #16]
 80046b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b8:	4825      	ldr	r0, [pc, #148]	; (8004750 <_svfiprintf_r+0x1ec>)
 80046ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046be:	2206      	movs	r2, #6
 80046c0:	f7fb fd96 	bl	80001f0 <memchr>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d038      	beq.n	800473a <_svfiprintf_r+0x1d6>
 80046c8:	4b22      	ldr	r3, [pc, #136]	; (8004754 <_svfiprintf_r+0x1f0>)
 80046ca:	bb1b      	cbnz	r3, 8004714 <_svfiprintf_r+0x1b0>
 80046cc:	9b03      	ldr	r3, [sp, #12]
 80046ce:	3307      	adds	r3, #7
 80046d0:	f023 0307 	bic.w	r3, r3, #7
 80046d4:	3308      	adds	r3, #8
 80046d6:	9303      	str	r3, [sp, #12]
 80046d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046da:	4433      	add	r3, r6
 80046dc:	9309      	str	r3, [sp, #36]	; 0x24
 80046de:	e768      	b.n	80045b2 <_svfiprintf_r+0x4e>
 80046e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80046e4:	460c      	mov	r4, r1
 80046e6:	2001      	movs	r0, #1
 80046e8:	e7a6      	b.n	8004638 <_svfiprintf_r+0xd4>
 80046ea:	2300      	movs	r3, #0
 80046ec:	3401      	adds	r4, #1
 80046ee:	9305      	str	r3, [sp, #20]
 80046f0:	4619      	mov	r1, r3
 80046f2:	f04f 0c0a 	mov.w	ip, #10
 80046f6:	4620      	mov	r0, r4
 80046f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046fc:	3a30      	subs	r2, #48	; 0x30
 80046fe:	2a09      	cmp	r2, #9
 8004700:	d903      	bls.n	800470a <_svfiprintf_r+0x1a6>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0c6      	beq.n	8004694 <_svfiprintf_r+0x130>
 8004706:	9105      	str	r1, [sp, #20]
 8004708:	e7c4      	b.n	8004694 <_svfiprintf_r+0x130>
 800470a:	fb0c 2101 	mla	r1, ip, r1, r2
 800470e:	4604      	mov	r4, r0
 8004710:	2301      	movs	r3, #1
 8004712:	e7f0      	b.n	80046f6 <_svfiprintf_r+0x192>
 8004714:	ab03      	add	r3, sp, #12
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	462a      	mov	r2, r5
 800471a:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <_svfiprintf_r+0x1f4>)
 800471c:	a904      	add	r1, sp, #16
 800471e:	4638      	mov	r0, r7
 8004720:	f3af 8000 	nop.w
 8004724:	1c42      	adds	r2, r0, #1
 8004726:	4606      	mov	r6, r0
 8004728:	d1d6      	bne.n	80046d8 <_svfiprintf_r+0x174>
 800472a:	89ab      	ldrh	r3, [r5, #12]
 800472c:	065b      	lsls	r3, r3, #25
 800472e:	f53f af2d 	bmi.w	800458c <_svfiprintf_r+0x28>
 8004732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004734:	b01d      	add	sp, #116	; 0x74
 8004736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800473a:	ab03      	add	r3, sp, #12
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	462a      	mov	r2, r5
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <_svfiprintf_r+0x1f4>)
 8004742:	a904      	add	r1, sp, #16
 8004744:	4638      	mov	r0, r7
 8004746:	f000 f879 	bl	800483c <_printf_i>
 800474a:	e7eb      	b.n	8004724 <_svfiprintf_r+0x1c0>
 800474c:	08004ba4 	.word	0x08004ba4
 8004750:	08004bae 	.word	0x08004bae
 8004754:	00000000 	.word	0x00000000
 8004758:	080044b1 	.word	0x080044b1
 800475c:	08004baa 	.word	0x08004baa

08004760 <_printf_common>:
 8004760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004764:	4616      	mov	r6, r2
 8004766:	4699      	mov	r9, r3
 8004768:	688a      	ldr	r2, [r1, #8]
 800476a:	690b      	ldr	r3, [r1, #16]
 800476c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004770:	4293      	cmp	r3, r2
 8004772:	bfb8      	it	lt
 8004774:	4613      	movlt	r3, r2
 8004776:	6033      	str	r3, [r6, #0]
 8004778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800477c:	4607      	mov	r7, r0
 800477e:	460c      	mov	r4, r1
 8004780:	b10a      	cbz	r2, 8004786 <_printf_common+0x26>
 8004782:	3301      	adds	r3, #1
 8004784:	6033      	str	r3, [r6, #0]
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	0699      	lsls	r1, r3, #26
 800478a:	bf42      	ittt	mi
 800478c:	6833      	ldrmi	r3, [r6, #0]
 800478e:	3302      	addmi	r3, #2
 8004790:	6033      	strmi	r3, [r6, #0]
 8004792:	6825      	ldr	r5, [r4, #0]
 8004794:	f015 0506 	ands.w	r5, r5, #6
 8004798:	d106      	bne.n	80047a8 <_printf_common+0x48>
 800479a:	f104 0a19 	add.w	sl, r4, #25
 800479e:	68e3      	ldr	r3, [r4, #12]
 80047a0:	6832      	ldr	r2, [r6, #0]
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	42ab      	cmp	r3, r5
 80047a6:	dc26      	bgt.n	80047f6 <_printf_common+0x96>
 80047a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047ac:	1e13      	subs	r3, r2, #0
 80047ae:	6822      	ldr	r2, [r4, #0]
 80047b0:	bf18      	it	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	0692      	lsls	r2, r2, #26
 80047b6:	d42b      	bmi.n	8004810 <_printf_common+0xb0>
 80047b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047bc:	4649      	mov	r1, r9
 80047be:	4638      	mov	r0, r7
 80047c0:	47c0      	blx	r8
 80047c2:	3001      	adds	r0, #1
 80047c4:	d01e      	beq.n	8004804 <_printf_common+0xa4>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	6922      	ldr	r2, [r4, #16]
 80047ca:	f003 0306 	and.w	r3, r3, #6
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	bf02      	ittt	eq
 80047d2:	68e5      	ldreq	r5, [r4, #12]
 80047d4:	6833      	ldreq	r3, [r6, #0]
 80047d6:	1aed      	subeq	r5, r5, r3
 80047d8:	68a3      	ldr	r3, [r4, #8]
 80047da:	bf0c      	ite	eq
 80047dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047e0:	2500      	movne	r5, #0
 80047e2:	4293      	cmp	r3, r2
 80047e4:	bfc4      	itt	gt
 80047e6:	1a9b      	subgt	r3, r3, r2
 80047e8:	18ed      	addgt	r5, r5, r3
 80047ea:	2600      	movs	r6, #0
 80047ec:	341a      	adds	r4, #26
 80047ee:	42b5      	cmp	r5, r6
 80047f0:	d11a      	bne.n	8004828 <_printf_common+0xc8>
 80047f2:	2000      	movs	r0, #0
 80047f4:	e008      	b.n	8004808 <_printf_common+0xa8>
 80047f6:	2301      	movs	r3, #1
 80047f8:	4652      	mov	r2, sl
 80047fa:	4649      	mov	r1, r9
 80047fc:	4638      	mov	r0, r7
 80047fe:	47c0      	blx	r8
 8004800:	3001      	adds	r0, #1
 8004802:	d103      	bne.n	800480c <_printf_common+0xac>
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
 8004808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480c:	3501      	adds	r5, #1
 800480e:	e7c6      	b.n	800479e <_printf_common+0x3e>
 8004810:	18e1      	adds	r1, r4, r3
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	2030      	movs	r0, #48	; 0x30
 8004816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800481a:	4422      	add	r2, r4
 800481c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004824:	3302      	adds	r3, #2
 8004826:	e7c7      	b.n	80047b8 <_printf_common+0x58>
 8004828:	2301      	movs	r3, #1
 800482a:	4622      	mov	r2, r4
 800482c:	4649      	mov	r1, r9
 800482e:	4638      	mov	r0, r7
 8004830:	47c0      	blx	r8
 8004832:	3001      	adds	r0, #1
 8004834:	d0e6      	beq.n	8004804 <_printf_common+0xa4>
 8004836:	3601      	adds	r6, #1
 8004838:	e7d9      	b.n	80047ee <_printf_common+0x8e>
	...

0800483c <_printf_i>:
 800483c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004840:	7e0f      	ldrb	r7, [r1, #24]
 8004842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004844:	2f78      	cmp	r7, #120	; 0x78
 8004846:	4691      	mov	r9, r2
 8004848:	4680      	mov	r8, r0
 800484a:	460c      	mov	r4, r1
 800484c:	469a      	mov	sl, r3
 800484e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004852:	d807      	bhi.n	8004864 <_printf_i+0x28>
 8004854:	2f62      	cmp	r7, #98	; 0x62
 8004856:	d80a      	bhi.n	800486e <_printf_i+0x32>
 8004858:	2f00      	cmp	r7, #0
 800485a:	f000 80d4 	beq.w	8004a06 <_printf_i+0x1ca>
 800485e:	2f58      	cmp	r7, #88	; 0x58
 8004860:	f000 80c0 	beq.w	80049e4 <_printf_i+0x1a8>
 8004864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800486c:	e03a      	b.n	80048e4 <_printf_i+0xa8>
 800486e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004872:	2b15      	cmp	r3, #21
 8004874:	d8f6      	bhi.n	8004864 <_printf_i+0x28>
 8004876:	a101      	add	r1, pc, #4	; (adr r1, 800487c <_printf_i+0x40>)
 8004878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800487c:	080048d5 	.word	0x080048d5
 8004880:	080048e9 	.word	0x080048e9
 8004884:	08004865 	.word	0x08004865
 8004888:	08004865 	.word	0x08004865
 800488c:	08004865 	.word	0x08004865
 8004890:	08004865 	.word	0x08004865
 8004894:	080048e9 	.word	0x080048e9
 8004898:	08004865 	.word	0x08004865
 800489c:	08004865 	.word	0x08004865
 80048a0:	08004865 	.word	0x08004865
 80048a4:	08004865 	.word	0x08004865
 80048a8:	080049ed 	.word	0x080049ed
 80048ac:	08004915 	.word	0x08004915
 80048b0:	080049a7 	.word	0x080049a7
 80048b4:	08004865 	.word	0x08004865
 80048b8:	08004865 	.word	0x08004865
 80048bc:	08004a0f 	.word	0x08004a0f
 80048c0:	08004865 	.word	0x08004865
 80048c4:	08004915 	.word	0x08004915
 80048c8:	08004865 	.word	0x08004865
 80048cc:	08004865 	.word	0x08004865
 80048d0:	080049af 	.word	0x080049af
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	1d1a      	adds	r2, r3, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	602a      	str	r2, [r5, #0]
 80048dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048e4:	2301      	movs	r3, #1
 80048e6:	e09f      	b.n	8004a28 <_printf_i+0x1ec>
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	682b      	ldr	r3, [r5, #0]
 80048ec:	0607      	lsls	r7, r0, #24
 80048ee:	f103 0104 	add.w	r1, r3, #4
 80048f2:	6029      	str	r1, [r5, #0]
 80048f4:	d501      	bpl.n	80048fa <_printf_i+0xbe>
 80048f6:	681e      	ldr	r6, [r3, #0]
 80048f8:	e003      	b.n	8004902 <_printf_i+0xc6>
 80048fa:	0646      	lsls	r6, r0, #25
 80048fc:	d5fb      	bpl.n	80048f6 <_printf_i+0xba>
 80048fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004902:	2e00      	cmp	r6, #0
 8004904:	da03      	bge.n	800490e <_printf_i+0xd2>
 8004906:	232d      	movs	r3, #45	; 0x2d
 8004908:	4276      	negs	r6, r6
 800490a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800490e:	485a      	ldr	r0, [pc, #360]	; (8004a78 <_printf_i+0x23c>)
 8004910:	230a      	movs	r3, #10
 8004912:	e012      	b.n	800493a <_printf_i+0xfe>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	6820      	ldr	r0, [r4, #0]
 8004918:	1d19      	adds	r1, r3, #4
 800491a:	6029      	str	r1, [r5, #0]
 800491c:	0605      	lsls	r5, r0, #24
 800491e:	d501      	bpl.n	8004924 <_printf_i+0xe8>
 8004920:	681e      	ldr	r6, [r3, #0]
 8004922:	e002      	b.n	800492a <_printf_i+0xee>
 8004924:	0641      	lsls	r1, r0, #25
 8004926:	d5fb      	bpl.n	8004920 <_printf_i+0xe4>
 8004928:	881e      	ldrh	r6, [r3, #0]
 800492a:	4853      	ldr	r0, [pc, #332]	; (8004a78 <_printf_i+0x23c>)
 800492c:	2f6f      	cmp	r7, #111	; 0x6f
 800492e:	bf0c      	ite	eq
 8004930:	2308      	moveq	r3, #8
 8004932:	230a      	movne	r3, #10
 8004934:	2100      	movs	r1, #0
 8004936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800493a:	6865      	ldr	r5, [r4, #4]
 800493c:	60a5      	str	r5, [r4, #8]
 800493e:	2d00      	cmp	r5, #0
 8004940:	bfa2      	ittt	ge
 8004942:	6821      	ldrge	r1, [r4, #0]
 8004944:	f021 0104 	bicge.w	r1, r1, #4
 8004948:	6021      	strge	r1, [r4, #0]
 800494a:	b90e      	cbnz	r6, 8004950 <_printf_i+0x114>
 800494c:	2d00      	cmp	r5, #0
 800494e:	d04b      	beq.n	80049e8 <_printf_i+0x1ac>
 8004950:	4615      	mov	r5, r2
 8004952:	fbb6 f1f3 	udiv	r1, r6, r3
 8004956:	fb03 6711 	mls	r7, r3, r1, r6
 800495a:	5dc7      	ldrb	r7, [r0, r7]
 800495c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004960:	4637      	mov	r7, r6
 8004962:	42bb      	cmp	r3, r7
 8004964:	460e      	mov	r6, r1
 8004966:	d9f4      	bls.n	8004952 <_printf_i+0x116>
 8004968:	2b08      	cmp	r3, #8
 800496a:	d10b      	bne.n	8004984 <_printf_i+0x148>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	07de      	lsls	r6, r3, #31
 8004970:	d508      	bpl.n	8004984 <_printf_i+0x148>
 8004972:	6923      	ldr	r3, [r4, #16]
 8004974:	6861      	ldr	r1, [r4, #4]
 8004976:	4299      	cmp	r1, r3
 8004978:	bfde      	ittt	le
 800497a:	2330      	movle	r3, #48	; 0x30
 800497c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004980:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004984:	1b52      	subs	r2, r2, r5
 8004986:	6122      	str	r2, [r4, #16]
 8004988:	f8cd a000 	str.w	sl, [sp]
 800498c:	464b      	mov	r3, r9
 800498e:	aa03      	add	r2, sp, #12
 8004990:	4621      	mov	r1, r4
 8004992:	4640      	mov	r0, r8
 8004994:	f7ff fee4 	bl	8004760 <_printf_common>
 8004998:	3001      	adds	r0, #1
 800499a:	d14a      	bne.n	8004a32 <_printf_i+0x1f6>
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	b004      	add	sp, #16
 80049a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	f043 0320 	orr.w	r3, r3, #32
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	4833      	ldr	r0, [pc, #204]	; (8004a7c <_printf_i+0x240>)
 80049b0:	2778      	movs	r7, #120	; 0x78
 80049b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	6829      	ldr	r1, [r5, #0]
 80049ba:	061f      	lsls	r7, r3, #24
 80049bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80049c0:	d402      	bmi.n	80049c8 <_printf_i+0x18c>
 80049c2:	065f      	lsls	r7, r3, #25
 80049c4:	bf48      	it	mi
 80049c6:	b2b6      	uxthmi	r6, r6
 80049c8:	07df      	lsls	r7, r3, #31
 80049ca:	bf48      	it	mi
 80049cc:	f043 0320 	orrmi.w	r3, r3, #32
 80049d0:	6029      	str	r1, [r5, #0]
 80049d2:	bf48      	it	mi
 80049d4:	6023      	strmi	r3, [r4, #0]
 80049d6:	b91e      	cbnz	r6, 80049e0 <_printf_i+0x1a4>
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	f023 0320 	bic.w	r3, r3, #32
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	2310      	movs	r3, #16
 80049e2:	e7a7      	b.n	8004934 <_printf_i+0xf8>
 80049e4:	4824      	ldr	r0, [pc, #144]	; (8004a78 <_printf_i+0x23c>)
 80049e6:	e7e4      	b.n	80049b2 <_printf_i+0x176>
 80049e8:	4615      	mov	r5, r2
 80049ea:	e7bd      	b.n	8004968 <_printf_i+0x12c>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	6826      	ldr	r6, [r4, #0]
 80049f0:	6961      	ldr	r1, [r4, #20]
 80049f2:	1d18      	adds	r0, r3, #4
 80049f4:	6028      	str	r0, [r5, #0]
 80049f6:	0635      	lsls	r5, r6, #24
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	d501      	bpl.n	8004a00 <_printf_i+0x1c4>
 80049fc:	6019      	str	r1, [r3, #0]
 80049fe:	e002      	b.n	8004a06 <_printf_i+0x1ca>
 8004a00:	0670      	lsls	r0, r6, #25
 8004a02:	d5fb      	bpl.n	80049fc <_printf_i+0x1c0>
 8004a04:	8019      	strh	r1, [r3, #0]
 8004a06:	2300      	movs	r3, #0
 8004a08:	6123      	str	r3, [r4, #16]
 8004a0a:	4615      	mov	r5, r2
 8004a0c:	e7bc      	b.n	8004988 <_printf_i+0x14c>
 8004a0e:	682b      	ldr	r3, [r5, #0]
 8004a10:	1d1a      	adds	r2, r3, #4
 8004a12:	602a      	str	r2, [r5, #0]
 8004a14:	681d      	ldr	r5, [r3, #0]
 8004a16:	6862      	ldr	r2, [r4, #4]
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f7fb fbe8 	bl	80001f0 <memchr>
 8004a20:	b108      	cbz	r0, 8004a26 <_printf_i+0x1ea>
 8004a22:	1b40      	subs	r0, r0, r5
 8004a24:	6060      	str	r0, [r4, #4]
 8004a26:	6863      	ldr	r3, [r4, #4]
 8004a28:	6123      	str	r3, [r4, #16]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a30:	e7aa      	b.n	8004988 <_printf_i+0x14c>
 8004a32:	6923      	ldr	r3, [r4, #16]
 8004a34:	462a      	mov	r2, r5
 8004a36:	4649      	mov	r1, r9
 8004a38:	4640      	mov	r0, r8
 8004a3a:	47d0      	blx	sl
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d0ad      	beq.n	800499c <_printf_i+0x160>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	079b      	lsls	r3, r3, #30
 8004a44:	d413      	bmi.n	8004a6e <_printf_i+0x232>
 8004a46:	68e0      	ldr	r0, [r4, #12]
 8004a48:	9b03      	ldr	r3, [sp, #12]
 8004a4a:	4298      	cmp	r0, r3
 8004a4c:	bfb8      	it	lt
 8004a4e:	4618      	movlt	r0, r3
 8004a50:	e7a6      	b.n	80049a0 <_printf_i+0x164>
 8004a52:	2301      	movs	r3, #1
 8004a54:	4632      	mov	r2, r6
 8004a56:	4649      	mov	r1, r9
 8004a58:	4640      	mov	r0, r8
 8004a5a:	47d0      	blx	sl
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	d09d      	beq.n	800499c <_printf_i+0x160>
 8004a60:	3501      	adds	r5, #1
 8004a62:	68e3      	ldr	r3, [r4, #12]
 8004a64:	9903      	ldr	r1, [sp, #12]
 8004a66:	1a5b      	subs	r3, r3, r1
 8004a68:	42ab      	cmp	r3, r5
 8004a6a:	dcf2      	bgt.n	8004a52 <_printf_i+0x216>
 8004a6c:	e7eb      	b.n	8004a46 <_printf_i+0x20a>
 8004a6e:	2500      	movs	r5, #0
 8004a70:	f104 0619 	add.w	r6, r4, #25
 8004a74:	e7f5      	b.n	8004a62 <_printf_i+0x226>
 8004a76:	bf00      	nop
 8004a78:	08004bb5 	.word	0x08004bb5
 8004a7c:	08004bc6 	.word	0x08004bc6

08004a80 <memmove>:
 8004a80:	4288      	cmp	r0, r1
 8004a82:	b510      	push	{r4, lr}
 8004a84:	eb01 0402 	add.w	r4, r1, r2
 8004a88:	d902      	bls.n	8004a90 <memmove+0x10>
 8004a8a:	4284      	cmp	r4, r0
 8004a8c:	4623      	mov	r3, r4
 8004a8e:	d807      	bhi.n	8004aa0 <memmove+0x20>
 8004a90:	1e43      	subs	r3, r0, #1
 8004a92:	42a1      	cmp	r1, r4
 8004a94:	d008      	beq.n	8004aa8 <memmove+0x28>
 8004a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a9e:	e7f8      	b.n	8004a92 <memmove+0x12>
 8004aa0:	4402      	add	r2, r0
 8004aa2:	4601      	mov	r1, r0
 8004aa4:	428a      	cmp	r2, r1
 8004aa6:	d100      	bne.n	8004aaa <memmove+0x2a>
 8004aa8:	bd10      	pop	{r4, pc}
 8004aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ab2:	e7f7      	b.n	8004aa4 <memmove+0x24>

08004ab4 <_sbrk_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4d06      	ldr	r5, [pc, #24]	; (8004ad0 <_sbrk_r+0x1c>)
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4604      	mov	r4, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	602b      	str	r3, [r5, #0]
 8004ac0:	f7fc f9e0 	bl	8000e84 <_sbrk>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_sbrk_r+0x1a>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_sbrk_r+0x1a>
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	200009a4 	.word	0x200009a4

08004ad4 <memcpy>:
 8004ad4:	440a      	add	r2, r1
 8004ad6:	4291      	cmp	r1, r2
 8004ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004adc:	d100      	bne.n	8004ae0 <memcpy+0xc>
 8004ade:	4770      	bx	lr
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aea:	4291      	cmp	r1, r2
 8004aec:	d1f9      	bne.n	8004ae2 <memcpy+0xe>
 8004aee:	bd10      	pop	{r4, pc}

08004af0 <_realloc_r>:
 8004af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af4:	4680      	mov	r8, r0
 8004af6:	4614      	mov	r4, r2
 8004af8:	460e      	mov	r6, r1
 8004afa:	b921      	cbnz	r1, 8004b06 <_realloc_r+0x16>
 8004afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b00:	4611      	mov	r1, r2
 8004b02:	f7ff bc49 	b.w	8004398 <_malloc_r>
 8004b06:	b92a      	cbnz	r2, 8004b14 <_realloc_r+0x24>
 8004b08:	f7ff fbda 	bl	80042c0 <_free_r>
 8004b0c:	4625      	mov	r5, r4
 8004b0e:	4628      	mov	r0, r5
 8004b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b14:	f000 f81b 	bl	8004b4e <_malloc_usable_size_r>
 8004b18:	4284      	cmp	r4, r0
 8004b1a:	4607      	mov	r7, r0
 8004b1c:	d802      	bhi.n	8004b24 <_realloc_r+0x34>
 8004b1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b22:	d812      	bhi.n	8004b4a <_realloc_r+0x5a>
 8004b24:	4621      	mov	r1, r4
 8004b26:	4640      	mov	r0, r8
 8004b28:	f7ff fc36 	bl	8004398 <_malloc_r>
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d0ed      	beq.n	8004b0e <_realloc_r+0x1e>
 8004b32:	42bc      	cmp	r4, r7
 8004b34:	4622      	mov	r2, r4
 8004b36:	4631      	mov	r1, r6
 8004b38:	bf28      	it	cs
 8004b3a:	463a      	movcs	r2, r7
 8004b3c:	f7ff ffca 	bl	8004ad4 <memcpy>
 8004b40:	4631      	mov	r1, r6
 8004b42:	4640      	mov	r0, r8
 8004b44:	f7ff fbbc 	bl	80042c0 <_free_r>
 8004b48:	e7e1      	b.n	8004b0e <_realloc_r+0x1e>
 8004b4a:	4635      	mov	r5, r6
 8004b4c:	e7df      	b.n	8004b0e <_realloc_r+0x1e>

08004b4e <_malloc_usable_size_r>:
 8004b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b52:	1f18      	subs	r0, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bfbc      	itt	lt
 8004b58:	580b      	ldrlt	r3, [r1, r0]
 8004b5a:	18c0      	addlt	r0, r0, r3
 8004b5c:	4770      	bx	lr
	...

08004b60 <_init>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr

08004b6c <_fini>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr
