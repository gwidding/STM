
stm32_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007624  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080077d4  080077d4  000177d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078bc  080078bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078c4  080078c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078c4  080078c4  000178c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080078cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000a64  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ad4  20000ad4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000177a0  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000314e  00000000  00000000  00037883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001368  00000000  00000000  0003a9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f1e  00000000  00000000  0003bd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000281ab  00000000  00000000  0003cc5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000189be  00000000  00000000  00064e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f18f0  00000000  00000000  0007d7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005c90  00000000  00000000  0016f0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00174d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080077bc 	.word	0x080077bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080077bc 	.word	0x080077bc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f005 f8e0 	bl	8005794 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f003 f8cd 	bl	8003788 <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f006 f86b 	bl	80066e0 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f005 f8b9 	bl	8005794 <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f005 f8b1 	bl	8005794 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f005 f8a1 	bl	8005794 <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	080077e4 	.word	0x080077e4
 8000660:	200003d0 	.word	0x200003d0
 8000664:	2000035c 	.word	0x2000035c
 8000668:	080077d4 	.word	0x080077d4
 800066c:	080077dc 	.word	0x080077dc
 8000670:	080077e0 	.word	0x080077e0

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f003 f879 	bl	8003788 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f002 ff42 	bl	800358c <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 f843 	bl	8001798 <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000035c 	.word	0x2000035c

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <_write>:
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_I2C1_Init(void);
static void MX_RTC_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ec:	68b9      	ldr	r1, [r7, #8]
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <_write+0x28>)
 80007f0:	f004 ffd0 	bl	8005794 <HAL_UART_Transmit>
	return len;
 80007f4:	687b      	ldr	r3, [r7, #4]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200003d0 	.word	0x200003d0

08000804 <get_time>:

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

void get_time(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BIN);
 800080a:	2200      	movs	r2, #0
 800080c:	4918      	ldr	r1, [pc, #96]	; (8000870 <get_time+0x6c>)
 800080e:	4819      	ldr	r0, [pc, #100]	; (8000874 <get_time+0x70>)
 8000810:	f004 fbf2 	bl	8004ff8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BIN);
 8000814:	2200      	movs	r2, #0
 8000816:	4918      	ldr	r1, [pc, #96]	; (8000878 <get_time+0x74>)
 8000818:	4816      	ldr	r0, [pc, #88]	; (8000874 <get_time+0x70>)
 800081a:	f004 fccf 	bl	80051bc <HAL_RTC_GetDate>

	sprintf((char*)showTime, "%s %02d : %02d : %02d      ", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <get_time+0x6c>)
 8000820:	78db      	ldrb	r3, [r3, #3]
 8000822:	461a      	mov	r2, r3
 8000824:	4613      	mov	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4413      	add	r3, r2
 800082a:	4a14      	ldr	r2, [pc, #80]	; (800087c <get_time+0x78>)
 800082c:	441a      	add	r2, r3
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <get_time+0x6c>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <get_time+0x6c>)
 8000836:	785b      	ldrb	r3, [r3, #1]
 8000838:	4619      	mov	r1, r3
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <get_time+0x6c>)
 800083c:	789b      	ldrb	r3, [r3, #2]
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	9100      	str	r1, [sp, #0]
 8000842:	4603      	mov	r3, r0
 8000844:	490e      	ldr	r1, [pc, #56]	; (8000880 <get_time+0x7c>)
 8000846:	480f      	ldr	r0, [pc, #60]	; (8000884 <get_time+0x80>)
 8000848:	f005 ff7e 	bl	8006748 <siprintf>
	sprintf((char *)showDate, "%04d-%02d-%02d         ", 2000 + sDate.Year, sDate.Month, sDate.Date);
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <get_time+0x74>)
 800084e:	78db      	ldrb	r3, [r3, #3]
 8000850:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <get_time+0x74>)
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	4619      	mov	r1, r3
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <get_time+0x74>)
 800085c:	789b      	ldrb	r3, [r3, #2]
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	460b      	mov	r3, r1
 8000862:	4909      	ldr	r1, [pc, #36]	; (8000888 <get_time+0x84>)
 8000864:	4809      	ldr	r0, [pc, #36]	; (800088c <get_time+0x88>)
 8000866:	f005 ff6f 	bl	8006748 <siprintf>
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000960 	.word	0x20000960
 8000874:	200003b0 	.word	0x200003b0
 8000878:	20000974 	.word	0x20000974
 800087c:	20000000 	.word	0x20000000
 8000880:	0800781c 	.word	0x0800781c
 8000884:	20000920 	.word	0x20000920
 8000888:	08007838 	.word	0x08007838
 800088c:	20000940 	.word	0x20000940

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b094      	sub	sp, #80	; 0x50
 8000894:	af00      	add	r7, sp, #0
int main(void)
 8000896:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800089a:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089c:	f000 ff0a 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a0:	f000 f85e 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a4:	f000 fac0 	bl	8000e28 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a8:	f000 fa9e 	bl	8000de8 <MX_DMA_Init>
  MX_ETH_Init();
 80008ac:	f000 f924 	bl	8000af8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008b0:	f000 fa42 	bl	8000d38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008b4:	f000 fa6a 	bl	8000d8c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80008b8:	f000 f96c 	bl	8000b94 <MX_I2C1_Init>
  MX_RTC_Init();
 80008bc:	f000 f9aa 	bl	8000c14 <MX_RTC_Init>
  MX_ADC1_Init();
 80008c0:	f000 f8ba 	bl	8000a38 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	I2C_Scan();
 80008c4:	f7ff fe6a 	bl	800059c <I2C_Scan>
	LCD_Init(LCD_ADDR);
 80008c8:	204e      	movs	r0, #78	; 0x4e
 80008ca:	f7ff ff4d 	bl	8000768 <LCD_Init>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
		}
	}
	uint32_t XY[2];

	HAL_ADC_Start_DMA(&hadc1, XY, 2);
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2202      	movs	r2, #2
 80008d2:	4619      	mov	r1, r3
 80008d4:	481c      	ldr	r0, [pc, #112]	; (8000948 <main+0xb8>)
 80008d6:	f000 ffc7 	bl	8001868 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  get_time();
 80008da:	f7ff ff93 	bl	8000804 <get_time>
	  HAL_UART_Transmit(&huart3, (uint8_t *)&showTime, strlen(showTime), 1000);
 80008de:	481b      	ldr	r0, [pc, #108]	; (800094c <main+0xbc>)
 80008e0:	f7ff fc86 	bl	80001f0 <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ec:	4917      	ldr	r1, [pc, #92]	; (800094c <main+0xbc>)
 80008ee:	4818      	ldr	r0, [pc, #96]	; (8000950 <main+0xc0>)
 80008f0:	f004 ff50 	bl	8005794 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t *)&showDate, strlen(showDate), 1000);
 80008f4:	4817      	ldr	r0, [pc, #92]	; (8000954 <main+0xc4>)
 80008f6:	f7ff fc7b 	bl	80001f0 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000902:	4914      	ldr	r1, [pc, #80]	; (8000954 <main+0xc4>)
 8000904:	4812      	ldr	r0, [pc, #72]	; (8000950 <main+0xc0>)
 8000906:	f004 ff45 	bl	8005794 <HAL_UART_Transmit>
	  printf("\r\n");
 800090a:	4813      	ldr	r0, [pc, #76]	; (8000958 <main+0xc8>)
 800090c:	f005 fee0 	bl	80066d0 <puts>



	  printf("%d %d\r\n",XY[0], XY[1]);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	4619      	mov	r1, r3
 8000916:	4811      	ldr	r0, [pc, #68]	; (800095c <main+0xcc>)
 8000918:	f005 fe74 	bl	8006604 <iprintf>

	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	204e      	movs	r0, #78	; 0x4e
 8000920:	f7ff fefe 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showDate);
 8000924:	490b      	ldr	r1, [pc, #44]	; (8000954 <main+0xc4>)
 8000926:	204e      	movs	r0, #78	; 0x4e
 8000928:	f7ff ff3b 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 800092c:	21c0      	movs	r1, #192	; 0xc0
 800092e:	204e      	movs	r0, #78	; 0x4e
 8000930:	f7ff fef6 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 8000934:	4905      	ldr	r1, [pc, #20]	; (800094c <main+0xbc>)
 8000936:	204e      	movs	r0, #78	; 0x4e
 8000938:	f7ff ff33 	bl	80007a2 <LCD_SendString>
	  HAL_Delay(600);
 800093c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000940:	f000 ff2a 	bl	8001798 <HAL_Delay>
	  get_time();
 8000944:	e7c9      	b.n	80008da <main+0x4a>
 8000946:	bf00      	nop
 8000948:	20000204 	.word	0x20000204
 800094c:	20000920 	.word	0x20000920
 8000950:	200003d0 	.word	0x200003d0
 8000954:	20000940 	.word	0x20000940
 8000958:	08007850 	.word	0x08007850
 800095c:	08007854 	.word	0x08007854

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	; 0x50
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	2230      	movs	r2, #48	; 0x30
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f005 ffe2 	bl	8006938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <SystemClock_Config+0xd0>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a28      	ldr	r2, [pc, #160]	; (8000a30 <SystemClock_Config+0xd0>)
 800098e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <SystemClock_Config+0xd0>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <SystemClock_Config+0xd4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <SystemClock_Config+0xd4>)
 80009aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <SystemClock_Config+0xd4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80009bc:	2305      	movs	r3, #5
 80009be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009c6:	2301      	movs	r3, #1
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	2302      	movs	r3, #2
 80009cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d4:	2304      	movs	r3, #4
 80009d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009d8:	23a8      	movs	r3, #168	; 0xa8
 80009da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009dc:	2302      	movs	r3, #2
 80009de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009e0:	2307      	movs	r3, #7
 80009e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e4:	f107 0320 	add.w	r3, r7, #32
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 fb9d 	bl	8004128 <HAL_RCC_OscConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009f4:	f000 fad4 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f8:	230f      	movs	r3, #15
 80009fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fc:	2302      	movs	r3, #2
 80009fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2105      	movs	r1, #5
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 fdfe 	bl	8004618 <HAL_RCC_ClockConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a22:	f000 fabd 	bl	8000fa0 <Error_Handler>
  }
}
 8000a26:	bf00      	nop
 8000a28:	3750      	adds	r7, #80	; 0x50
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40007000 	.word	0x40007000

08000a38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a4a:	4b28      	ldr	r3, [pc, #160]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000a4c:	4a28      	ldr	r2, [pc, #160]	; (8000af0 <MX_ADC1_Init+0xb8>)
 8000a4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000a52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a5e:	4b23      	ldr	r3, [pc, #140]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a72:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000a7a:	4a1e      	ldr	r2, [pc, #120]	; (8000af4 <MX_ADC1_Init+0xbc>)
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000a86:	2202      	movs	r2, #2
 8000a88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a98:	4814      	ldr	r0, [pc, #80]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000a9a:	f000 fea1 	bl	80017e0 <HAL_ADC_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000aa4:	f000 fa7c 	bl	8000fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000aa8:	230d      	movs	r3, #13
 8000aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000aac:	2301      	movs	r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000aba:	f001 f803 	bl	8001ac4 <HAL_ADC_ConfigChannel>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ac4:	f000 fa6c 	bl	8000fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ac8:	230a      	movs	r3, #10
 8000aca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_ADC1_Init+0xb4>)
 8000ad6:	f000 fff5 	bl	8001ac4 <HAL_ADC_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ae0:	f000 fa5e 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000204 	.word	0x20000204
 8000af0:	40012000 	.word	0x40012000
 8000af4:	0f000001 	.word	0x0f000001

08000af8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_ETH_Init+0x84>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <MX_ETH_Init+0x88>)
 8000b00:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <MX_ETH_Init+0x8c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_ETH_Init+0x8c>)
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <MX_ETH_Init+0x8c>)
 8000b10:	22e1      	movs	r2, #225	; 0xe1
 8000b12:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_ETH_Init+0x8c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_ETH_Init+0x8c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_ETH_Init+0x8c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MX_ETH_Init+0x84>)
 8000b28:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <MX_ETH_Init+0x8c>)
 8000b2a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_ETH_Init+0x84>)
 8000b2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b32:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_ETH_Init+0x84>)
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <MX_ETH_Init+0x90>)
 8000b38:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MX_ETH_Init+0x84>)
 8000b3c:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <MX_ETH_Init+0x94>)
 8000b3e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_ETH_Init+0x84>)
 8000b42:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b46:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <MX_ETH_Init+0x84>)
 8000b4a:	f001 feed 	bl	8002928 <HAL_ETH_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b54:	f000 fa24 	bl	8000fa0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b58:	2238      	movs	r2, #56	; 0x38
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_ETH_Init+0x98>)
 8000b5e:	f005 feeb 	bl	8006938 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_ETH_Init+0x98>)
 8000b64:	2221      	movs	r2, #33	; 0x21
 8000b66:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_ETH_Init+0x98>)
 8000b6a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000b6e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <MX_ETH_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200002ac 	.word	0x200002ac
 8000b80:	40028000 	.word	0x40028000
 8000b84:	20000978 	.word	0x20000978
 8000b88:	20000164 	.word	0x20000164
 8000b8c:	200000c4 	.word	0x200000c4
 8000b90:	2000008c 	.word	0x2000008c

08000b94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <MX_I2C1_Init+0x7c>)
 8000ba2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bd2:	f002 fb97 	bl	8003304 <HAL_I2C_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bdc:	f000 f9e0 	bl	8000fa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	4809      	ldr	r0, [pc, #36]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000be4:	f003 f907 	bl	8003df6 <HAL_I2CEx_ConfigAnalogFilter>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000bee:	f000 f9d7 	bl	8000fa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bf6:	f003 f93a 	bl	8003e6e <HAL_I2CEx_ConfigDigitalFilter>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c00:	f000 f9ce 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000035c 	.word	0x2000035c
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	000186a0 	.word	0x000186a0

08000c14 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b090      	sub	sp, #64	; 0x40
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000c2e:	463b      	mov	r3, r7
 8000c30:	2228      	movs	r2, #40	; 0x28
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f005 fe7f 	bl	8006938 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c3a:	4b3d      	ldr	r3, [pc, #244]	; (8000d30 <MX_RTC_Init+0x11c>)
 8000c3c:	4a3d      	ldr	r2, [pc, #244]	; (8000d34 <MX_RTC_Init+0x120>)
 8000c3e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000c40:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <MX_RTC_Init+0x11c>)
 8000c42:	2240      	movs	r2, #64	; 0x40
 8000c44:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c46:	4b3a      	ldr	r3, [pc, #232]	; (8000d30 <MX_RTC_Init+0x11c>)
 8000c48:	227f      	movs	r2, #127	; 0x7f
 8000c4a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c4c:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <MX_RTC_Init+0x11c>)
 8000c4e:	22ff      	movs	r2, #255	; 0xff
 8000c50:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c52:	4b37      	ldr	r3, [pc, #220]	; (8000d30 <MX_RTC_Init+0x11c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c58:	4b35      	ldr	r3, [pc, #212]	; (8000d30 <MX_RTC_Init+0x11c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c5e:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <MX_RTC_Init+0x11c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c64:	4832      	ldr	r0, [pc, #200]	; (8000d30 <MX_RTC_Init+0x11c>)
 8000c66:	f004 f8b7 	bl	8004dd8 <HAL_RTC_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000c70:	f000 f996 	bl	8000fa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4824      	ldr	r0, [pc, #144]	; (8000d30 <MX_RTC_Init+0x11c>)
 8000c9e:	f004 f911 	bl	8004ec4 <HAL_RTC_SetTime>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000ca8:	f000 f97a 	bl	8000fa0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cac:	2301      	movs	r3, #1
 8000cae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 8000cb2:	2311      	movs	r3, #17
 8000cb4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x6;
 8000cb8:	2306      	movs	r3, #6
 8000cba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x23;
 8000cbe:	2323      	movs	r3, #35	; 0x23
 8000cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4818      	ldr	r0, [pc, #96]	; (8000d30 <MX_RTC_Init+0x11c>)
 8000cce:	f004 f9f1 	bl	80050b4 <HAL_RTC_SetDate>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000cd8:	f000 f962 	bl	8000fa0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000ce4:	2330      	movs	r3, #48	; 0x30
 8000ce6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000cec:	2300      	movs	r3, #0
 8000cee:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000cf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000cfc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d12:	463b      	mov	r3, r7
 8000d14:	2201      	movs	r2, #1
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_RTC_Init+0x11c>)
 8000d1a:	f004 fa9f 	bl	800525c <HAL_RTC_SetAlarm_IT>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8000d24:	f000 f93c 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
//  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD);
  /* USER CODE END RTC_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	3740      	adds	r7, #64	; 0x40
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200003b0 	.word	0x200003b0
 8000d34:	40002800 	.word	0x40002800

08000d38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USART3_UART_Init+0x4c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <MX_USART3_UART_Init+0x50>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_USART3_UART_Init+0x4c>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USART3_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_USART3_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USART3_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USART3_UART_Init+0x4c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USART3_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_USART3_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USART3_UART_Init+0x4c>)
 8000d70:	f004 fcc3 	bl	80056fa <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d7a:	f000 f911 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200003d0 	.word	0x200003d0
 8000d88:	40004800 	.word	0x40004800

08000d8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da0:	2202      	movs	r2, #2
 8000da2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dac:	2202      	movs	r2, #2
 8000dae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd0:	f003 f88c 	bl	8003eec <HAL_PCD_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dda:	f000 f8e1 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000414 	.word	0x20000414

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_DMA_Init+0x3c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <MX_DMA_Init+0x3c>)
 8000df8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_DMA_Init+0x3c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2038      	movs	r0, #56	; 0x38
 8000e10:	f001 f9e3 	bl	80021da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e14:	2038      	movs	r0, #56	; 0x38
 8000e16:	f001 f9fc 	bl	8002212 <HAL_NVIC_EnableIRQ>

}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800

08000e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	4b4c      	ldr	r3, [pc, #304]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a4b      	ldr	r2, [pc, #300]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	61bb      	str	r3, [r7, #24]
 8000e58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	4b45      	ldr	r3, [pc, #276]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a44      	ldr	r2, [pc, #272]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b42      	ldr	r3, [pc, #264]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b3e      	ldr	r3, [pc, #248]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a3d      	ldr	r2, [pc, #244]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a36      	ldr	r2, [pc, #216]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a2f      	ldr	r2, [pc, #188]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a28      	ldr	r2, [pc, #160]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MX_GPIO_Init+0x14c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000eec:	4822      	ldr	r0, [pc, #136]	; (8000f78 <MX_GPIO_Init+0x150>)
 8000eee:	f002 f9ef 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2140      	movs	r1, #64	; 0x40
 8000ef6:	4821      	ldr	r0, [pc, #132]	; (8000f7c <MX_GPIO_Init+0x154>)
 8000ef8:	f002 f9ea 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	481b      	ldr	r0, [pc, #108]	; (8000f80 <MX_GPIO_Init+0x158>)
 8000f14:	f002 f830 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f18:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4811      	ldr	r0, [pc, #68]	; (8000f78 <MX_GPIO_Init+0x150>)
 8000f32:	f002 f821 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f36:	2340      	movs	r3, #64	; 0x40
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480b      	ldr	r0, [pc, #44]	; (8000f7c <MX_GPIO_Init+0x154>)
 8000f4e:	f002 f813 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_GPIO_Init+0x154>)
 8000f66:	f002 f807 	bl	8002f78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f6a:	bf00      	nop
 8000f6c:	3730      	adds	r7, #48	; 0x30
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	40021800 	.word	0x40021800
 8000f80:	40020800 	.word	0x40020800

08000f84 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  printf("alarm~! \r\n");
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <HAL_RTC_AlarmAEventCallback+0x18>)
 8000f8e:	f005 fb9f 	bl	80066d0 <puts>

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	0800785c 	.word	0x0800785c

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <Error_Handler+0x8>
	...

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800

08000ffc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a2f      	ldr	r2, [pc, #188]	; (80010d8 <HAL_ADC_MspInit+0xdc>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d157      	bne.n	80010ce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <HAL_ADC_MspInit+0xe0>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a2d      	ldr	r2, [pc, #180]	; (80010dc <HAL_ADC_MspInit+0xe0>)
 8001028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <HAL_ADC_MspInit+0xe0>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <HAL_ADC_MspInit+0xe0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_ADC_MspInit+0xe0>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_ADC_MspInit+0xe0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001056:	2309      	movs	r3, #9
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105a:	2303      	movs	r3, #3
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	481d      	ldr	r0, [pc, #116]	; (80010e0 <HAL_ADC_MspInit+0xe4>)
 800106a:	f001 ff85 	bl	8002f78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_ADC_MspInit+0xe8>)
 8001070:	4a1d      	ldr	r2, [pc, #116]	; (80010e8 <HAL_ADC_MspInit+0xec>)
 8001072:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_ADC_MspInit+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_ADC_MspInit+0xe8>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_ADC_MspInit+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_ADC_MspInit+0xe8>)
 8001088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800108c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_ADC_MspInit+0xe8>)
 8001090:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001094:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_ADC_MspInit+0xe8>)
 8001098:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800109c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_ADC_MspInit+0xe8>)
 80010a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_ADC_MspInit+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_ADC_MspInit+0xe8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010b2:	480c      	ldr	r0, [pc, #48]	; (80010e4 <HAL_ADC_MspInit+0xe8>)
 80010b4:	f001 f8c8 	bl	8002248 <HAL_DMA_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010be:	f7ff ff6f 	bl	8000fa0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_ADC_MspInit+0xe8>)
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_ADC_MspInit+0xe8>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40012000 	.word	0x40012000
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020800 	.word	0x40020800
 80010e4:	2000024c 	.word	0x2000024c
 80010e8:	40026410 	.word	0x40026410

080010ec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	; 0x38
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a55      	ldr	r2, [pc, #340]	; (8001260 <HAL_ETH_MspInit+0x174>)
 800110a:	4293      	cmp	r3, r2
 800110c:	f040 80a4 	bne.w	8001258 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <HAL_ETH_MspInit+0x178>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4a52      	ldr	r2, [pc, #328]	; (8001264 <HAL_ETH_MspInit+0x178>)
 800111a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
 8001120:	4b50      	ldr	r3, [pc, #320]	; (8001264 <HAL_ETH_MspInit+0x178>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001128:	623b      	str	r3, [r7, #32]
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <HAL_ETH_MspInit+0x178>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a4b      	ldr	r2, [pc, #300]	; (8001264 <HAL_ETH_MspInit+0x178>)
 8001136:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b49      	ldr	r3, [pc, #292]	; (8001264 <HAL_ETH_MspInit+0x178>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	4b45      	ldr	r3, [pc, #276]	; (8001264 <HAL_ETH_MspInit+0x178>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	4a44      	ldr	r2, [pc, #272]	; (8001264 <HAL_ETH_MspInit+0x178>)
 8001152:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001156:	6313      	str	r3, [r2, #48]	; 0x30
 8001158:	4b42      	ldr	r3, [pc, #264]	; (8001264 <HAL_ETH_MspInit+0x178>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	4b3e      	ldr	r3, [pc, #248]	; (8001264 <HAL_ETH_MspInit+0x178>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4a3d      	ldr	r2, [pc, #244]	; (8001264 <HAL_ETH_MspInit+0x178>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6313      	str	r3, [r2, #48]	; 0x30
 8001174:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <HAL_ETH_MspInit+0x178>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <HAL_ETH_MspInit+0x178>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a36      	ldr	r2, [pc, #216]	; (8001264 <HAL_ETH_MspInit+0x178>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	4b34      	ldr	r3, [pc, #208]	; (8001264 <HAL_ETH_MspInit+0x178>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <HAL_ETH_MspInit+0x178>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	4a2f      	ldr	r2, [pc, #188]	; (8001264 <HAL_ETH_MspInit+0x178>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	6313      	str	r3, [r2, #48]	; 0x30
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_ETH_MspInit+0x178>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <HAL_ETH_MspInit+0x178>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a28      	ldr	r2, [pc, #160]	; (8001264 <HAL_ETH_MspInit+0x178>)
 80011c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_ETH_MspInit+0x178>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011d4:	2332      	movs	r3, #50	; 0x32
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011e4:	230b      	movs	r3, #11
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	481e      	ldr	r0, [pc, #120]	; (8001268 <HAL_ETH_MspInit+0x17c>)
 80011f0:	f001 fec2 	bl	8002f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011f4:	2386      	movs	r3, #134	; 0x86
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001204:	230b      	movs	r3, #11
 8001206:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	4817      	ldr	r0, [pc, #92]	; (800126c <HAL_ETH_MspInit+0x180>)
 8001210:	f001 feb2 	bl	8002f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001226:	230b      	movs	r3, #11
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	480f      	ldr	r0, [pc, #60]	; (8001270 <HAL_ETH_MspInit+0x184>)
 8001232:	f001 fea1 	bl	8002f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001236:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001248:	230b      	movs	r3, #11
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <HAL_ETH_MspInit+0x188>)
 8001254:	f001 fe90 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3738      	adds	r7, #56	; 0x38
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40028000 	.word	0x40028000
 8001264:	40023800 	.word	0x40023800
 8001268:	40020800 	.word	0x40020800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400
 8001274:	40021800 	.word	0x40021800

08001278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a19      	ldr	r2, [pc, #100]	; (80012fc <HAL_I2C_MspInit+0x84>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d12c      	bne.n	80012f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <HAL_I2C_MspInit+0x88>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_I2C_MspInit+0x88>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012bc:	2312      	movs	r3, #18
 80012be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012c8:	2304      	movs	r3, #4
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	480c      	ldr	r0, [pc, #48]	; (8001304 <HAL_I2C_MspInit+0x8c>)
 80012d4:	f001 fe50 	bl	8002f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_I2C_MspInit+0x88>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_I2C_MspInit+0x88>)
 80012e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_I2C_MspInit+0x88>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40005400 	.word	0x40005400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020400 	.word	0x40020400

08001308 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	; 0x38
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	2230      	movs	r2, #48	; 0x30
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f005 fb0d 	bl	8006938 <memset>
  if(hrtc->Instance==RTC)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <HAL_RTC_MspInit+0x5c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d119      	bne.n	800135c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001328:	2320      	movs	r3, #32
 800132a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800132c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001330:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4618      	mov	r0, r3
 8001338:	f003 fb8e 	bl	8004a58 <HAL_RCCEx_PeriphCLKConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001342:	f7ff fe2d 	bl	8000fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_RTC_MspInit+0x60>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	2029      	movs	r0, #41	; 0x29
 8001352:	f000 ff42 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001356:	2029      	movs	r0, #41	; 0x29
 8001358:	f000 ff5b 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3738      	adds	r7, #56	; 0x38
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40002800 	.word	0x40002800
 8001368:	42470e3c 	.word	0x42470e3c

0800136c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <HAL_UART_MspInit+0x84>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12c      	bne.n	80013e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_UART_MspInit+0x88>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_UART_MspInit+0x88>)
 8001398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_UART_MspInit+0x88>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_UART_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_UART_MspInit+0x88>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_UART_MspInit+0x88>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013d8:	2307      	movs	r3, #7
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_UART_MspInit+0x8c>)
 80013e4:	f001 fdc8 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40004800 	.word	0x40004800
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020c00 	.word	0x40020c00

080013fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800141c:	d13f      	bne.n	800149e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <HAL_PCD_MspInit+0xac>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a20      	ldr	r2, [pc, #128]	; (80014a8 <HAL_PCD_MspInit+0xac>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_PCD_MspInit+0xac>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800143a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800144c:	230a      	movs	r3, #10
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4815      	ldr	r0, [pc, #84]	; (80014ac <HAL_PCD_MspInit+0xb0>)
 8001458:	f001 fd8e 	bl	8002f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800145c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	480e      	ldr	r0, [pc, #56]	; (80014ac <HAL_PCD_MspInit+0xb0>)
 8001472:	f001 fd81 	bl	8002f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_PCD_MspInit+0xac>)
 8001478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_PCD_MspInit+0xac>)
 800147c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001480:	6353      	str	r3, [r2, #52]	; 0x34
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_PCD_MspInit+0xac>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_PCD_MspInit+0xac>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_PCD_MspInit+0xac>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	; 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020000 	.word	0x40020000

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f000 f92c 	bl	8001758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <RTC_Alarm_IRQHandler+0x10>)
 800150a:	f003 ffe9 	bl	80054e0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200003b0 	.word	0x200003b0

08001518 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <DMA2_Stream0_IRQHandler+0x10>)
 800151e:	f000 ff99 	bl	8002454 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000024c 	.word	0x2000024c

0800152c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	e00a      	b.n	8001554 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800153e:	f3af 8000 	nop.w
 8001542:	4601      	mov	r1, r0
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	b2ca      	uxtb	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbf0      	blt.n	800153e <_read+0x12>
  }

  return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158e:	605a      	str	r2, [r3, #4]
  return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_isatty>:

int _isatty(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d8:	4a14      	ldr	r2, [pc, #80]	; (800162c <_sbrk+0x5c>)
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <_sbrk+0x60>)
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <_sbrk+0x64>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <_sbrk+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d207      	bcs.n	8001610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001600:	f005 f9e8 	bl	80069d4 <__errno>
 8001604:	4603      	mov	r3, r0
 8001606:	220c      	movs	r2, #12
 8001608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	e009      	b.n	8001624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <_sbrk+0x64>)
 8001620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20030000 	.word	0x20030000
 8001630:	00000400 	.word	0x00000400
 8001634:	20000980 	.word	0x20000980
 8001638:	20000ad8 	.word	0x20000ad8

0800163c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001698 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001666:	490e      	ldr	r1, [pc, #56]	; (80016a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800167c:	4c0b      	ldr	r4, [pc, #44]	; (80016ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800168a:	f7ff ffd7 	bl	800163c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168e:	f005 f9a7 	bl	80069e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001692:	f7ff f8fd 	bl	8000890 <main>
  bx  lr    
 8001696:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001698:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016a4:	080078cc 	.word	0x080078cc
  ldr r2, =_sbss
 80016a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016ac:	20000ad4 	.word	0x20000ad4

080016b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC_IRQHandler>
	...

080016b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <HAL_Init+0x40>)
 80016be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_Init+0x40>)
 80016ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_Init+0x40>)
 80016d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016dc:	2003      	movs	r0, #3
 80016de:	f000 fd71 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e2:	2000      	movs	r0, #0
 80016e4:	f000 f808 	bl	80016f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e8:	f7ff fc60 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023c00 	.word	0x40023c00

080016f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x54>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_InitTick+0x58>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fd89 	bl	800222e <HAL_SYSTICK_Config>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e00e      	b.n	8001744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b0f      	cmp	r3, #15
 800172a:	d80a      	bhi.n	8001742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800172c:	2200      	movs	r2, #0
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f000 fd51 	bl	80021da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001738:	4a06      	ldr	r2, [pc, #24]	; (8001754 <HAL_InitTick+0x5c>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e000      	b.n	8001744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000008 	.word	0x20000008
 8001750:	20000010 	.word	0x20000010
 8001754:	2000000c 	.word	0x2000000c

08001758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x20>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_IncTick+0x24>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4413      	add	r3, r2
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <HAL_IncTick+0x24>)
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000010 	.word	0x20000010
 800177c:	20000984 	.word	0x20000984

08001780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return uwTick;
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_GetTick+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000984 	.word	0x20000984

08001798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff ffee 	bl	8001780 <HAL_GetTick>
 80017a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d005      	beq.n	80017be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_Delay+0x44>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017be:	bf00      	nop
 80017c0:	f7ff ffde 	bl	8001780 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d8f7      	bhi.n	80017c0 <HAL_Delay+0x28>
  {
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000010 	.word	0x20000010

080017e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e033      	b.n	800185e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fbfc 	bl	8000ffc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b00      	cmp	r3, #0
 800181c:	d118      	bne.n	8001850 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001826:	f023 0302 	bic.w	r3, r3, #2
 800182a:	f043 0202 	orr.w	r2, r3, #2
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fa78 	bl	8001d28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	f043 0201 	orr.w	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
 800184e:	e001      	b.n	8001854 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_ADC_Start_DMA+0x1e>
 8001882:	2302      	movs	r3, #2
 8001884:	e0e9      	b.n	8001a5a <HAL_ADC_Start_DMA+0x1f2>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d018      	beq.n	80018ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018ac:	4b6d      	ldr	r3, [pc, #436]	; (8001a64 <HAL_ADC_Start_DMA+0x1fc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6d      	ldr	r2, [pc, #436]	; (8001a68 <HAL_ADC_Start_DMA+0x200>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0c9a      	lsrs	r2, r3, #18
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80018c0:	e002      	b.n	80018c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f9      	bne.n	80018c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018dc:	d107      	bne.n	80018ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	f040 80a1 	bne.w	8001a40 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d007      	beq.n	8001930 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001928:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800193c:	d106      	bne.n	800194c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f023 0206 	bic.w	r2, r3, #6
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
 800194a:	e002      	b.n	8001952 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800195a:	4b44      	ldr	r3, [pc, #272]	; (8001a6c <HAL_ADC_Start_DMA+0x204>)
 800195c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001962:	4a43      	ldr	r2, [pc, #268]	; (8001a70 <HAL_ADC_Start_DMA+0x208>)
 8001964:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196a:	4a42      	ldr	r2, [pc, #264]	; (8001a74 <HAL_ADC_Start_DMA+0x20c>)
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001972:	4a41      	ldr	r2, [pc, #260]	; (8001a78 <HAL_ADC_Start_DMA+0x210>)
 8001974:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800197e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800198e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800199e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	334c      	adds	r3, #76	; 0x4c
 80019aa:	4619      	mov	r1, r3
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f000 fcf8 	bl	80023a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d12a      	bne.n	8001a16 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a2d      	ldr	r2, [pc, #180]	; (8001a7c <HAL_ADC_Start_DMA+0x214>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d015      	beq.n	80019f6 <HAL_ADC_Start_DMA+0x18e>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a2c      	ldr	r2, [pc, #176]	; (8001a80 <HAL_ADC_Start_DMA+0x218>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d105      	bne.n	80019e0 <HAL_ADC_Start_DMA+0x178>
 80019d4:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_ADC_Start_DMA+0x204>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00a      	beq.n	80019f6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a27      	ldr	r2, [pc, #156]	; (8001a84 <HAL_ADC_Start_DMA+0x21c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d136      	bne.n	8001a58 <HAL_ADC_Start_DMA+0x1f0>
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_ADC_Start_DMA+0x204>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d130      	bne.n	8001a58 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d129      	bne.n	8001a58 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	e020      	b.n	8001a58 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <HAL_ADC_Start_DMA+0x214>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d11b      	bne.n	8001a58 <HAL_ADC_Start_DMA+0x1f0>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d114      	bne.n	8001a58 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	e00b      	b.n	8001a58 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f043 0210 	orr.w	r2, r3, #16
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	f043 0201 	orr.w	r2, r3, #1
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008
 8001a68:	431bde83 	.word	0x431bde83
 8001a6c:	40012300 	.word	0x40012300
 8001a70:	08001f21 	.word	0x08001f21
 8001a74:	08001fdb 	.word	0x08001fdb
 8001a78:	08001ff7 	.word	0x08001ff7
 8001a7c:	40012000 	.word	0x40012000
 8001a80:	40012100 	.word	0x40012100
 8001a84:	40012200 	.word	0x40012200

08001a88 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1c>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e113      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x244>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b09      	cmp	r3, #9
 8001aee:	d925      	bls.n	8001b3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68d9      	ldr	r1, [r3, #12]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	3b1e      	subs	r3, #30
 8001b06:	2207      	movs	r2, #7
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	400a      	ands	r2, r1
 8001b14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68d9      	ldr	r1, [r3, #12]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	4603      	mov	r3, r0
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4403      	add	r3, r0
 8001b2e:	3b1e      	subs	r3, #30
 8001b30:	409a      	lsls	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	e022      	b.n	8001b82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6919      	ldr	r1, [r3, #16]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	2207      	movs	r2, #7
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6919      	ldr	r1, [r3, #16]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4618      	mov	r0, r3
 8001b72:	4603      	mov	r3, r0
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4403      	add	r3, r0
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d824      	bhi.n	8001bd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3b05      	subs	r3, #5
 8001b9c:	221f      	movs	r2, #31
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	400a      	ands	r2, r1
 8001baa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3b05      	subs	r3, #5
 8001bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bd2:	e04c      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b0c      	cmp	r3, #12
 8001bda:	d824      	bhi.n	8001c26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	3b23      	subs	r3, #35	; 0x23
 8001bee:	221f      	movs	r2, #31
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43da      	mvns	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	400a      	ands	r2, r1
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	3b23      	subs	r3, #35	; 0x23
 8001c18:	fa00 f203 	lsl.w	r2, r0, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
 8001c24:	e023      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3b41      	subs	r3, #65	; 0x41
 8001c38:	221f      	movs	r2, #31
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	400a      	ands	r2, r1
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	4618      	mov	r0, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b41      	subs	r3, #65	; 0x41
 8001c62:	fa00 f203 	lsl.w	r2, r0, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c6e:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <HAL_ADC_ConfigChannel+0x250>)
 8001c70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <HAL_ADC_ConfigChannel+0x254>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d10f      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x1d8>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b12      	cmp	r3, #18
 8001c82:	d10b      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_ADC_ConfigChannel+0x254>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d12b      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x23a>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_ADC_ConfigChannel+0x258>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d003      	beq.n	8001cb8 <HAL_ADC_ConfigChannel+0x1f4>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b11      	cmp	r3, #17
 8001cb6:	d122      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <HAL_ADC_ConfigChannel+0x258>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d111      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_ADC_ConfigChannel+0x25c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_ADC_ConfigChannel+0x260>)
 8001ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce4:	0c9a      	lsrs	r2, r3, #18
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cf0:	e002      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f9      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40012300 	.word	0x40012300
 8001d18:	40012000 	.word	0x40012000
 8001d1c:	10000012 	.word	0x10000012
 8001d20:	20000008 	.word	0x20000008
 8001d24:	431bde83 	.word	0x431bde83

08001d28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d30:	4b79      	ldr	r3, [pc, #484]	; (8001f18 <ADC_Init+0x1f0>)
 8001d32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	021a      	lsls	r2, r3, #8
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001da2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6899      	ldr	r1, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	4a58      	ldr	r2, [pc, #352]	; (8001f1c <ADC_Init+0x1f4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d022      	beq.n	8001e06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6899      	ldr	r1, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001df0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6899      	ldr	r1, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	e00f      	b.n	8001e26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0202 	bic.w	r2, r2, #2
 8001e34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6899      	ldr	r1, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7e1b      	ldrb	r3, [r3, #24]
 8001e40:	005a      	lsls	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01b      	beq.n	8001e8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6859      	ldr	r1, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	035a      	lsls	r2, r3, #13
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	e007      	b.n	8001e9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	051a      	lsls	r2, r3, #20
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ed0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6899      	ldr	r1, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ede:	025a      	lsls	r2, r3, #9
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6899      	ldr	r1, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	029a      	lsls	r2, r3, #10
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	609a      	str	r2, [r3, #8]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40012300 	.word	0x40012300
 8001f1c:	0f000001 	.word	0x0f000001

08001f20 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d13c      	bne.n	8001fb4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d12b      	bne.n	8001fac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d127      	bne.n	8001fac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d006      	beq.n	8001f78 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d119      	bne.n	8001fac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0220 	bic.w	r2, r2, #32
 8001f86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d105      	bne.n	8001fac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f7ff fd6b 	bl	8001a88 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fb2:	e00e      	b.n	8001fd2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7ff fd75 	bl	8001ab0 <HAL_ADC_ErrorCallback>
}
 8001fc6:	e004      	b.n	8001fd2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
}
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7ff fd57 	bl	8001a9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002002:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f043 0204 	orr.w	r2, r3, #4
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f7ff fd4a 	bl	8001ab0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800204c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002056:	4a04      	ldr	r2, [pc, #16]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	60d3      	str	r3, [r2, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4907      	ldr	r1, [pc, #28]	; (80020c0 <__NVIC_EnableIRQ+0x38>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002190:	d301      	bcc.n	8002196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2301      	movs	r3, #1
 8002194:	e00f      	b.n	80021b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <SysTick_Config+0x40>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219e:	210f      	movs	r1, #15
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f7ff ff8e 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <SysTick_Config+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <SysTick_Config+0x40>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010

080021c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff29 	bl	8002024 <__NVIC_SetPriorityGrouping>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ec:	f7ff ff3e 	bl	800206c <__NVIC_GetPriorityGrouping>
 80021f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f7ff ff8e 	bl	8002118 <NVIC_EncodePriority>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff5d 	bl	80020c4 <__NVIC_SetPriority>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff31 	bl	8002088 <__NVIC_EnableIRQ>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffa2 	bl	8002180 <SysTick_Config>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff fa94 	bl	8001780 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e099      	b.n	8002398 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002284:	e00f      	b.n	80022a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002286:	f7ff fa7b 	bl	8001780 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b05      	cmp	r3, #5
 8002292:	d908      	bls.n	80022a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2203      	movs	r2, #3
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e078      	b.n	8002398 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1e8      	bne.n	8002286 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <HAL_DMA_Init+0x158>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d107      	bne.n	8002310 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	4313      	orrs	r3, r2
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f023 0307 	bic.w	r3, r3, #7
 8002326:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	2b04      	cmp	r3, #4
 8002338:	d117      	bne.n	800236a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4313      	orrs	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00e      	beq.n	800236a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fa6f 	bl	8002830 <DMA_CheckFifoParam>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2240      	movs	r2, #64	; 0x40
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002366:	2301      	movs	r3, #1
 8002368:	e016      	b.n	8002398 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fa26 	bl	80027c4 <DMA_CalcBaseAndBitshift>
 8002378:	4603      	mov	r3, r0
 800237a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	223f      	movs	r2, #63	; 0x3f
 8002382:	409a      	lsls	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	f010803f 	.word	0xf010803f

080023a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_DMA_Start_IT+0x26>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e040      	b.n	800244c <HAL_DMA_Start_IT+0xa8>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d12f      	bne.n	800243e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2202      	movs	r2, #2
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f9b8 	bl	8002768 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	223f      	movs	r2, #63	; 0x3f
 80023fe:	409a      	lsls	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0216 	orr.w	r2, r2, #22
 8002412:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d007      	beq.n	800242c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0208 	orr.w	r2, r2, #8
 800242a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	e005      	b.n	800244a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002446:	2302      	movs	r3, #2
 8002448:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800244a:	7dfb      	ldrb	r3, [r7, #23]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002460:	4b8e      	ldr	r3, [pc, #568]	; (800269c <HAL_DMA_IRQHandler+0x248>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a8e      	ldr	r2, [pc, #568]	; (80026a0 <HAL_DMA_IRQHandler+0x24c>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0a9b      	lsrs	r3, r3, #10
 800246c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	2208      	movs	r2, #8
 8002480:	409a      	lsls	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01a      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0204 	bic.w	r2, r2, #4
 80024a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	2208      	movs	r2, #8
 80024ae:	409a      	lsls	r2, r3
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	2201      	movs	r2, #1
 80024c6:	409a      	lsls	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	2201      	movs	r2, #1
 80024e4:	409a      	lsls	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ee:	f043 0202 	orr.w	r2, r3, #2
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	2204      	movs	r2, #4
 80024fc:	409a      	lsls	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d012      	beq.n	800252c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00b      	beq.n	800252c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002518:	2204      	movs	r2, #4
 800251a:	409a      	lsls	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002524:	f043 0204 	orr.w	r2, r3, #4
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	2210      	movs	r2, #16
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d043      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d03c      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	2210      	movs	r2, #16
 8002550:	409a      	lsls	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d018      	beq.n	8002596 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d108      	bne.n	8002584 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d024      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	4798      	blx	r3
 8002582:	e01f      	b.n	80025c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01b      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
 8002594:	e016      	b.n	80025c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d107      	bne.n	80025b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0208 	bic.w	r2, r2, #8
 80025b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	2220      	movs	r2, #32
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 808f 	beq.w	80026f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8087 	beq.w	80026f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ea:	2220      	movs	r2, #32
 80025ec:	409a      	lsls	r2, r3
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b05      	cmp	r3, #5
 80025fc:	d136      	bne.n	800266c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0216 	bic.w	r2, r2, #22
 800260c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <HAL_DMA_IRQHandler+0x1da>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0208 	bic.w	r2, r2, #8
 800263c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	223f      	movs	r2, #63	; 0x3f
 8002644:	409a      	lsls	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265e:	2b00      	cmp	r3, #0
 8002660:	d07e      	beq.n	8002760 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4798      	blx	r3
        }
        return;
 800266a:	e079      	b.n	8002760 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d01d      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10d      	bne.n	80026a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	2b00      	cmp	r3, #0
 800268e:	d031      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
 8002698:	e02c      	b.n	80026f4 <HAL_DMA_IRQHandler+0x2a0>
 800269a:	bf00      	nop
 800269c:	20000008 	.word	0x20000008
 80026a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d023      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
 80026b4:	e01e      	b.n	80026f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10f      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0210 	bic.w	r2, r2, #16
 80026d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d032      	beq.n	8002762 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d022      	beq.n	800274e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2205      	movs	r2, #5
 800270c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3301      	adds	r3, #1
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	429a      	cmp	r2, r3
 800272a:	d307      	bcc.n	800273c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f2      	bne.n	8002720 <HAL_DMA_IRQHandler+0x2cc>
 800273a:	e000      	b.n	800273e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800273c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
 800275e:	e000      	b.n	8002762 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002760:	bf00      	nop
    }
  }
}
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002784:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b40      	cmp	r3, #64	; 0x40
 8002794:	d108      	bne.n	80027a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027a6:	e007      	b.n	80027b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	60da      	str	r2, [r3, #12]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	3b10      	subs	r3, #16
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <DMA_CalcBaseAndBitshift+0x64>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027de:	4a13      	ldr	r2, [pc, #76]	; (800282c <DMA_CalcBaseAndBitshift+0x68>)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d909      	bls.n	8002806 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027fa:	f023 0303 	bic.w	r3, r3, #3
 80027fe:	1d1a      	adds	r2, r3, #4
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	659a      	str	r2, [r3, #88]	; 0x58
 8002804:	e007      	b.n	8002816 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800280e:	f023 0303 	bic.w	r3, r3, #3
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	aaaaaaab 	.word	0xaaaaaaab
 800282c:	08007880 	.word	0x08007880

08002830 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d11f      	bne.n	800288a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d856      	bhi.n	80028fe <DMA_CheckFifoParam+0xce>
 8002850:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <DMA_CheckFifoParam+0x28>)
 8002852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002856:	bf00      	nop
 8002858:	08002869 	.word	0x08002869
 800285c:	0800287b 	.word	0x0800287b
 8002860:	08002869 	.word	0x08002869
 8002864:	080028ff 	.word	0x080028ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d046      	beq.n	8002902 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002878:	e043      	b.n	8002902 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002882:	d140      	bne.n	8002906 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002888:	e03d      	b.n	8002906 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002892:	d121      	bne.n	80028d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b03      	cmp	r3, #3
 8002898:	d837      	bhi.n	800290a <DMA_CheckFifoParam+0xda>
 800289a:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <DMA_CheckFifoParam+0x70>)
 800289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a0:	080028b1 	.word	0x080028b1
 80028a4:	080028b7 	.word	0x080028b7
 80028a8:	080028b1 	.word	0x080028b1
 80028ac:	080028c9 	.word	0x080028c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
      break;
 80028b4:	e030      	b.n	8002918 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d025      	beq.n	800290e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c6:	e022      	b.n	800290e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028d0:	d11f      	bne.n	8002912 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028d6:	e01c      	b.n	8002912 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d903      	bls.n	80028e6 <DMA_CheckFifoParam+0xb6>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d003      	beq.n	80028ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028e4:	e018      	b.n	8002918 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
      break;
 80028ea:	e015      	b.n	8002918 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00e      	beq.n	8002916 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
      break;
 80028fc:	e00b      	b.n	8002916 <DMA_CheckFifoParam+0xe6>
      break;
 80028fe:	bf00      	nop
 8002900:	e00a      	b.n	8002918 <DMA_CheckFifoParam+0xe8>
      break;
 8002902:	bf00      	nop
 8002904:	e008      	b.n	8002918 <DMA_CheckFifoParam+0xe8>
      break;
 8002906:	bf00      	nop
 8002908:	e006      	b.n	8002918 <DMA_CheckFifoParam+0xe8>
      break;
 800290a:	bf00      	nop
 800290c:	e004      	b.n	8002918 <DMA_CheckFifoParam+0xe8>
      break;
 800290e:	bf00      	nop
 8002910:	e002      	b.n	8002918 <DMA_CheckFifoParam+0xe8>
      break;   
 8002912:	bf00      	nop
 8002914:	e000      	b.n	8002918 <DMA_CheckFifoParam+0xe8>
      break;
 8002916:	bf00      	nop
    }
  } 
  
  return status; 
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop

08002928 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e06c      	b.n	8002a14 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002940:	2b00      	cmp	r3, #0
 8002942:	d106      	bne.n	8002952 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2223      	movs	r2, #35	; 0x23
 8002948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7fe fbcd 	bl	80010ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	4b31      	ldr	r3, [pc, #196]	; (8002a1c <HAL_ETH_Init+0xf4>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	4a30      	ldr	r2, [pc, #192]	; (8002a1c <HAL_ETH_Init+0xf4>)
 800295c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002960:	6453      	str	r3, [r2, #68]	; 0x44
 8002962:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <HAL_ETH_Init+0xf4>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800296e:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <HAL_ETH_Init+0xf8>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a2b      	ldr	r2, [pc, #172]	; (8002a20 <HAL_ETH_Init+0xf8>)
 8002974:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002978:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800297a:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_ETH_Init+0xf8>)
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4927      	ldr	r1, [pc, #156]	; (8002a20 <HAL_ETH_Init+0xf8>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <HAL_ETH_Init+0xf8>)
 800298a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029a4:	f7fe feec 	bl	8001780 <HAL_GetTick>
 80029a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029aa:	e011      	b.n	80029d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80029ac:	f7fe fee8 	bl	8001780 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029ba:	d909      	bls.n	80029d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2204      	movs	r2, #4
 80029c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	22e0      	movs	r2, #224	; 0xe0
 80029c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e021      	b.n	8002a14 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e4      	bne.n	80029ac <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f958 	bl	8002c98 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f9ff 	bl	8002dec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fa55 	bl	8002e9e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	461a      	mov	r2, r3
 80029fa:	2100      	movs	r1, #0
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f9bd 	bl	8002d7c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40013800 	.word	0x40013800

08002a24 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4b51      	ldr	r3, [pc, #324]	; (8002b80 <ETH_SetMACConfig+0x15c>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	7c1b      	ldrb	r3, [r3, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <ETH_SetMACConfig+0x28>
 8002a46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a4a:	e000      	b.n	8002a4e <ETH_SetMACConfig+0x2a>
 8002a4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	7c5b      	ldrb	r3, [r3, #17]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d102      	bne.n	8002a5c <ETH_SetMACConfig+0x38>
 8002a56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a5a:	e000      	b.n	8002a5e <ETH_SetMACConfig+0x3a>
 8002a5c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a5e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	7fdb      	ldrb	r3, [r3, #31]
 8002a6a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a6c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	7f92      	ldrb	r2, [r2, #30]
 8002a78:	2a00      	cmp	r2, #0
 8002a7a:	d102      	bne.n	8002a82 <ETH_SetMACConfig+0x5e>
 8002a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a80:	e000      	b.n	8002a84 <ETH_SetMACConfig+0x60>
 8002a82:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	7f1b      	ldrb	r3, [r3, #28]
 8002a8a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a8c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	791b      	ldrb	r3, [r3, #4]
 8002a98:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002a9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002aa2:	2a00      	cmp	r2, #0
 8002aa4:	d102      	bne.n	8002aac <ETH_SetMACConfig+0x88>
 8002aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aaa:	e000      	b.n	8002aae <ETH_SetMACConfig+0x8a>
 8002aac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002aae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	7bdb      	ldrb	r3, [r3, #15]
 8002ab4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ab6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002abc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ac4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f7fe fe5a 	bl	8001798 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002afa:	4013      	ands	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b02:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b0a:	2a00      	cmp	r2, #0
 8002b0c:	d101      	bne.n	8002b12 <ETH_SetMACConfig+0xee>
 8002b0e:	2280      	movs	r2, #128	; 0x80
 8002b10:	e000      	b.n	8002b14 <ETH_SetMACConfig+0xf0>
 8002b12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b14:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002b22:	2a01      	cmp	r2, #1
 8002b24:	d101      	bne.n	8002b2a <ETH_SetMACConfig+0x106>
 8002b26:	2208      	movs	r2, #8
 8002b28:	e000      	b.n	8002b2c <ETH_SetMACConfig+0x108>
 8002b2a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002b34:	2a01      	cmp	r2, #1
 8002b36:	d101      	bne.n	8002b3c <ETH_SetMACConfig+0x118>
 8002b38:	2204      	movs	r2, #4
 8002b3a:	e000      	b.n	8002b3e <ETH_SetMACConfig+0x11a>
 8002b3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002b46:	2a01      	cmp	r2, #1
 8002b48:	d101      	bne.n	8002b4e <ETH_SetMACConfig+0x12a>
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	e000      	b.n	8002b50 <ETH_SetMACConfig+0x12c>
 8002b4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b50:	4313      	orrs	r3, r2
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b68:	2001      	movs	r0, #1
 8002b6a:	f7fe fe15 	bl	8001798 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	619a      	str	r2, [r3, #24]
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	ff20810f 	.word	0xff20810f

08002b84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4b3d      	ldr	r3, [pc, #244]	; (8002c94 <ETH_SetDMAConfig+0x110>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	7b1b      	ldrb	r3, [r3, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d102      	bne.n	8002bb0 <ETH_SetDMAConfig+0x2c>
 8002baa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bae:	e000      	b.n	8002bb2 <ETH_SetDMAConfig+0x2e>
 8002bb0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	7b5b      	ldrb	r3, [r3, #13]
 8002bb6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bb8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	7f52      	ldrb	r2, [r2, #29]
 8002bbe:	2a00      	cmp	r2, #0
 8002bc0:	d102      	bne.n	8002bc8 <ETH_SetDMAConfig+0x44>
 8002bc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bc6:	e000      	b.n	8002bca <ETH_SetDMAConfig+0x46>
 8002bc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	7b9b      	ldrb	r3, [r3, #14]
 8002bd0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bd2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	7f1b      	ldrb	r3, [r3, #28]
 8002bde:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002be0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	7f9b      	ldrb	r3, [r3, #30]
 8002be6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002be8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bf6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f7fe fdbc 	bl	8001798 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	791b      	ldrb	r3, [r3, #4]
 8002c32:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c38:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c3e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c44:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c4c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c4e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c56:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c5c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c6a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f7fe fd8d 	bl	8001798 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c86:	461a      	mov	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6013      	str	r3, [r2, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	f8de3f23 	.word	0xf8de3f23

08002c98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b0a6      	sub	sp, #152	; 0x98
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002cac:	2300      	movs	r3, #0
 8002cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002cfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff fe86 	bl	8002a24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d44:	2301      	movs	r3, #1
 8002d46:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d4c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d52:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d68:	f107 0308 	add.w	r3, r7, #8
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff ff08 	bl	8002b84 <ETH_SetDMAConfig>
}
 8002d74:	bf00      	nop
 8002d76:	3798      	adds	r7, #152	; 0x98
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3305      	adds	r3, #5
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	3204      	adds	r2, #4
 8002d94:	7812      	ldrb	r2, [r2, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <ETH_MACAddressConfig+0x68>)
 8002d9e:	4413      	add	r3, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3303      	adds	r3, #3
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	061a      	lsls	r2, r3, #24
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3302      	adds	r3, #2
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	041b      	lsls	r3, r3, #16
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <ETH_MACAddressConfig+0x6c>)
 8002dce:	4413      	add	r3, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	6013      	str	r3, [r2, #0]
}
 8002dd6:	bf00      	nop
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40028040 	.word	0x40028040
 8002de8:	40028044 	.word	0x40028044

08002dec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	e03e      	b.n	8002e78 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68d9      	ldr	r1, [r3, #12]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2200      	movs	r2, #0
 8002e16:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2200      	movs	r2, #0
 8002e22:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	3206      	adds	r2, #6
 8002e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d80c      	bhi.n	8002e5c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68d9      	ldr	r1, [r3, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	461a      	mov	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	e004      	b.n	8002e66 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	461a      	mov	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3301      	adds	r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d9bd      	bls.n	8002dfa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e90:	611a      	str	r2, [r3, #16]
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e046      	b.n	8002f3a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6919      	ldr	r1, [r3, #16]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	440b      	add	r3, r1
 8002ebc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ee8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002ef0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	3212      	adds	r2, #18
 8002f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d80c      	bhi.n	8002f2a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6919      	ldr	r1, [r3, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	440b      	add	r3, r1
 8002f22:	461a      	mov	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	e004      	b.n	8002f34 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3301      	adds	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d9b5      	bls.n	8002eac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f6a:	60da      	str	r2, [r3, #12]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	e177      	b.n	8003284 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f94:	2201      	movs	r2, #1
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	f040 8166 	bne.w	800327e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d005      	beq.n	8002fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d130      	bne.n	800302c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003000:	2201      	movs	r2, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 0201 	and.w	r2, r3, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b03      	cmp	r3, #3
 8003036:	d017      	beq.n	8003068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d123      	bne.n	80030bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	08da      	lsrs	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3208      	adds	r2, #8
 800307c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	220f      	movs	r2, #15
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	08da      	lsrs	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3208      	adds	r2, #8
 80030b6:	69b9      	ldr	r1, [r7, #24]
 80030b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0203 	and.w	r2, r3, #3
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80c0 	beq.w	800327e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	4b66      	ldr	r3, [pc, #408]	; (800329c <HAL_GPIO_Init+0x324>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	4a65      	ldr	r2, [pc, #404]	; (800329c <HAL_GPIO_Init+0x324>)
 8003108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800310c:	6453      	str	r3, [r2, #68]	; 0x44
 800310e:	4b63      	ldr	r3, [pc, #396]	; (800329c <HAL_GPIO_Init+0x324>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800311a:	4a61      	ldr	r2, [pc, #388]	; (80032a0 <HAL_GPIO_Init+0x328>)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	3302      	adds	r3, #2
 8003122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	220f      	movs	r2, #15
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a58      	ldr	r2, [pc, #352]	; (80032a4 <HAL_GPIO_Init+0x32c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d037      	beq.n	80031b6 <HAL_GPIO_Init+0x23e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a57      	ldr	r2, [pc, #348]	; (80032a8 <HAL_GPIO_Init+0x330>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_GPIO_Init+0x23a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a56      	ldr	r2, [pc, #344]	; (80032ac <HAL_GPIO_Init+0x334>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d02b      	beq.n	80031ae <HAL_GPIO_Init+0x236>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a55      	ldr	r2, [pc, #340]	; (80032b0 <HAL_GPIO_Init+0x338>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d025      	beq.n	80031aa <HAL_GPIO_Init+0x232>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a54      	ldr	r2, [pc, #336]	; (80032b4 <HAL_GPIO_Init+0x33c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d01f      	beq.n	80031a6 <HAL_GPIO_Init+0x22e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a53      	ldr	r2, [pc, #332]	; (80032b8 <HAL_GPIO_Init+0x340>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d019      	beq.n	80031a2 <HAL_GPIO_Init+0x22a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a52      	ldr	r2, [pc, #328]	; (80032bc <HAL_GPIO_Init+0x344>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d013      	beq.n	800319e <HAL_GPIO_Init+0x226>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a51      	ldr	r2, [pc, #324]	; (80032c0 <HAL_GPIO_Init+0x348>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00d      	beq.n	800319a <HAL_GPIO_Init+0x222>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a50      	ldr	r2, [pc, #320]	; (80032c4 <HAL_GPIO_Init+0x34c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <HAL_GPIO_Init+0x21e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a4f      	ldr	r2, [pc, #316]	; (80032c8 <HAL_GPIO_Init+0x350>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d101      	bne.n	8003192 <HAL_GPIO_Init+0x21a>
 800318e:	2309      	movs	r3, #9
 8003190:	e012      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 8003192:	230a      	movs	r3, #10
 8003194:	e010      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 8003196:	2308      	movs	r3, #8
 8003198:	e00e      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 800319a:	2307      	movs	r3, #7
 800319c:	e00c      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 800319e:	2306      	movs	r3, #6
 80031a0:	e00a      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 80031a2:	2305      	movs	r3, #5
 80031a4:	e008      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 80031a6:	2304      	movs	r3, #4
 80031a8:	e006      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 80031aa:	2303      	movs	r3, #3
 80031ac:	e004      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e002      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 80031b6:	2300      	movs	r3, #0
 80031b8:	69fa      	ldr	r2, [r7, #28]
 80031ba:	f002 0203 	and.w	r2, r2, #3
 80031be:	0092      	lsls	r2, r2, #2
 80031c0:	4093      	lsls	r3, r2
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031c8:	4935      	ldr	r1, [pc, #212]	; (80032a0 <HAL_GPIO_Init+0x328>)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	3302      	adds	r3, #2
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031d6:	4b3d      	ldr	r3, [pc, #244]	; (80032cc <HAL_GPIO_Init+0x354>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	43db      	mvns	r3, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031fa:	4a34      	ldr	r2, [pc, #208]	; (80032cc <HAL_GPIO_Init+0x354>)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003200:	4b32      	ldr	r3, [pc, #200]	; (80032cc <HAL_GPIO_Init+0x354>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003224:	4a29      	ldr	r2, [pc, #164]	; (80032cc <HAL_GPIO_Init+0x354>)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800322a:	4b28      	ldr	r3, [pc, #160]	; (80032cc <HAL_GPIO_Init+0x354>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800324e:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <HAL_GPIO_Init+0x354>)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003254:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_GPIO_Init+0x354>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003278:	4a14      	ldr	r2, [pc, #80]	; (80032cc <HAL_GPIO_Init+0x354>)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3301      	adds	r3, #1
 8003282:	61fb      	str	r3, [r7, #28]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	2b0f      	cmp	r3, #15
 8003288:	f67f ae84 	bls.w	8002f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	3724      	adds	r7, #36	; 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	40013800 	.word	0x40013800
 80032a4:	40020000 	.word	0x40020000
 80032a8:	40020400 	.word	0x40020400
 80032ac:	40020800 	.word	0x40020800
 80032b0:	40020c00 	.word	0x40020c00
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40021400 	.word	0x40021400
 80032bc:	40021800 	.word	0x40021800
 80032c0:	40021c00 	.word	0x40021c00
 80032c4:	40022000 	.word	0x40022000
 80032c8:	40022400 	.word	0x40022400
 80032cc:	40013c00 	.word	0x40013c00

080032d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
 80032dc:	4613      	mov	r3, r2
 80032de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e0:	787b      	ldrb	r3, [r7, #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032ec:	e003      	b.n	80032f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ee:	887b      	ldrh	r3, [r7, #2]
 80032f0:	041a      	lsls	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	619a      	str	r2, [r3, #24]
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e12b      	b.n	800356e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fd ffa4 	bl	8001278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2224      	movs	r2, #36	; 0x24
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003356:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003366:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003368:	f001 fb4e 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 800336c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4a81      	ldr	r2, [pc, #516]	; (8003578 <HAL_I2C_Init+0x274>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d807      	bhi.n	8003388 <HAL_I2C_Init+0x84>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4a80      	ldr	r2, [pc, #512]	; (800357c <HAL_I2C_Init+0x278>)
 800337c:	4293      	cmp	r3, r2
 800337e:	bf94      	ite	ls
 8003380:	2301      	movls	r3, #1
 8003382:	2300      	movhi	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	e006      	b.n	8003396 <HAL_I2C_Init+0x92>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4a7d      	ldr	r2, [pc, #500]	; (8003580 <HAL_I2C_Init+0x27c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	bf94      	ite	ls
 8003390:	2301      	movls	r3, #1
 8003392:	2300      	movhi	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0e7      	b.n	800356e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a78      	ldr	r2, [pc, #480]	; (8003584 <HAL_I2C_Init+0x280>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	0c9b      	lsrs	r3, r3, #18
 80033a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4a6a      	ldr	r2, [pc, #424]	; (8003578 <HAL_I2C_Init+0x274>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d802      	bhi.n	80033d8 <HAL_I2C_Init+0xd4>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3301      	adds	r3, #1
 80033d6:	e009      	b.n	80033ec <HAL_I2C_Init+0xe8>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	4a69      	ldr	r2, [pc, #420]	; (8003588 <HAL_I2C_Init+0x284>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	099b      	lsrs	r3, r3, #6
 80033ea:	3301      	adds	r3, #1
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	495c      	ldr	r1, [pc, #368]	; (8003578 <HAL_I2C_Init+0x274>)
 8003408:	428b      	cmp	r3, r1
 800340a:	d819      	bhi.n	8003440 <HAL_I2C_Init+0x13c>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1e59      	subs	r1, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	fbb1 f3f3 	udiv	r3, r1, r3
 800341a:	1c59      	adds	r1, r3, #1
 800341c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003420:	400b      	ands	r3, r1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_I2C_Init+0x138>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1e59      	subs	r1, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fbb1 f3f3 	udiv	r3, r1, r3
 8003434:	3301      	adds	r3, #1
 8003436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343a:	e051      	b.n	80034e0 <HAL_I2C_Init+0x1dc>
 800343c:	2304      	movs	r3, #4
 800343e:	e04f      	b.n	80034e0 <HAL_I2C_Init+0x1dc>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d111      	bne.n	800346c <HAL_I2C_Init+0x168>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	440b      	add	r3, r1
 8003456:	fbb0 f3f3 	udiv	r3, r0, r3
 800345a:	3301      	adds	r3, #1
 800345c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e012      	b.n	8003492 <HAL_I2C_Init+0x18e>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e58      	subs	r0, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	0099      	lsls	r1, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003482:	3301      	adds	r3, #1
 8003484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_I2C_Init+0x196>
 8003496:	2301      	movs	r3, #1
 8003498:	e022      	b.n	80034e0 <HAL_I2C_Init+0x1dc>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10e      	bne.n	80034c0 <HAL_I2C_Init+0x1bc>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1e58      	subs	r0, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6859      	ldr	r1, [r3, #4]
 80034aa:	460b      	mov	r3, r1
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	440b      	add	r3, r1
 80034b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034be:	e00f      	b.n	80034e0 <HAL_I2C_Init+0x1dc>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1e58      	subs	r0, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	0099      	lsls	r1, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d6:	3301      	adds	r3, #1
 80034d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	6809      	ldr	r1, [r1, #0]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800350e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6911      	ldr	r1, [r2, #16]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68d2      	ldr	r2, [r2, #12]
 800351a:	4311      	orrs	r1, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	430b      	orrs	r3, r1
 8003522:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	000186a0 	.word	0x000186a0
 800357c:	001e847f 	.word	0x001e847f
 8003580:	003d08ff 	.word	0x003d08ff
 8003584:	431bde83 	.word	0x431bde83
 8003588:	10624dd3 	.word	0x10624dd3

0800358c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	461a      	mov	r2, r3
 8003598:	460b      	mov	r3, r1
 800359a:	817b      	strh	r3, [r7, #10]
 800359c:	4613      	mov	r3, r2
 800359e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035a0:	f7fe f8ee 	bl	8001780 <HAL_GetTick>
 80035a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	f040 80e0 	bne.w	8003774 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	2319      	movs	r3, #25
 80035ba:	2201      	movs	r2, #1
 80035bc:	4970      	ldr	r1, [pc, #448]	; (8003780 <HAL_I2C_Master_Transmit+0x1f4>)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fa92 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035ca:	2302      	movs	r3, #2
 80035cc:	e0d3      	b.n	8003776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_I2C_Master_Transmit+0x50>
 80035d8:	2302      	movs	r3, #2
 80035da:	e0cc      	b.n	8003776 <HAL_I2C_Master_Transmit+0x1ea>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d007      	beq.n	8003602 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003610:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2221      	movs	r2, #33	; 0x21
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2210      	movs	r2, #16
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	893a      	ldrh	r2, [r7, #8]
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a50      	ldr	r2, [pc, #320]	; (8003784 <HAL_I2C_Master_Transmit+0x1f8>)
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003644:	8979      	ldrh	r1, [r7, #10]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	6a3a      	ldr	r2, [r7, #32]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f9ca 	bl	80039e4 <I2C_MasterRequestWrite>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e08d      	b.n	8003776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003670:	e066      	b.n	8003740 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	6a39      	ldr	r1, [r7, #32]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fb0c 	bl	8003c94 <I2C_WaitOnTXEFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00d      	beq.n	800369e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b04      	cmp	r3, #4
 8003688:	d107      	bne.n	800369a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003698:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e06b      	b.n	8003776 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d11b      	bne.n	8003714 <HAL_I2C_Master_Transmit+0x188>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d017      	beq.n	8003714 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	781a      	ldrb	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	6a39      	ldr	r1, [r7, #32]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fafc 	bl	8003d16 <I2C_WaitOnBTFFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00d      	beq.n	8003740 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	2b04      	cmp	r3, #4
 800372a:	d107      	bne.n	800373c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e01a      	b.n	8003776 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	d194      	bne.n	8003672 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e000      	b.n	8003776 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	00100002 	.word	0x00100002
 8003784:	ffff0000 	.word	0xffff0000

08003788 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	; 0x28
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	460b      	mov	r3, r1
 8003796:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003798:	f7fd fff2 	bl	8001780 <HAL_GetTick>
 800379c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	f040 8111 	bne.w	80039d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2319      	movs	r3, #25
 80037b6:	2201      	movs	r2, #1
 80037b8:	4988      	ldr	r1, [pc, #544]	; (80039dc <HAL_I2C_IsDeviceReady+0x254>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f994 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
 80037c8:	e104      	b.n	80039d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_I2C_IsDeviceReady+0x50>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e0fd      	b.n	80039d4 <HAL_I2C_IsDeviceReady+0x24c>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d007      	beq.n	80037fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800380c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2224      	movs	r2, #36	; 0x24
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4a70      	ldr	r2, [pc, #448]	; (80039e0 <HAL_I2C_IsDeviceReady+0x258>)
 8003820:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003830:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2200      	movs	r2, #0
 800383a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f952 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00d      	beq.n	8003866 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003858:	d103      	bne.n	8003862 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003860:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0b6      	b.n	80039d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003866:	897b      	ldrh	r3, [r7, #10]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003874:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003876:	f7fd ff83 	bl	8001780 <HAL_GetTick>
 800387a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a0:	bf0c      	ite	eq
 80038a2:	2301      	moveq	r3, #1
 80038a4:	2300      	movne	r3, #0
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038aa:	e025      	b.n	80038f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038ac:	f7fd ff68 	bl	8001780 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d302      	bcc.n	80038c2 <HAL_I2C_IsDeviceReady+0x13a>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	22a0      	movs	r2, #160	; 0xa0
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2ba0      	cmp	r3, #160	; 0xa0
 8003902:	d005      	beq.n	8003910 <HAL_I2C_IsDeviceReady+0x188>
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <HAL_I2C_IsDeviceReady+0x188>
 800390a:	7dbb      	ldrb	r3, [r7, #22]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0cd      	beq.n	80038ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b02      	cmp	r3, #2
 8003924:	d129      	bne.n	800397a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003934:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	2319      	movs	r3, #25
 8003952:	2201      	movs	r2, #1
 8003954:	4921      	ldr	r1, [pc, #132]	; (80039dc <HAL_I2C_IsDeviceReady+0x254>)
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f8c6 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e036      	b.n	80039d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e02c      	b.n	80039d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003988:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003992:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	2319      	movs	r3, #25
 800399a:	2201      	movs	r2, #1
 800399c:	490f      	ldr	r1, [pc, #60]	; (80039dc <HAL_I2C_IsDeviceReady+0x254>)
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f8a2 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e012      	b.n	80039d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	3301      	adds	r3, #1
 80039b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	f4ff af32 	bcc.w	8003822 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80039d2:	2302      	movs	r3, #2
  }
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	00100002 	.word	0x00100002
 80039e0:	ffff0000 	.word	0xffff0000

080039e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	460b      	mov	r3, r1
 80039f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d006      	beq.n	8003a0e <I2C_MasterRequestWrite+0x2a>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d003      	beq.n	8003a0e <I2C_MasterRequestWrite+0x2a>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a0c:	d108      	bne.n	8003a20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e00b      	b.n	8003a38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	2b12      	cmp	r3, #18
 8003a26:	d107      	bne.n	8003a38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f84f 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00d      	beq.n	8003a6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5e:	d103      	bne.n	8003a68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e035      	b.n	8003ad8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a74:	d108      	bne.n	8003a88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a76:	897b      	ldrh	r3, [r7, #10]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a84:	611a      	str	r2, [r3, #16]
 8003a86:	e01b      	b.n	8003ac0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a88:	897b      	ldrh	r3, [r7, #10]
 8003a8a:	11db      	asrs	r3, r3, #7
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f003 0306 	and.w	r3, r3, #6
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f063 030f 	orn	r3, r3, #15
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	490e      	ldr	r1, [pc, #56]	; (8003ae0 <I2C_MasterRequestWrite+0xfc>)
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f875 	bl	8003b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e010      	b.n	8003ad8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4907      	ldr	r1, [pc, #28]	; (8003ae4 <I2C_MasterRequestWrite+0x100>)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f865 	bl	8003b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	00010008 	.word	0x00010008
 8003ae4:	00010002 	.word	0x00010002

08003ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003af8:	e025      	b.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d021      	beq.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fd fe3d 	bl	8001780 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d116      	bne.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f043 0220 	orr.w	r2, r3, #32
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e023      	b.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d10d      	bne.n	8003b6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	43da      	mvns	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bf0c      	ite	eq
 8003b62:	2301      	moveq	r3, #1
 8003b64:	2300      	movne	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	e00c      	b.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	43da      	mvns	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4013      	ands	r3, r2
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bf0c      	ite	eq
 8003b7e:	2301      	moveq	r3, #1
 8003b80:	2300      	movne	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d0b6      	beq.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ba4:	e051      	b.n	8003c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb4:	d123      	bne.n	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f043 0204 	orr.w	r2, r3, #4
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e046      	b.n	8003c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d021      	beq.n	8003c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c06:	f7fd fdbb 	bl	8001780 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d116      	bne.n	8003c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f043 0220 	orr.w	r2, r3, #32
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e020      	b.n	8003c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d10c      	bne.n	8003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bf14      	ite	ne
 8003c66:	2301      	movne	r3, #1
 8003c68:	2300      	moveq	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	e00b      	b.n	8003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	43da      	mvns	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf14      	ite	ne
 8003c80:	2301      	movne	r3, #1
 8003c82:	2300      	moveq	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d18d      	bne.n	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca0:	e02d      	b.n	8003cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f878 	bl	8003d98 <I2C_IsAcknowledgeFailed>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e02d      	b.n	8003d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d021      	beq.n	8003cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cba:	f7fd fd61 	bl	8001780 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d302      	bcc.n	8003cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d116      	bne.n	8003cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f043 0220 	orr.w	r2, r3, #32
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e007      	b.n	8003d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d08:	2b80      	cmp	r3, #128	; 0x80
 8003d0a:	d1ca      	bne.n	8003ca2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d22:	e02d      	b.n	8003d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f837 	bl	8003d98 <I2C_IsAcknowledgeFailed>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e02d      	b.n	8003d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d021      	beq.n	8003d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3c:	f7fd fd20 	bl	8001780 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d302      	bcc.n	8003d52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d116      	bne.n	8003d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e007      	b.n	8003d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d1ca      	bne.n	8003d24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dae:	d11b      	bne.n	8003de8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003db8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f043 0204 	orr.w	r2, r3, #4
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d129      	bne.n	8003e60 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2224      	movs	r2, #36	; 0x24
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0210 	bic.w	r2, r2, #16
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d12a      	bne.n	8003ede <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2224      	movs	r2, #36	; 0x24
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003ea8:	89fb      	ldrh	r3, [r7, #14]
 8003eaa:	f023 030f 	bic.w	r3, r3, #15
 8003eae:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	89fb      	ldrh	r3, [r7, #14]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	89fa      	ldrh	r2, [r7, #14]
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
  }
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eee:	b08f      	sub	sp, #60	; 0x3c
 8003ef0:	af0a      	add	r7, sp, #40	; 0x28
 8003ef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e10f      	b.n	800411e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fd fa6f 	bl	80013fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2203      	movs	r2, #3
 8003f22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 fffe 	bl	8005f3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	687e      	ldr	r6, [r7, #4]
 8003f4a:	466d      	mov	r5, sp
 8003f4c:	f106 0410 	add.w	r4, r6, #16
 8003f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f60:	1d33      	adds	r3, r6, #4
 8003f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f64:	6838      	ldr	r0, [r7, #0]
 8003f66:	f001 ff89 	bl	8005e7c <USB_CoreInit>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0d0      	b.n	800411e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f001 ffec 	bl	8005f60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
 8003f8c:	e04a      	b.n	8004024 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	333d      	adds	r3, #61	; 0x3d
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fa2:	7bfa      	ldrb	r2, [r7, #15]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	333c      	adds	r3, #60	; 0x3c
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fb6:	7bfa      	ldrb	r2, [r7, #15]
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	b298      	uxth	r0, r3
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	3344      	adds	r3, #68	; 0x44
 8003fca:	4602      	mov	r2, r0
 8003fcc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fce:	7bfa      	ldrb	r2, [r7, #15]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	3340      	adds	r3, #64	; 0x40
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fe2:	7bfa      	ldrb	r2, [r7, #15]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	3348      	adds	r3, #72	; 0x48
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ff6:	7bfa      	ldrb	r2, [r7, #15]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	334c      	adds	r3, #76	; 0x4c
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	3354      	adds	r3, #84	; 0x54
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	3301      	adds	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	429a      	cmp	r2, r3
 800402c:	d3af      	bcc.n	8003f8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]
 8004032:	e044      	b.n	80040be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004034:	7bfa      	ldrb	r2, [r7, #15]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004046:	2200      	movs	r2, #0
 8004048:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800404a:	7bfa      	ldrb	r2, [r7, #15]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800405c:	7bfa      	ldrb	r2, [r7, #15]
 800405e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004060:	7bfa      	ldrb	r2, [r7, #15]
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800408c:	7bfa      	ldrb	r2, [r7, #15]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	3301      	adds	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d3b5      	bcc.n	8004034 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	603b      	str	r3, [r7, #0]
 80040ce:	687e      	ldr	r6, [r7, #4]
 80040d0:	466d      	mov	r5, sp
 80040d2:	f106 0410 	add.w	r4, r6, #16
 80040d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80040e6:	1d33      	adds	r3, r6, #4
 80040e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ea:	6838      	ldr	r0, [r7, #0]
 80040ec:	f001 ff84 	bl	8005ff8 <USB_DevInit>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2202      	movs	r2, #2
 80040fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e00d      	b.n	800411e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f002 f94f 	bl	80063ba <USB_DevDisconnect>

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e267      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d075      	beq.n	8004232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004146:	4b88      	ldr	r3, [pc, #544]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b04      	cmp	r3, #4
 8004150:	d00c      	beq.n	800416c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004152:	4b85      	ldr	r3, [pc, #532]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800415a:	2b08      	cmp	r3, #8
 800415c:	d112      	bne.n	8004184 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800415e:	4b82      	ldr	r3, [pc, #520]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800416a:	d10b      	bne.n	8004184 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800416c:	4b7e      	ldr	r3, [pc, #504]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d05b      	beq.n	8004230 <HAL_RCC_OscConfig+0x108>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d157      	bne.n	8004230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e242      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418c:	d106      	bne.n	800419c <HAL_RCC_OscConfig+0x74>
 800418e:	4b76      	ldr	r3, [pc, #472]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a75      	ldr	r2, [pc, #468]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 8004194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e01d      	b.n	80041d8 <HAL_RCC_OscConfig+0xb0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCC_OscConfig+0x98>
 80041a6:	4b70      	ldr	r3, [pc, #448]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a6f      	ldr	r2, [pc, #444]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 80041ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	4b6d      	ldr	r3, [pc, #436]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a6c      	ldr	r2, [pc, #432]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e00b      	b.n	80041d8 <HAL_RCC_OscConfig+0xb0>
 80041c0:	4b69      	ldr	r3, [pc, #420]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a68      	ldr	r2, [pc, #416]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 80041c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	4b66      	ldr	r3, [pc, #408]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a65      	ldr	r2, [pc, #404]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 80041d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d013      	beq.n	8004208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e0:	f7fd face 	bl	8001780 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e8:	f7fd faca 	bl	8001780 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	; 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e207      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fa:	4b5b      	ldr	r3, [pc, #364]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0xc0>
 8004206:	e014      	b.n	8004232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fd faba 	bl	8001780 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004210:	f7fd fab6 	bl	8001780 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	; 0x64
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e1f3      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004222:	4b51      	ldr	r3, [pc, #324]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0xe8>
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d063      	beq.n	8004306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800423e:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00b      	beq.n	8004262 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800424a:	4b47      	ldr	r3, [pc, #284]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004252:	2b08      	cmp	r3, #8
 8004254:	d11c      	bne.n	8004290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004256:	4b44      	ldr	r3, [pc, #272]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d116      	bne.n	8004290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004262:	4b41      	ldr	r3, [pc, #260]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d005      	beq.n	800427a <HAL_RCC_OscConfig+0x152>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d001      	beq.n	800427a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e1c7      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800427a:	4b3b      	ldr	r3, [pc, #236]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	4937      	ldr	r1, [pc, #220]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 800428a:	4313      	orrs	r3, r2
 800428c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800428e:	e03a      	b.n	8004306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d020      	beq.n	80042da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004298:	4b34      	ldr	r3, [pc, #208]	; (800436c <HAL_RCC_OscConfig+0x244>)
 800429a:	2201      	movs	r2, #1
 800429c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fd fa6f 	bl	8001780 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042a6:	f7fd fa6b 	bl	8001780 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e1a8      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b8:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c4:	4b28      	ldr	r3, [pc, #160]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4925      	ldr	r1, [pc, #148]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	600b      	str	r3, [r1, #0]
 80042d8:	e015      	b.n	8004306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042da:	4b24      	ldr	r3, [pc, #144]	; (800436c <HAL_RCC_OscConfig+0x244>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fd fa4e 	bl	8001780 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e8:	f7fd fa4a 	bl	8001780 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e187      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fa:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d036      	beq.n	8004380 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d016      	beq.n	8004348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800431a:	4b15      	ldr	r3, [pc, #84]	; (8004370 <HAL_RCC_OscConfig+0x248>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fd fa2e 	bl	8001780 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004328:	f7fd fa2a 	bl	8001780 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e167      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCC_OscConfig+0x240>)
 800433c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0x200>
 8004346:	e01b      	b.n	8004380 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_RCC_OscConfig+0x248>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434e:	f7fd fa17 	bl	8001780 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004354:	e00e      	b.n	8004374 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004356:	f7fd fa13 	bl	8001780 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d907      	bls.n	8004374 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e150      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
 8004368:	40023800 	.word	0x40023800
 800436c:	42470000 	.word	0x42470000
 8004370:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004374:	4b88      	ldr	r3, [pc, #544]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 8004376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1ea      	bne.n	8004356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8097 	beq.w	80044bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800438e:	2300      	movs	r3, #0
 8004390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004392:	4b81      	ldr	r3, [pc, #516]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	4b7d      	ldr	r3, [pc, #500]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	4a7c      	ldr	r2, [pc, #496]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 80043a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ac:	6413      	str	r3, [r2, #64]	; 0x40
 80043ae:	4b7a      	ldr	r3, [pc, #488]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b6:	60bb      	str	r3, [r7, #8]
 80043b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ba:	2301      	movs	r3, #1
 80043bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043be:	4b77      	ldr	r3, [pc, #476]	; (800459c <HAL_RCC_OscConfig+0x474>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d118      	bne.n	80043fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ca:	4b74      	ldr	r3, [pc, #464]	; (800459c <HAL_RCC_OscConfig+0x474>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a73      	ldr	r2, [pc, #460]	; (800459c <HAL_RCC_OscConfig+0x474>)
 80043d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043d6:	f7fd f9d3 	bl	8001780 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043de:	f7fd f9cf 	bl	8001780 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e10c      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f0:	4b6a      	ldr	r3, [pc, #424]	; (800459c <HAL_RCC_OscConfig+0x474>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f0      	beq.n	80043de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d106      	bne.n	8004412 <HAL_RCC_OscConfig+0x2ea>
 8004404:	4b64      	ldr	r3, [pc, #400]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004408:	4a63      	ldr	r2, [pc, #396]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	6713      	str	r3, [r2, #112]	; 0x70
 8004410:	e01c      	b.n	800444c <HAL_RCC_OscConfig+0x324>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b05      	cmp	r3, #5
 8004418:	d10c      	bne.n	8004434 <HAL_RCC_OscConfig+0x30c>
 800441a:	4b5f      	ldr	r3, [pc, #380]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	4a5e      	ldr	r2, [pc, #376]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 8004420:	f043 0304 	orr.w	r3, r3, #4
 8004424:	6713      	str	r3, [r2, #112]	; 0x70
 8004426:	4b5c      	ldr	r3, [pc, #368]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	4a5b      	ldr	r2, [pc, #364]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	6713      	str	r3, [r2, #112]	; 0x70
 8004432:	e00b      	b.n	800444c <HAL_RCC_OscConfig+0x324>
 8004434:	4b58      	ldr	r3, [pc, #352]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	4a57      	ldr	r2, [pc, #348]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	6713      	str	r3, [r2, #112]	; 0x70
 8004440:	4b55      	ldr	r3, [pc, #340]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	4a54      	ldr	r2, [pc, #336]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 8004446:	f023 0304 	bic.w	r3, r3, #4
 800444a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d015      	beq.n	8004480 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004454:	f7fd f994 	bl	8001780 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445a:	e00a      	b.n	8004472 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800445c:	f7fd f990 	bl	8001780 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	; 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e0cb      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004472:	4b49      	ldr	r3, [pc, #292]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0ee      	beq.n	800445c <HAL_RCC_OscConfig+0x334>
 800447e:	e014      	b.n	80044aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004480:	f7fd f97e 	bl	8001780 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004486:	e00a      	b.n	800449e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004488:	f7fd f97a 	bl	8001780 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	; 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e0b5      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449e:	4b3e      	ldr	r3, [pc, #248]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1ee      	bne.n	8004488 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b0:	4b39      	ldr	r3, [pc, #228]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	4a38      	ldr	r2, [pc, #224]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 80044b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 80a1 	beq.w	8004608 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044c6:	4b34      	ldr	r3, [pc, #208]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d05c      	beq.n	800458c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d141      	bne.n	800455e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044da:	4b31      	ldr	r3, [pc, #196]	; (80045a0 <HAL_RCC_OscConfig+0x478>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fd f94e 	bl	8001780 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e8:	f7fd f94a 	bl	8001780 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e087      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	4b27      	ldr	r3, [pc, #156]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69da      	ldr	r2, [r3, #28]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	019b      	lsls	r3, r3, #6
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	3b01      	subs	r3, #1
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	061b      	lsls	r3, r3, #24
 800452a:	491b      	ldr	r1, [pc, #108]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004530:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <HAL_RCC_OscConfig+0x478>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004536:	f7fd f923 	bl	8001780 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800453e:	f7fd f91f 	bl	8001780 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e05c      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004550:	4b11      	ldr	r3, [pc, #68]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x416>
 800455c:	e054      	b.n	8004608 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455e:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <HAL_RCC_OscConfig+0x478>)
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004564:	f7fd f90c 	bl	8001780 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456c:	f7fd f908 	bl	8001780 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e045      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <HAL_RCC_OscConfig+0x470>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x444>
 800458a:	e03d      	b.n	8004608 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d107      	bne.n	80045a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e038      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
 8004598:	40023800 	.word	0x40023800
 800459c:	40007000 	.word	0x40007000
 80045a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045a4:	4b1b      	ldr	r3, [pc, #108]	; (8004614 <HAL_RCC_OscConfig+0x4ec>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d028      	beq.n	8004604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d121      	bne.n	8004604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d11a      	bne.n	8004604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045d4:	4013      	ands	r3, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045dc:	4293      	cmp	r3, r2
 80045de:	d111      	bne.n	8004604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	3b01      	subs	r3, #1
 80045ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d107      	bne.n	8004604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800

08004618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0cc      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800462c:	4b68      	ldr	r3, [pc, #416]	; (80047d0 <HAL_RCC_ClockConfig+0x1b8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d90c      	bls.n	8004654 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463a:	4b65      	ldr	r3, [pc, #404]	; (80047d0 <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004642:	4b63      	ldr	r3, [pc, #396]	; (80047d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0b8      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d020      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800466c:	4b59      	ldr	r3, [pc, #356]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4a58      	ldr	r2, [pc, #352]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004676:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004684:	4b53      	ldr	r3, [pc, #332]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	4a52      	ldr	r2, [pc, #328]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800468e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004690:	4b50      	ldr	r3, [pc, #320]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	494d      	ldr	r1, [pc, #308]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d044      	beq.n	8004738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d107      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	4b47      	ldr	r3, [pc, #284]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d119      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e07f      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d003      	beq.n	80046d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d107      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d6:	4b3f      	ldr	r3, [pc, #252]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d109      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e06f      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e6:	4b3b      	ldr	r3, [pc, #236]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e067      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046f6:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f023 0203 	bic.w	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	4934      	ldr	r1, [pc, #208]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	4313      	orrs	r3, r2
 8004706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004708:	f7fd f83a 	bl	8001780 <HAL_GetTick>
 800470c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800470e:	e00a      	b.n	8004726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004710:	f7fd f836 	bl	8001780 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	; 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e04f      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004726:	4b2b      	ldr	r3, [pc, #172]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 020c 	and.w	r2, r3, #12
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	429a      	cmp	r2, r3
 8004736:	d1eb      	bne.n	8004710 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004738:	4b25      	ldr	r3, [pc, #148]	; (80047d0 <HAL_RCC_ClockConfig+0x1b8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d20c      	bcs.n	8004760 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e032      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800476c:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4916      	ldr	r1, [pc, #88]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	4313      	orrs	r3, r2
 800477c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d009      	beq.n	800479e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800478a:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	490e      	ldr	r1, [pc, #56]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800479e:	f000 f821 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 80047a2:	4602      	mov	r2, r0
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	490a      	ldr	r1, [pc, #40]	; (80047d8 <HAL_RCC_ClockConfig+0x1c0>)
 80047b0:	5ccb      	ldrb	r3, [r1, r3]
 80047b2:	fa22 f303 	lsr.w	r3, r2, r3
 80047b6:	4a09      	ldr	r2, [pc, #36]	; (80047dc <HAL_RCC_ClockConfig+0x1c4>)
 80047b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fc ff9a 	bl	80016f8 <HAL_InitTick>

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40023c00 	.word	0x40023c00
 80047d4:	40023800 	.word	0x40023800
 80047d8:	08007868 	.word	0x08007868
 80047dc:	20000008 	.word	0x20000008
 80047e0:	2000000c 	.word	0x2000000c

080047e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e8:	b094      	sub	sp, #80	; 0x50
 80047ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	647b      	str	r3, [r7, #68]	; 0x44
 80047f0:	2300      	movs	r3, #0
 80047f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f4:	2300      	movs	r3, #0
 80047f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047fc:	4b79      	ldr	r3, [pc, #484]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 030c 	and.w	r3, r3, #12
 8004804:	2b08      	cmp	r3, #8
 8004806:	d00d      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0x40>
 8004808:	2b08      	cmp	r3, #8
 800480a:	f200 80e1 	bhi.w	80049d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x34>
 8004812:	2b04      	cmp	r3, #4
 8004814:	d003      	beq.n	800481e <HAL_RCC_GetSysClockFreq+0x3a>
 8004816:	e0db      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004818:	4b73      	ldr	r3, [pc, #460]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800481a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800481c:	e0db      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800481e:	4b73      	ldr	r3, [pc, #460]	; (80049ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004820:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004822:	e0d8      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004824:	4b6f      	ldr	r3, [pc, #444]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800482c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800482e:	4b6d      	ldr	r3, [pc, #436]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d063      	beq.n	8004902 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800483a:	4b6a      	ldr	r3, [pc, #424]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	099b      	lsrs	r3, r3, #6
 8004840:	2200      	movs	r2, #0
 8004842:	63bb      	str	r3, [r7, #56]	; 0x38
 8004844:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484c:	633b      	str	r3, [r7, #48]	; 0x30
 800484e:	2300      	movs	r3, #0
 8004850:	637b      	str	r3, [r7, #52]	; 0x34
 8004852:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004856:	4622      	mov	r2, r4
 8004858:	462b      	mov	r3, r5
 800485a:	f04f 0000 	mov.w	r0, #0
 800485e:	f04f 0100 	mov.w	r1, #0
 8004862:	0159      	lsls	r1, r3, #5
 8004864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004868:	0150      	lsls	r0, r2, #5
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4621      	mov	r1, r4
 8004870:	1a51      	subs	r1, r2, r1
 8004872:	6139      	str	r1, [r7, #16]
 8004874:	4629      	mov	r1, r5
 8004876:	eb63 0301 	sbc.w	r3, r3, r1
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004888:	4659      	mov	r1, fp
 800488a:	018b      	lsls	r3, r1, #6
 800488c:	4651      	mov	r1, sl
 800488e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004892:	4651      	mov	r1, sl
 8004894:	018a      	lsls	r2, r1, #6
 8004896:	4651      	mov	r1, sl
 8004898:	ebb2 0801 	subs.w	r8, r2, r1
 800489c:	4659      	mov	r1, fp
 800489e:	eb63 0901 	sbc.w	r9, r3, r1
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048b6:	4690      	mov	r8, r2
 80048b8:	4699      	mov	r9, r3
 80048ba:	4623      	mov	r3, r4
 80048bc:	eb18 0303 	adds.w	r3, r8, r3
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	462b      	mov	r3, r5
 80048c4:	eb49 0303 	adc.w	r3, r9, r3
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048d6:	4629      	mov	r1, r5
 80048d8:	024b      	lsls	r3, r1, #9
 80048da:	4621      	mov	r1, r4
 80048dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048e0:	4621      	mov	r1, r4
 80048e2:	024a      	lsls	r2, r1, #9
 80048e4:	4610      	mov	r0, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ea:	2200      	movs	r2, #0
 80048ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048f4:	f7fb fcd4 	bl	80002a0 <__aeabi_uldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4613      	mov	r3, r2
 80048fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004900:	e058      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004902:	4b38      	ldr	r3, [pc, #224]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	099b      	lsrs	r3, r3, #6
 8004908:	2200      	movs	r2, #0
 800490a:	4618      	mov	r0, r3
 800490c:	4611      	mov	r1, r2
 800490e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004912:	623b      	str	r3, [r7, #32]
 8004914:	2300      	movs	r3, #0
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
 8004918:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	f04f 0000 	mov.w	r0, #0
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	0159      	lsls	r1, r3, #5
 800492a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800492e:	0150      	lsls	r0, r2, #5
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4641      	mov	r1, r8
 8004936:	ebb2 0a01 	subs.w	sl, r2, r1
 800493a:	4649      	mov	r1, r9
 800493c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800494c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004950:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004954:	ebb2 040a 	subs.w	r4, r2, sl
 8004958:	eb63 050b 	sbc.w	r5, r3, fp
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	00eb      	lsls	r3, r5, #3
 8004966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800496a:	00e2      	lsls	r2, r4, #3
 800496c:	4614      	mov	r4, r2
 800496e:	461d      	mov	r5, r3
 8004970:	4643      	mov	r3, r8
 8004972:	18e3      	adds	r3, r4, r3
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	464b      	mov	r3, r9
 8004978:	eb45 0303 	adc.w	r3, r5, r3
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800498a:	4629      	mov	r1, r5
 800498c:	028b      	lsls	r3, r1, #10
 800498e:	4621      	mov	r1, r4
 8004990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004994:	4621      	mov	r1, r4
 8004996:	028a      	lsls	r2, r1, #10
 8004998:	4610      	mov	r0, r2
 800499a:	4619      	mov	r1, r3
 800499c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800499e:	2200      	movs	r2, #0
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	61fa      	str	r2, [r7, #28]
 80049a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049a8:	f7fb fc7a 	bl	80002a0 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4613      	mov	r3, r2
 80049b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	3301      	adds	r3, #1
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ce:	e002      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3750      	adds	r7, #80	; 0x50
 80049dc:	46bd      	mov	sp, r7
 80049de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e2:	bf00      	nop
 80049e4:	40023800 	.word	0x40023800
 80049e8:	00f42400 	.word	0x00f42400
 80049ec:	007a1200 	.word	0x007a1200

080049f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f4:	4b03      	ldr	r3, [pc, #12]	; (8004a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000008 	.word	0x20000008

08004a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a0c:	f7ff fff0 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	0a9b      	lsrs	r3, r3, #10
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	4903      	ldr	r1, [pc, #12]	; (8004a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	08007878 	.word	0x08007878

08004a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a34:	f7ff ffdc 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	0b5b      	lsrs	r3, r3, #13
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	4903      	ldr	r1, [pc, #12]	; (8004a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a46:	5ccb      	ldrb	r3, [r1, r3]
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40023800 	.word	0x40023800
 8004a54:	08007878 	.word	0x08007878

08004a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10b      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d105      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d075      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a8c:	4b91      	ldr	r3, [pc, #580]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a92:	f7fc fe75 	bl	8001780 <HAL_GetTick>
 8004a96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a98:	e008      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a9a:	f7fc fe71 	bl	8001780 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e189      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aac:	4b8a      	ldr	r3, [pc, #552]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f0      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d009      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	019a      	lsls	r2, r3, #6
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	071b      	lsls	r3, r3, #28
 8004ad0:	4981      	ldr	r1, [pc, #516]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01f      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ae4:	4b7c      	ldr	r3, [pc, #496]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aea:	0f1b      	lsrs	r3, r3, #28
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	019a      	lsls	r2, r3, #6
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	061b      	lsls	r3, r3, #24
 8004afe:	431a      	orrs	r2, r3
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	071b      	lsls	r3, r3, #28
 8004b04:	4974      	ldr	r1, [pc, #464]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b0c:	4b72      	ldr	r3, [pc, #456]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b12:	f023 021f 	bic.w	r2, r3, #31
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	496e      	ldr	r1, [pc, #440]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	019a      	lsls	r2, r3, #6
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	061b      	lsls	r3, r3, #24
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	071b      	lsls	r3, r3, #28
 8004b44:	4964      	ldr	r1, [pc, #400]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b4c:	4b61      	ldr	r3, [pc, #388]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b52:	f7fc fe15 	bl	8001780 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b5a:	f7fc fe11 	bl	8001780 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e129      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b6c:	4b5a      	ldr	r3, [pc, #360]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d079      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b90:	4b52      	ldr	r3, [pc, #328]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b96:	f7fc fdf3 	bl	8001780 <HAL_GetTick>
 8004b9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004b9e:	f7fc fdef 	bl	8001780 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e107      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bb0:	4b49      	ldr	r3, [pc, #292]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bbc:	d0ef      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d020      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bca:	4b43      	ldr	r3, [pc, #268]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd0:	0f1b      	lsrs	r3, r3, #28
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	019a      	lsls	r2, r3, #6
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	061b      	lsls	r3, r3, #24
 8004be4:	431a      	orrs	r2, r3
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	071b      	lsls	r3, r3, #28
 8004bea:	493b      	ldr	r1, [pc, #236]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bf2:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	4934      	ldr	r1, [pc, #208]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01e      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c18:	4b2f      	ldr	r3, [pc, #188]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	0e1b      	lsrs	r3, r3, #24
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	019a      	lsls	r2, r3, #6
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	061b      	lsls	r3, r3, #24
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	071b      	lsls	r3, r3, #28
 8004c38:	4927      	ldr	r1, [pc, #156]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c40:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	4922      	ldr	r1, [pc, #136]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c56:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c5c:	f7fc fd90 	bl	8001780 <HAL_GetTick>
 8004c60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004c64:	f7fc fd8c 	bl	8001780 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e0a4      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c76:	4b18      	ldr	r3, [pc, #96]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c82:	d1ef      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 808b 	beq.w	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4a0f      	ldr	r2, [pc, #60]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca2:	4b0d      	ldr	r3, [pc, #52]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cae:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a0b      	ldr	r2, [pc, #44]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cba:	f7fc fd61 	bl	8001780 <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cc0:	e010      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cc2:	f7fc fd5d 	bl	8001780 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d909      	bls.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e075      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004cd4:	42470068 	.word	0x42470068
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	42470070 	.word	0x42470070
 8004ce0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ce4:	4b38      	ldr	r3, [pc, #224]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0e8      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cf0:	4b36      	ldr	r3, [pc, #216]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d02f      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d028      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d0e:	4b2f      	ldr	r3, [pc, #188]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d18:	4b2d      	ldr	r3, [pc, #180]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d1e:	4b2c      	ldr	r3, [pc, #176]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d24:	4a29      	ldr	r2, [pc, #164]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d2a:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d114      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d36:	f7fc fd23 	bl	8001780 <HAL_GetTick>
 8004d3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d3e:	f7fc fd1f 	bl	8001780 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e035      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d54:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0ee      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d6c:	d10d      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004d6e:	4b17      	ldr	r3, [pc, #92]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d82:	4912      	ldr	r1, [pc, #72]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	608b      	str	r3, [r1, #8]
 8004d88:	e005      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004d8a:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d90:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d94:	6093      	str	r3, [r2, #8]
 8004d96:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da2:	490a      	ldr	r1, [pc, #40]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004dbc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40007000 	.word	0x40007000
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	42470e40 	.word	0x42470e40
 8004dd4:	424711e0 	.word	0x424711e0

08004dd8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e066      	b.n	8004ebc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	7f5b      	ldrb	r3, [r3, #29]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc fa82 	bl	8001308 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	22ca      	movs	r2, #202	; 0xca
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2253      	movs	r2, #83	; 0x53
 8004e18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fbce 	bl	80055bc <RTC_EnterInitMode>
 8004e20:	4603      	mov	r3, r0
 8004e22:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d12c      	bne.n	8004e84 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e3c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6899      	ldr	r1, [r3, #8]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68d2      	ldr	r2, [r2, #12]
 8004e64:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6919      	ldr	r1, [r3, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	041a      	lsls	r2, r3, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fbd5 	bl	800562a <RTC_ExitInitMode>
 8004e80:	4603      	mov	r3, r0
 8004e82:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d113      	bne.n	8004eb2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699a      	ldr	r2, [r3, #24]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	22ff      	movs	r2, #255	; 0xff
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ec4:	b590      	push	{r4, r7, lr}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	7f1b      	ldrb	r3, [r3, #28]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_RTC_SetTime+0x1c>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e087      	b.n	8004ff0 <HAL_RTC_SetTime+0x12c>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d126      	bne.n	8004f40 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2200      	movs	r2, #0
 8004f04:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fbb2 	bl	8005674 <RTC_ByteToBcd2>
 8004f10:	4603      	mov	r3, r0
 8004f12:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fbab 	bl	8005674 <RTC_ByteToBcd2>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004f22:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	789b      	ldrb	r3, [r3, #2]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fba3 	bl	8005674 <RTC_ByteToBcd2>
 8004f2e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f30:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	78db      	ldrb	r3, [r3, #3]
 8004f38:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e018      	b.n	8004f72 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2200      	movs	r2, #0
 8004f52:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	785b      	ldrb	r3, [r3, #1]
 8004f5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004f60:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004f66:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	78db      	ldrb	r3, [r3, #3]
 8004f6c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	22ca      	movs	r2, #202	; 0xca
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2253      	movs	r2, #83	; 0x53
 8004f80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fb1a 	bl	80055bc <RTC_EnterInitMode>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d120      	bne.n	8004fd4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004f9c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004fa0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fb0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6899      	ldr	r1, [r3, #8]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fb2d 	bl	800562a <RTC_ExitInitMode>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004fd4:	7cfb      	ldrb	r3, [r7, #19]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	22ff      	movs	r2, #255	; 0xff
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	771a      	strb	r2, [r3, #28]

  return status;
 8004fee:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd90      	pop	{r4, r7, pc}

08004ff8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800502a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800502e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	0c1b      	lsrs	r3, r3, #16
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800503a:	b2da      	uxtb	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	b2db      	uxtb	r3, r3
 8005046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800504a:	b2da      	uxtb	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005058:	b2da      	uxtb	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	0d9b      	lsrs	r3, r3, #22
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d11a      	bne.n	80050aa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fb18 	bl	80056ae <RTC_Bcd2ToByte>
 800507e:	4603      	mov	r3, r0
 8005080:	461a      	mov	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fb0f 	bl	80056ae <RTC_Bcd2ToByte>
 8005090:	4603      	mov	r3, r0
 8005092:	461a      	mov	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	789b      	ldrb	r3, [r3, #2]
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fb06 	bl	80056ae <RTC_Bcd2ToByte>
 80050a2:	4603      	mov	r3, r0
 80050a4:	461a      	mov	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80050b4:	b590      	push	{r4, r7, lr}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	7f1b      	ldrb	r3, [r3, #28]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_RTC_SetDate+0x1c>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e071      	b.n	80051b4 <HAL_RTC_SetDate+0x100>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2202      	movs	r2, #2
 80050da:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10e      	bne.n	8005100 <HAL_RTC_SetDate+0x4c>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	f023 0310 	bic.w	r3, r3, #16
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	330a      	adds	r3, #10
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d11c      	bne.n	8005140 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	78db      	ldrb	r3, [r3, #3]
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fab2 	bl	8005674 <RTC_ByteToBcd2>
 8005110:	4603      	mov	r3, r0
 8005112:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	4618      	mov	r0, r3
 800511a:	f000 faab 	bl	8005674 <RTC_ByteToBcd2>
 800511e:	4603      	mov	r3, r0
 8005120:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005122:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	789b      	ldrb	r3, [r3, #2]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 faa3 	bl	8005674 <RTC_ByteToBcd2>
 800512e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005130:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e00e      	b.n	800515e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	78db      	ldrb	r3, [r3, #3]
 8005144:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	785b      	ldrb	r3, [r3, #1]
 800514a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800514c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005152:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	22ca      	movs	r2, #202	; 0xca
 8005164:	625a      	str	r2, [r3, #36]	; 0x24
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2253      	movs	r2, #83	; 0x53
 800516c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fa24 	bl	80055bc <RTC_EnterInitMode>
 8005174:	4603      	mov	r3, r0
 8005176:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005188:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800518c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fa4b 	bl	800562a <RTC_ExitInitMode>
 8005194:	4603      	mov	r3, r0
 8005196:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005198:	7cfb      	ldrb	r3, [r7, #19]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2201      	movs	r2, #1
 80051a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	22ff      	movs	r2, #255	; 0xff
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	771a      	strb	r2, [r3, #28]

  return status;
 80051b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd90      	pop	{r4, r7, pc}

080051bc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	0c1b      	lsrs	r3, r3, #16
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	0a1b      	lsrs	r3, r3, #8
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	0b5b      	lsrs	r3, r3, #13
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	b2da      	uxtb	r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d11a      	bne.n	8005250 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	78db      	ldrb	r3, [r3, #3]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fa45 	bl	80056ae <RTC_Bcd2ToByte>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fa3c 	bl	80056ae <RTC_Bcd2ToByte>
 8005236:	4603      	mov	r3, r0
 8005238:	461a      	mov	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	789b      	ldrb	r3, [r3, #2]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fa33 	bl	80056ae <RTC_Bcd2ToByte>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800525c:	b590      	push	{r4, r7, lr}
 800525e:	b089      	sub	sp, #36	; 0x24
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005268:	4b9a      	ldr	r3, [pc, #616]	; (80054d4 <HAL_RTC_SetAlarm_IT+0x278>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a9a      	ldr	r2, [pc, #616]	; (80054d8 <HAL_RTC_SetAlarm_IT+0x27c>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	0adb      	lsrs	r3, r3, #11
 8005274:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	7f1b      	ldrb	r3, [r3, #28]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_RTC_SetAlarm_IT+0x36>
 800528e:	2302      	movs	r3, #2
 8005290:	e11c      	b.n	80054cc <HAL_RTC_SetAlarm_IT+0x270>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2202      	movs	r2, #2
 800529c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d137      	bne.n	8005314 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d102      	bne.n	80052b8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2200      	movs	r2, #0
 80052b6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 f9d9 	bl	8005674 <RTC_ByteToBcd2>
 80052c2:	4603      	mov	r3, r0
 80052c4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	785b      	ldrb	r3, [r3, #1]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 f9d2 	bl	8005674 <RTC_ByteToBcd2>
 80052d0:	4603      	mov	r3, r0
 80052d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80052d4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	789b      	ldrb	r3, [r3, #2]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f9ca 	bl	8005674 <RTC_ByteToBcd2>
 80052e0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052e2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	78db      	ldrb	r3, [r3, #3]
 80052ea:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80052ec:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f9bc 	bl	8005674 <RTC_ByteToBcd2>
 80052fc:	4603      	mov	r3, r0
 80052fe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005300:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005308:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800530e:	4313      	orrs	r3, r2
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	e023      	b.n	800535c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d102      	bne.n	8005328 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2200      	movs	r2, #0
 8005326:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	785b      	ldrb	r3, [r3, #1]
 8005332:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005334:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800533a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	78db      	ldrb	r3, [r3, #3]
 8005340:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005342:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800534a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800534c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005352:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005358:	4313      	orrs	r3, r2
 800535a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005364:	4313      	orrs	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	22ca      	movs	r2, #202	; 0xca
 800536e:	625a      	str	r2, [r3, #36]	; 0x24
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2253      	movs	r2, #83	; 0x53
 8005376:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005380:	d141      	bne.n	8005406 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005390:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80053a2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	1e5a      	subs	r2, r3, #1
 80053a8:	617a      	str	r2, [r7, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	22ff      	movs	r2, #255	; 0xff
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2203      	movs	r2, #3
 80053ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e082      	b.n	80054cc <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0e7      	beq.n	80053a4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005402:	609a      	str	r2, [r3, #8]
 8005404:	e04b      	b.n	800549e <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005414:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	b2da      	uxtb	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005426:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005428:	4b2a      	ldr	r3, [pc, #168]	; (80054d4 <HAL_RTC_SetAlarm_IT+0x278>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a2a      	ldr	r2, [pc, #168]	; (80054d8 <HAL_RTC_SetAlarm_IT+0x27c>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	0adb      	lsrs	r3, r3, #11
 8005434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005438:	fb02 f303 	mul.w	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	1e5a      	subs	r2, r3, #1
 8005442:	617a      	str	r2, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10b      	bne.n	8005460 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	22ff      	movs	r2, #255	; 0xff
 800544e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2203      	movs	r2, #3
 8005454:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e035      	b.n	80054cc <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0e7      	beq.n	800543e <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800549c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800549e:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <HAL_RTC_SetAlarm_IT+0x280>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <HAL_RTC_SetAlarm_IT+0x280>)
 80054a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a8:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80054aa:	4b0c      	ldr	r3, [pc, #48]	; (80054dc <HAL_RTC_SetAlarm_IT+0x280>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	4a0b      	ldr	r2, [pc, #44]	; (80054dc <HAL_RTC_SetAlarm_IT+0x280>)
 80054b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b4:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	22ff      	movs	r2, #255	; 0xff
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3724      	adds	r7, #36	; 0x24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd90      	pop	{r4, r7, pc}
 80054d4:	20000008 	.word	0x20000008
 80054d8:	10624dd3 	.word	0x10624dd3
 80054dc:	40013c00 	.word	0x40013c00

080054e0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d012      	beq.n	800551c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00b      	beq.n	800551c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7fb fd3d 	bl	8000f84 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	b2da      	uxtb	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800551a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d012      	beq.n	8005550 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00b      	beq.n	8005550 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f8d4 	bl	80056e6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800554e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005552:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005556:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	775a      	strb	r2, [r3, #29]
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40013c00 	.word	0x40013c00

0800556c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005586:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005588:	f7fc f8fa 	bl	8001780 <HAL_GetTick>
 800558c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800558e:	e009      	b.n	80055a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005590:	f7fc f8f6 	bl	8001780 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800559e:	d901      	bls.n	80055a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e007      	b.n	80055b4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0ee      	beq.n	8005590 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d122      	bne.n	8005620 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055ea:	f7fc f8c9 	bl	8001780 <HAL_GetTick>
 80055ee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80055f0:	e00c      	b.n	800560c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055f2:	f7fc f8c5 	bl	8001780 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005600:	d904      	bls.n	800560c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2204      	movs	r2, #4
 8005606:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <RTC_EnterInitMode+0x64>
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d1e8      	bne.n	80055f2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005644:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff ff89 	bl	800556c <HAL_RTC_WaitForSynchro>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2204      	movs	r2, #4
 8005664:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005682:	e005      	b.n	8005690 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	3301      	adds	r3, #1
 8005688:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	3b0a      	subs	r3, #10
 800568e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	2b09      	cmp	r3, #9
 8005694:	d8f6      	bhi.n	8005684 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	b2da      	uxtb	r2, r3
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	4313      	orrs	r3, r2
 80056a0:	b2db      	uxtb	r3, r3
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	4603      	mov	r3, r0
 80056b6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	091b      	lsrs	r3, r3, #4
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	0092      	lsls	r2, r2, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	4413      	add	r3, r2
 80056d8:	b2db      	uxtb	r3, r3
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e03f      	b.n	800578c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d106      	bne.n	8005726 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7fb fe23 	bl	800136c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2224      	movs	r2, #36	; 0x24
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800573c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f928 	bl	8005994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005752:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695a      	ldr	r2, [r3, #20]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005762:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005772:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08a      	sub	sp, #40	; 0x28
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	4613      	mov	r3, r2
 80057a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d17c      	bne.n	80058ae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_UART_Transmit+0x2c>
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e075      	b.n	80058b0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_UART_Transmit+0x3e>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e06e      	b.n	80058b0 <HAL_UART_Transmit+0x11c>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2221      	movs	r2, #33	; 0x21
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057e8:	f7fb ffca 	bl	8001780 <HAL_GetTick>
 80057ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	88fa      	ldrh	r2, [r7, #6]
 80057f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	88fa      	ldrh	r2, [r7, #6]
 80057f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005802:	d108      	bne.n	8005816 <HAL_UART_Transmit+0x82>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d104      	bne.n	8005816 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e003      	b.n	800581e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005826:	e02a      	b.n	800587e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2200      	movs	r2, #0
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f840 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e036      	b.n	80058b0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10b      	bne.n	8005860 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005856:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	3302      	adds	r3, #2
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	e007      	b.n	8005870 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	781a      	ldrb	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3301      	adds	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005882:	b29b      	uxth	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1cf      	bne.n	8005828 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2200      	movs	r2, #0
 8005890:	2140      	movs	r1, #64	; 0x40
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f810 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e006      	b.n	80058b0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e000      	b.n	80058b0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
  }
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b090      	sub	sp, #64	; 0x40
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	4613      	mov	r3, r2
 80058c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c8:	e050      	b.n	800596c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d04c      	beq.n	800596c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80058d8:	f7fb ff52 	bl	8001780 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d241      	bcs.n	800596c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	330c      	adds	r3, #12
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005908:	637a      	str	r2, [r7, #52]	; 0x34
 800590a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800590e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e5      	bne.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3314      	adds	r3, #20
 8005922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	613b      	str	r3, [r7, #16]
   return(result);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f023 0301 	bic.w	r3, r3, #1
 8005932:	63bb      	str	r3, [r7, #56]	; 0x38
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3314      	adds	r3, #20
 800593a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800593c:	623a      	str	r2, [r7, #32]
 800593e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	69f9      	ldr	r1, [r7, #28]
 8005942:	6a3a      	ldr	r2, [r7, #32]
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	61bb      	str	r3, [r7, #24]
   return(result);
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e5      	bne.n	800591c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e00f      	b.n	800598c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	4013      	ands	r3, r2
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	429a      	cmp	r2, r3
 800597a:	bf0c      	ite	eq
 800597c:	2301      	moveq	r3, #1
 800597e:	2300      	movne	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	461a      	mov	r2, r3
 8005984:	79fb      	ldrb	r3, [r7, #7]
 8005986:	429a      	cmp	r2, r3
 8005988:	d09f      	beq.n	80058ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3740      	adds	r7, #64	; 0x40
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005998:	b0c0      	sub	sp, #256	; 0x100
 800599a:	af00      	add	r7, sp, #0
 800599c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b0:	68d9      	ldr	r1, [r3, #12]
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	ea40 0301 	orr.w	r3, r0, r1
 80059bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059ec:	f021 010c 	bic.w	r1, r1, #12
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059fa:	430b      	orrs	r3, r1
 80059fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0e:	6999      	ldr	r1, [r3, #24]
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	ea40 0301 	orr.w	r3, r0, r1
 8005a1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4b8f      	ldr	r3, [pc, #572]	; (8005c60 <UART_SetConfig+0x2cc>)
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d005      	beq.n	8005a34 <UART_SetConfig+0xa0>
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b8d      	ldr	r3, [pc, #564]	; (8005c64 <UART_SetConfig+0x2d0>)
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d104      	bne.n	8005a3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a34:	f7fe fffc 	bl	8004a30 <HAL_RCC_GetPCLK2Freq>
 8005a38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a3c:	e003      	b.n	8005a46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a3e:	f7fe ffe3 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 8005a42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a50:	f040 810c 	bne.w	8005c6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a66:	4622      	mov	r2, r4
 8005a68:	462b      	mov	r3, r5
 8005a6a:	1891      	adds	r1, r2, r2
 8005a6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a6e:	415b      	adcs	r3, r3
 8005a70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a76:	4621      	mov	r1, r4
 8005a78:	eb12 0801 	adds.w	r8, r2, r1
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	eb43 0901 	adc.w	r9, r3, r1
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a96:	4690      	mov	r8, r2
 8005a98:	4699      	mov	r9, r3
 8005a9a:	4623      	mov	r3, r4
 8005a9c:	eb18 0303 	adds.w	r3, r8, r3
 8005aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005aa4:	462b      	mov	r3, r5
 8005aa6:	eb49 0303 	adc.w	r3, r9, r3
 8005aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005aba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005abe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	18db      	adds	r3, r3, r3
 8005ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ac8:	4613      	mov	r3, r2
 8005aca:	eb42 0303 	adc.w	r3, r2, r3
 8005ace:	657b      	str	r3, [r7, #84]	; 0x54
 8005ad0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ad4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ad8:	f7fa fbe2 	bl	80002a0 <__aeabi_uldivmod>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4b61      	ldr	r3, [pc, #388]	; (8005c68 <UART_SetConfig+0x2d4>)
 8005ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	011c      	lsls	r4, r3, #4
 8005aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005af4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005af8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005afc:	4642      	mov	r2, r8
 8005afe:	464b      	mov	r3, r9
 8005b00:	1891      	adds	r1, r2, r2
 8005b02:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b04:	415b      	adcs	r3, r3
 8005b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	eb12 0a01 	adds.w	sl, r2, r1
 8005b12:	4649      	mov	r1, r9
 8005b14:	eb43 0b01 	adc.w	fp, r3, r1
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b2c:	4692      	mov	sl, r2
 8005b2e:	469b      	mov	fp, r3
 8005b30:	4643      	mov	r3, r8
 8005b32:	eb1a 0303 	adds.w	r3, sl, r3
 8005b36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	18db      	adds	r3, r3, r3
 8005b5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b5e:	4613      	mov	r3, r2
 8005b60:	eb42 0303 	adc.w	r3, r2, r3
 8005b64:	647b      	str	r3, [r7, #68]	; 0x44
 8005b66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b6e:	f7fa fb97 	bl	80002a0 <__aeabi_uldivmod>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4611      	mov	r1, r2
 8005b78:	4b3b      	ldr	r3, [pc, #236]	; (8005c68 <UART_SetConfig+0x2d4>)
 8005b7a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	2264      	movs	r2, #100	; 0x64
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	1acb      	subs	r3, r1, r3
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b8e:	4b36      	ldr	r3, [pc, #216]	; (8005c68 <UART_SetConfig+0x2d4>)
 8005b90:	fba3 2302 	umull	r2, r3, r3, r2
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b9c:	441c      	add	r4, r3
 8005b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ba8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	1891      	adds	r1, r2, r2
 8005bb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bb8:	415b      	adcs	r3, r3
 8005bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bc0:	4641      	mov	r1, r8
 8005bc2:	1851      	adds	r1, r2, r1
 8005bc4:	6339      	str	r1, [r7, #48]	; 0x30
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	414b      	adcs	r3, r1
 8005bca:	637b      	str	r3, [r7, #52]	; 0x34
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005bd8:	4659      	mov	r1, fp
 8005bda:	00cb      	lsls	r3, r1, #3
 8005bdc:	4651      	mov	r1, sl
 8005bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005be2:	4651      	mov	r1, sl
 8005be4:	00ca      	lsls	r2, r1, #3
 8005be6:	4610      	mov	r0, r2
 8005be8:	4619      	mov	r1, r3
 8005bea:	4603      	mov	r3, r0
 8005bec:	4642      	mov	r2, r8
 8005bee:	189b      	adds	r3, r3, r2
 8005bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	460a      	mov	r2, r1
 8005bf8:	eb42 0303 	adc.w	r3, r2, r3
 8005bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c14:	460b      	mov	r3, r1
 8005c16:	18db      	adds	r3, r3, r3
 8005c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	eb42 0303 	adc.w	r3, r2, r3
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c2a:	f7fa fb39 	bl	80002a0 <__aeabi_uldivmod>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <UART_SetConfig+0x2d4>)
 8005c34:	fba3 1302 	umull	r1, r3, r3, r2
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	2164      	movs	r1, #100	; 0x64
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	3332      	adds	r3, #50	; 0x32
 8005c46:	4a08      	ldr	r2, [pc, #32]	; (8005c68 <UART_SetConfig+0x2d4>)
 8005c48:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	f003 0207 	and.w	r2, r3, #7
 8005c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4422      	add	r2, r4
 8005c5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c5c:	e106      	b.n	8005e6c <UART_SetConfig+0x4d8>
 8005c5e:	bf00      	nop
 8005c60:	40011000 	.word	0x40011000
 8005c64:	40011400 	.word	0x40011400
 8005c68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c7e:	4642      	mov	r2, r8
 8005c80:	464b      	mov	r3, r9
 8005c82:	1891      	adds	r1, r2, r2
 8005c84:	6239      	str	r1, [r7, #32]
 8005c86:	415b      	adcs	r3, r3
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
 8005c8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c8e:	4641      	mov	r1, r8
 8005c90:	1854      	adds	r4, r2, r1
 8005c92:	4649      	mov	r1, r9
 8005c94:	eb43 0501 	adc.w	r5, r3, r1
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	00eb      	lsls	r3, r5, #3
 8005ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ca6:	00e2      	lsls	r2, r4, #3
 8005ca8:	4614      	mov	r4, r2
 8005caa:	461d      	mov	r5, r3
 8005cac:	4643      	mov	r3, r8
 8005cae:	18e3      	adds	r3, r4, r3
 8005cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	eb45 0303 	adc.w	r3, r5, r3
 8005cba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	f04f 0300 	mov.w	r3, #0
 8005cd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cda:	4629      	mov	r1, r5
 8005cdc:	008b      	lsls	r3, r1, #2
 8005cde:	4621      	mov	r1, r4
 8005ce0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	008a      	lsls	r2, r1, #2
 8005ce8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cec:	f7fa fad8 	bl	80002a0 <__aeabi_uldivmod>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4b60      	ldr	r3, [pc, #384]	; (8005e78 <UART_SetConfig+0x4e4>)
 8005cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	011c      	lsls	r4, r3, #4
 8005cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d10:	4642      	mov	r2, r8
 8005d12:	464b      	mov	r3, r9
 8005d14:	1891      	adds	r1, r2, r2
 8005d16:	61b9      	str	r1, [r7, #24]
 8005d18:	415b      	adcs	r3, r3
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d20:	4641      	mov	r1, r8
 8005d22:	1851      	adds	r1, r2, r1
 8005d24:	6139      	str	r1, [r7, #16]
 8005d26:	4649      	mov	r1, r9
 8005d28:	414b      	adcs	r3, r1
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d38:	4659      	mov	r1, fp
 8005d3a:	00cb      	lsls	r3, r1, #3
 8005d3c:	4651      	mov	r1, sl
 8005d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d42:	4651      	mov	r1, sl
 8005d44:	00ca      	lsls	r2, r1, #3
 8005d46:	4610      	mov	r0, r2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4642      	mov	r2, r8
 8005d4e:	189b      	adds	r3, r3, r2
 8005d50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d54:	464b      	mov	r3, r9
 8005d56:	460a      	mov	r2, r1
 8005d58:	eb42 0303 	adc.w	r3, r2, r3
 8005d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d78:	4649      	mov	r1, r9
 8005d7a:	008b      	lsls	r3, r1, #2
 8005d7c:	4641      	mov	r1, r8
 8005d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d82:	4641      	mov	r1, r8
 8005d84:	008a      	lsls	r2, r1, #2
 8005d86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d8a:	f7fa fa89 	bl	80002a0 <__aeabi_uldivmod>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	4b38      	ldr	r3, [pc, #224]	; (8005e78 <UART_SetConfig+0x4e4>)
 8005d96:	fba3 2301 	umull	r2, r3, r3, r1
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	2264      	movs	r2, #100	; 0x64
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
 8005da2:	1acb      	subs	r3, r1, r3
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	3332      	adds	r3, #50	; 0x32
 8005da8:	4a33      	ldr	r2, [pc, #204]	; (8005e78 <UART_SetConfig+0x4e4>)
 8005daa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005db4:	441c      	add	r4, r3
 8005db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dba:	2200      	movs	r2, #0
 8005dbc:	673b      	str	r3, [r7, #112]	; 0x70
 8005dbe:	677a      	str	r2, [r7, #116]	; 0x74
 8005dc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	1891      	adds	r1, r2, r2
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	415b      	adcs	r3, r3
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	1851      	adds	r1, r2, r1
 8005dd8:	6039      	str	r1, [r7, #0]
 8005dda:	4649      	mov	r1, r9
 8005ddc:	414b      	adcs	r3, r1
 8005dde:	607b      	str	r3, [r7, #4]
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dec:	4659      	mov	r1, fp
 8005dee:	00cb      	lsls	r3, r1, #3
 8005df0:	4651      	mov	r1, sl
 8005df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005df6:	4651      	mov	r1, sl
 8005df8:	00ca      	lsls	r2, r1, #3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	4642      	mov	r2, r8
 8005e02:	189b      	adds	r3, r3, r2
 8005e04:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e06:	464b      	mov	r3, r9
 8005e08:	460a      	mov	r2, r1
 8005e0a:	eb42 0303 	adc.w	r3, r2, r3
 8005e0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	663b      	str	r3, [r7, #96]	; 0x60
 8005e1a:	667a      	str	r2, [r7, #100]	; 0x64
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e28:	4649      	mov	r1, r9
 8005e2a:	008b      	lsls	r3, r1, #2
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e32:	4641      	mov	r1, r8
 8005e34:	008a      	lsls	r2, r1, #2
 8005e36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e3a:	f7fa fa31 	bl	80002a0 <__aeabi_uldivmod>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4b0d      	ldr	r3, [pc, #52]	; (8005e78 <UART_SetConfig+0x4e4>)
 8005e44:	fba3 1302 	umull	r1, r3, r3, r2
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	2164      	movs	r1, #100	; 0x64
 8005e4c:	fb01 f303 	mul.w	r3, r1, r3
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	3332      	adds	r3, #50	; 0x32
 8005e56:	4a08      	ldr	r2, [pc, #32]	; (8005e78 <UART_SetConfig+0x4e4>)
 8005e58:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	f003 020f 	and.w	r2, r3, #15
 8005e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4422      	add	r2, r4
 8005e6a:	609a      	str	r2, [r3, #8]
}
 8005e6c:	bf00      	nop
 8005e6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e72:	46bd      	mov	sp, r7
 8005e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e78:	51eb851f 	.word	0x51eb851f

08005e7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	f107 001c 	add.w	r0, r7, #28
 8005e8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d122      	bne.n	8005eda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d105      	bne.n	8005ece <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 faa2 	bl	8006418 <USB_CoreReset>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	73fb      	strb	r3, [r7, #15]
 8005ed8:	e01a      	b.n	8005f10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fa96 	bl	8006418 <USB_CoreReset>
 8005eec:	4603      	mov	r3, r0
 8005eee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
 8005f02:	e005      	b.n	8005f10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d10b      	bne.n	8005f2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f043 0206 	orr.w	r2, r3, #6
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f043 0220 	orr.w	r2, r3, #32
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f3a:	b004      	add	sp, #16
 8005f3c:	4770      	bx	lr

08005f3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f023 0201 	bic.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d115      	bne.n	8005fae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f8e:	2001      	movs	r0, #1
 8005f90:	f7fb fc02 	bl	8001798 <HAL_Delay>
      ms++;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3301      	adds	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa2e 	bl	80063fc <USB_GetMode>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d01e      	beq.n	8005fe4 <USB_SetCurrentMode+0x84>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b31      	cmp	r3, #49	; 0x31
 8005faa:	d9f0      	bls.n	8005f8e <USB_SetCurrentMode+0x2e>
 8005fac:	e01a      	b.n	8005fe4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d115      	bne.n	8005fe0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	f7fb fbe9 	bl	8001798 <HAL_Delay>
      ms++;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fa15 	bl	80063fc <USB_GetMode>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <USB_SetCurrentMode+0x84>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b31      	cmp	r3, #49	; 0x31
 8005fdc:	d9f0      	bls.n	8005fc0 <USB_SetCurrentMode+0x60>
 8005fde:	e001      	b.n	8005fe4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e005      	b.n	8005ff0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b32      	cmp	r3, #50	; 0x32
 8005fe8:	d101      	bne.n	8005fee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b086      	sub	sp, #24
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006012:	2300      	movs	r3, #0
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	e009      	b.n	800602c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	3340      	adds	r3, #64	; 0x40
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	2200      	movs	r2, #0
 8006024:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	3301      	adds	r3, #1
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b0e      	cmp	r3, #14
 8006030:	d9f2      	bls.n	8006018 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11c      	bne.n	8006072 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006046:	f043 0302 	orr.w	r3, r3, #2
 800604a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	639a      	str	r2, [r3, #56]	; 0x38
 8006070:	e00b      	b.n	800608a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006090:	461a      	mov	r2, r3
 8006092:	2300      	movs	r3, #0
 8006094:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609c:	4619      	mov	r1, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a4:	461a      	mov	r2, r3
 80060a6:	680b      	ldr	r3, [r1, #0]
 80060a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d10c      	bne.n	80060ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060b6:	2100      	movs	r1, #0
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f965 	bl	8006388 <USB_SetDevSpeed>
 80060be:	e008      	b.n	80060d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060c0:	2101      	movs	r1, #1
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f960 	bl	8006388 <USB_SetDevSpeed>
 80060c8:	e003      	b.n	80060d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060ca:	2103      	movs	r1, #3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f95b 	bl	8006388 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060d2:	2110      	movs	r1, #16
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f8f3 	bl	80062c0 <USB_FlushTxFifo>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f91f 	bl	8006328 <USB_FlushRxFifo>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fa:	461a      	mov	r2, r3
 80060fc:	2300      	movs	r3, #0
 80060fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006106:	461a      	mov	r2, r3
 8006108:	2300      	movs	r3, #0
 800610a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006112:	461a      	mov	r2, r3
 8006114:	2300      	movs	r3, #0
 8006116:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006118:	2300      	movs	r3, #0
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	e043      	b.n	80061a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006134:	d118      	bne.n	8006168 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006148:	461a      	mov	r2, r3
 800614a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	e013      	b.n	800617a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615e:	461a      	mov	r2, r3
 8006160:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	e008      	b.n	800617a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006174:	461a      	mov	r2, r3
 8006176:	2300      	movs	r3, #0
 8006178:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006186:	461a      	mov	r2, r3
 8006188:	2300      	movs	r3, #0
 800618a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006198:	461a      	mov	r2, r3
 800619a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800619e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	3301      	adds	r3, #1
 80061a4:	613b      	str	r3, [r7, #16]
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d3b7      	bcc.n	800611e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061ae:	2300      	movs	r3, #0
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	e043      	b.n	800623c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ca:	d118      	bne.n	80061fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061de:	461a      	mov	r2, r3
 80061e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	e013      	b.n	8006210 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	461a      	mov	r2, r3
 80061f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	e008      	b.n	8006210 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620a:	461a      	mov	r2, r3
 800620c:	2300      	movs	r3, #0
 800620e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	461a      	mov	r2, r3
 800621e:	2300      	movs	r3, #0
 8006220:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622e:	461a      	mov	r2, r3
 8006230:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006234:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	3301      	adds	r3, #1
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	429a      	cmp	r2, r3
 8006242:	d3b7      	bcc.n	80061b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006252:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006256:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006264:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	2b00      	cmp	r3, #0
 800626a:	d105      	bne.n	8006278 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f043 0210 	orr.w	r2, r3, #16
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <USB_DevInit+0x2c4>)
 800627e:	4313      	orrs	r3, r2
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f043 0208 	orr.w	r2, r3, #8
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006298:	2b01      	cmp	r3, #1
 800629a:	d107      	bne.n	80062ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062a4:	f043 0304 	orr.w	r3, r3, #4
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062b8:	b004      	add	sp, #16
 80062ba:	4770      	bx	lr
 80062bc:	803c3800 	.word	0x803c3800

080062c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3301      	adds	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4a13      	ldr	r2, [pc, #76]	; (8006324 <USB_FlushTxFifo+0x64>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d901      	bls.n	80062e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e01b      	b.n	8006318 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	daf2      	bge.n	80062ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	019b      	lsls	r3, r3, #6
 80062f0:	f043 0220 	orr.w	r2, r3, #32
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3301      	adds	r3, #1
 80062fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4a08      	ldr	r2, [pc, #32]	; (8006324 <USB_FlushTxFifo+0x64>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d901      	bls.n	800630a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e006      	b.n	8006318 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b20      	cmp	r3, #32
 8006314:	d0f0      	beq.n	80062f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	00030d40 	.word	0x00030d40

08006328 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3301      	adds	r3, #1
 8006338:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4a11      	ldr	r2, [pc, #68]	; (8006384 <USB_FlushRxFifo+0x5c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d901      	bls.n	8006346 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e018      	b.n	8006378 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	daf2      	bge.n	8006334 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2210      	movs	r2, #16
 8006356:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3301      	adds	r3, #1
 800635c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a08      	ldr	r2, [pc, #32]	; (8006384 <USB_FlushRxFifo+0x5c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e006      	b.n	8006378 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b10      	cmp	r3, #16
 8006374:	d0f0      	beq.n	8006358 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	00030d40 	.word	0x00030d40

08006388 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a8:	4313      	orrs	r3, r2
 80063aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063d4:	f023 0303 	bic.w	r3, r3, #3
 80063d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e8:	f043 0302 	orr.w	r3, r3, #2
 80063ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	f003 0301 	and.w	r3, r3, #1
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4a13      	ldr	r2, [pc, #76]	; (800647c <USB_CoreReset+0x64>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d901      	bls.n	8006436 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e01b      	b.n	800646e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	daf2      	bge.n	8006424 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f043 0201 	orr.w	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3301      	adds	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4a09      	ldr	r2, [pc, #36]	; (800647c <USB_CoreReset+0x64>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d901      	bls.n	8006460 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e006      	b.n	800646e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b01      	cmp	r3, #1
 800646a:	d0f0      	beq.n	800644e <USB_CoreReset+0x36>

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	00030d40 	.word	0x00030d40

08006480 <std>:
 8006480:	2300      	movs	r3, #0
 8006482:	b510      	push	{r4, lr}
 8006484:	4604      	mov	r4, r0
 8006486:	e9c0 3300 	strd	r3, r3, [r0]
 800648a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800648e:	6083      	str	r3, [r0, #8]
 8006490:	8181      	strh	r1, [r0, #12]
 8006492:	6643      	str	r3, [r0, #100]	; 0x64
 8006494:	81c2      	strh	r2, [r0, #14]
 8006496:	6183      	str	r3, [r0, #24]
 8006498:	4619      	mov	r1, r3
 800649a:	2208      	movs	r2, #8
 800649c:	305c      	adds	r0, #92	; 0x5c
 800649e:	f000 fa4b 	bl	8006938 <memset>
 80064a2:	4b0d      	ldr	r3, [pc, #52]	; (80064d8 <std+0x58>)
 80064a4:	6263      	str	r3, [r4, #36]	; 0x24
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <std+0x5c>)
 80064a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80064aa:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <std+0x60>)
 80064ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064ae:	4b0d      	ldr	r3, [pc, #52]	; (80064e4 <std+0x64>)
 80064b0:	6323      	str	r3, [r4, #48]	; 0x30
 80064b2:	4b0d      	ldr	r3, [pc, #52]	; (80064e8 <std+0x68>)
 80064b4:	6224      	str	r4, [r4, #32]
 80064b6:	429c      	cmp	r4, r3
 80064b8:	d006      	beq.n	80064c8 <std+0x48>
 80064ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80064be:	4294      	cmp	r4, r2
 80064c0:	d002      	beq.n	80064c8 <std+0x48>
 80064c2:	33d0      	adds	r3, #208	; 0xd0
 80064c4:	429c      	cmp	r4, r3
 80064c6:	d105      	bne.n	80064d4 <std+0x54>
 80064c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d0:	f000 baaa 	b.w	8006a28 <__retarget_lock_init_recursive>
 80064d4:	bd10      	pop	{r4, pc}
 80064d6:	bf00      	nop
 80064d8:	08006789 	.word	0x08006789
 80064dc:	080067ab 	.word	0x080067ab
 80064e0:	080067e3 	.word	0x080067e3
 80064e4:	08006807 	.word	0x08006807
 80064e8:	20000988 	.word	0x20000988

080064ec <stdio_exit_handler>:
 80064ec:	4a02      	ldr	r2, [pc, #8]	; (80064f8 <stdio_exit_handler+0xc>)
 80064ee:	4903      	ldr	r1, [pc, #12]	; (80064fc <stdio_exit_handler+0x10>)
 80064f0:	4803      	ldr	r0, [pc, #12]	; (8006500 <stdio_exit_handler+0x14>)
 80064f2:	f000 b869 	b.w	80065c8 <_fwalk_sglue>
 80064f6:	bf00      	nop
 80064f8:	20000014 	.word	0x20000014
 80064fc:	08007585 	.word	0x08007585
 8006500:	20000020 	.word	0x20000020

08006504 <cleanup_stdio>:
 8006504:	6841      	ldr	r1, [r0, #4]
 8006506:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <cleanup_stdio+0x34>)
 8006508:	4299      	cmp	r1, r3
 800650a:	b510      	push	{r4, lr}
 800650c:	4604      	mov	r4, r0
 800650e:	d001      	beq.n	8006514 <cleanup_stdio+0x10>
 8006510:	f001 f838 	bl	8007584 <_fflush_r>
 8006514:	68a1      	ldr	r1, [r4, #8]
 8006516:	4b09      	ldr	r3, [pc, #36]	; (800653c <cleanup_stdio+0x38>)
 8006518:	4299      	cmp	r1, r3
 800651a:	d002      	beq.n	8006522 <cleanup_stdio+0x1e>
 800651c:	4620      	mov	r0, r4
 800651e:	f001 f831 	bl	8007584 <_fflush_r>
 8006522:	68e1      	ldr	r1, [r4, #12]
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <cleanup_stdio+0x3c>)
 8006526:	4299      	cmp	r1, r3
 8006528:	d004      	beq.n	8006534 <cleanup_stdio+0x30>
 800652a:	4620      	mov	r0, r4
 800652c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006530:	f001 b828 	b.w	8007584 <_fflush_r>
 8006534:	bd10      	pop	{r4, pc}
 8006536:	bf00      	nop
 8006538:	20000988 	.word	0x20000988
 800653c:	200009f0 	.word	0x200009f0
 8006540:	20000a58 	.word	0x20000a58

08006544 <global_stdio_init.part.0>:
 8006544:	b510      	push	{r4, lr}
 8006546:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <global_stdio_init.part.0+0x30>)
 8006548:	4c0b      	ldr	r4, [pc, #44]	; (8006578 <global_stdio_init.part.0+0x34>)
 800654a:	4a0c      	ldr	r2, [pc, #48]	; (800657c <global_stdio_init.part.0+0x38>)
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	4620      	mov	r0, r4
 8006550:	2200      	movs	r2, #0
 8006552:	2104      	movs	r1, #4
 8006554:	f7ff ff94 	bl	8006480 <std>
 8006558:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800655c:	2201      	movs	r2, #1
 800655e:	2109      	movs	r1, #9
 8006560:	f7ff ff8e 	bl	8006480 <std>
 8006564:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006568:	2202      	movs	r2, #2
 800656a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800656e:	2112      	movs	r1, #18
 8006570:	f7ff bf86 	b.w	8006480 <std>
 8006574:	20000ac0 	.word	0x20000ac0
 8006578:	20000988 	.word	0x20000988
 800657c:	080064ed 	.word	0x080064ed

08006580 <__sfp_lock_acquire>:
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <__sfp_lock_acquire+0x8>)
 8006582:	f000 ba52 	b.w	8006a2a <__retarget_lock_acquire_recursive>
 8006586:	bf00      	nop
 8006588:	20000ac9 	.word	0x20000ac9

0800658c <__sfp_lock_release>:
 800658c:	4801      	ldr	r0, [pc, #4]	; (8006594 <__sfp_lock_release+0x8>)
 800658e:	f000 ba4d 	b.w	8006a2c <__retarget_lock_release_recursive>
 8006592:	bf00      	nop
 8006594:	20000ac9 	.word	0x20000ac9

08006598 <__sinit>:
 8006598:	b510      	push	{r4, lr}
 800659a:	4604      	mov	r4, r0
 800659c:	f7ff fff0 	bl	8006580 <__sfp_lock_acquire>
 80065a0:	6a23      	ldr	r3, [r4, #32]
 80065a2:	b11b      	cbz	r3, 80065ac <__sinit+0x14>
 80065a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a8:	f7ff bff0 	b.w	800658c <__sfp_lock_release>
 80065ac:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <__sinit+0x28>)
 80065ae:	6223      	str	r3, [r4, #32]
 80065b0:	4b04      	ldr	r3, [pc, #16]	; (80065c4 <__sinit+0x2c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1f5      	bne.n	80065a4 <__sinit+0xc>
 80065b8:	f7ff ffc4 	bl	8006544 <global_stdio_init.part.0>
 80065bc:	e7f2      	b.n	80065a4 <__sinit+0xc>
 80065be:	bf00      	nop
 80065c0:	08006505 	.word	0x08006505
 80065c4:	20000ac0 	.word	0x20000ac0

080065c8 <_fwalk_sglue>:
 80065c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065cc:	4607      	mov	r7, r0
 80065ce:	4688      	mov	r8, r1
 80065d0:	4614      	mov	r4, r2
 80065d2:	2600      	movs	r6, #0
 80065d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065d8:	f1b9 0901 	subs.w	r9, r9, #1
 80065dc:	d505      	bpl.n	80065ea <_fwalk_sglue+0x22>
 80065de:	6824      	ldr	r4, [r4, #0]
 80065e0:	2c00      	cmp	r4, #0
 80065e2:	d1f7      	bne.n	80065d4 <_fwalk_sglue+0xc>
 80065e4:	4630      	mov	r0, r6
 80065e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ea:	89ab      	ldrh	r3, [r5, #12]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d907      	bls.n	8006600 <_fwalk_sglue+0x38>
 80065f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065f4:	3301      	adds	r3, #1
 80065f6:	d003      	beq.n	8006600 <_fwalk_sglue+0x38>
 80065f8:	4629      	mov	r1, r5
 80065fa:	4638      	mov	r0, r7
 80065fc:	47c0      	blx	r8
 80065fe:	4306      	orrs	r6, r0
 8006600:	3568      	adds	r5, #104	; 0x68
 8006602:	e7e9      	b.n	80065d8 <_fwalk_sglue+0x10>

08006604 <iprintf>:
 8006604:	b40f      	push	{r0, r1, r2, r3}
 8006606:	b507      	push	{r0, r1, r2, lr}
 8006608:	4906      	ldr	r1, [pc, #24]	; (8006624 <iprintf+0x20>)
 800660a:	ab04      	add	r3, sp, #16
 800660c:	6808      	ldr	r0, [r1, #0]
 800660e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006612:	6881      	ldr	r1, [r0, #8]
 8006614:	9301      	str	r3, [sp, #4]
 8006616:	f000 fc85 	bl	8006f24 <_vfiprintf_r>
 800661a:	b003      	add	sp, #12
 800661c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006620:	b004      	add	sp, #16
 8006622:	4770      	bx	lr
 8006624:	2000006c 	.word	0x2000006c

08006628 <_puts_r>:
 8006628:	6a03      	ldr	r3, [r0, #32]
 800662a:	b570      	push	{r4, r5, r6, lr}
 800662c:	6884      	ldr	r4, [r0, #8]
 800662e:	4605      	mov	r5, r0
 8006630:	460e      	mov	r6, r1
 8006632:	b90b      	cbnz	r3, 8006638 <_puts_r+0x10>
 8006634:	f7ff ffb0 	bl	8006598 <__sinit>
 8006638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800663a:	07db      	lsls	r3, r3, #31
 800663c:	d405      	bmi.n	800664a <_puts_r+0x22>
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	0598      	lsls	r0, r3, #22
 8006642:	d402      	bmi.n	800664a <_puts_r+0x22>
 8006644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006646:	f000 f9f0 	bl	8006a2a <__retarget_lock_acquire_recursive>
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	0719      	lsls	r1, r3, #28
 800664e:	d513      	bpl.n	8006678 <_puts_r+0x50>
 8006650:	6923      	ldr	r3, [r4, #16]
 8006652:	b18b      	cbz	r3, 8006678 <_puts_r+0x50>
 8006654:	3e01      	subs	r6, #1
 8006656:	68a3      	ldr	r3, [r4, #8]
 8006658:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800665c:	3b01      	subs	r3, #1
 800665e:	60a3      	str	r3, [r4, #8]
 8006660:	b9e9      	cbnz	r1, 800669e <_puts_r+0x76>
 8006662:	2b00      	cmp	r3, #0
 8006664:	da2e      	bge.n	80066c4 <_puts_r+0x9c>
 8006666:	4622      	mov	r2, r4
 8006668:	210a      	movs	r1, #10
 800666a:	4628      	mov	r0, r5
 800666c:	f000 f8cf 	bl	800680e <__swbuf_r>
 8006670:	3001      	adds	r0, #1
 8006672:	d007      	beq.n	8006684 <_puts_r+0x5c>
 8006674:	250a      	movs	r5, #10
 8006676:	e007      	b.n	8006688 <_puts_r+0x60>
 8006678:	4621      	mov	r1, r4
 800667a:	4628      	mov	r0, r5
 800667c:	f000 f904 	bl	8006888 <__swsetup_r>
 8006680:	2800      	cmp	r0, #0
 8006682:	d0e7      	beq.n	8006654 <_puts_r+0x2c>
 8006684:	f04f 35ff 	mov.w	r5, #4294967295
 8006688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800668a:	07da      	lsls	r2, r3, #31
 800668c:	d405      	bmi.n	800669a <_puts_r+0x72>
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	059b      	lsls	r3, r3, #22
 8006692:	d402      	bmi.n	800669a <_puts_r+0x72>
 8006694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006696:	f000 f9c9 	bl	8006a2c <__retarget_lock_release_recursive>
 800669a:	4628      	mov	r0, r5
 800669c:	bd70      	pop	{r4, r5, r6, pc}
 800669e:	2b00      	cmp	r3, #0
 80066a0:	da04      	bge.n	80066ac <_puts_r+0x84>
 80066a2:	69a2      	ldr	r2, [r4, #24]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	dc06      	bgt.n	80066b6 <_puts_r+0x8e>
 80066a8:	290a      	cmp	r1, #10
 80066aa:	d004      	beq.n	80066b6 <_puts_r+0x8e>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	6022      	str	r2, [r4, #0]
 80066b2:	7019      	strb	r1, [r3, #0]
 80066b4:	e7cf      	b.n	8006656 <_puts_r+0x2e>
 80066b6:	4622      	mov	r2, r4
 80066b8:	4628      	mov	r0, r5
 80066ba:	f000 f8a8 	bl	800680e <__swbuf_r>
 80066be:	3001      	adds	r0, #1
 80066c0:	d1c9      	bne.n	8006656 <_puts_r+0x2e>
 80066c2:	e7df      	b.n	8006684 <_puts_r+0x5c>
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	250a      	movs	r5, #10
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	6022      	str	r2, [r4, #0]
 80066cc:	701d      	strb	r5, [r3, #0]
 80066ce:	e7db      	b.n	8006688 <_puts_r+0x60>

080066d0 <puts>:
 80066d0:	4b02      	ldr	r3, [pc, #8]	; (80066dc <puts+0xc>)
 80066d2:	4601      	mov	r1, r0
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	f7ff bfa7 	b.w	8006628 <_puts_r>
 80066da:	bf00      	nop
 80066dc:	2000006c 	.word	0x2000006c

080066e0 <sniprintf>:
 80066e0:	b40c      	push	{r2, r3}
 80066e2:	b530      	push	{r4, r5, lr}
 80066e4:	4b17      	ldr	r3, [pc, #92]	; (8006744 <sniprintf+0x64>)
 80066e6:	1e0c      	subs	r4, r1, #0
 80066e8:	681d      	ldr	r5, [r3, #0]
 80066ea:	b09d      	sub	sp, #116	; 0x74
 80066ec:	da08      	bge.n	8006700 <sniprintf+0x20>
 80066ee:	238b      	movs	r3, #139	; 0x8b
 80066f0:	602b      	str	r3, [r5, #0]
 80066f2:	f04f 30ff 	mov.w	r0, #4294967295
 80066f6:	b01d      	add	sp, #116	; 0x74
 80066f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066fc:	b002      	add	sp, #8
 80066fe:	4770      	bx	lr
 8006700:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006704:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006708:	bf14      	ite	ne
 800670a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800670e:	4623      	moveq	r3, r4
 8006710:	9304      	str	r3, [sp, #16]
 8006712:	9307      	str	r3, [sp, #28]
 8006714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006718:	9002      	str	r0, [sp, #8]
 800671a:	9006      	str	r0, [sp, #24]
 800671c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006720:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006722:	ab21      	add	r3, sp, #132	; 0x84
 8006724:	a902      	add	r1, sp, #8
 8006726:	4628      	mov	r0, r5
 8006728:	9301      	str	r3, [sp, #4]
 800672a:	f000 fad3 	bl	8006cd4 <_svfiprintf_r>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	bfbc      	itt	lt
 8006732:	238b      	movlt	r3, #139	; 0x8b
 8006734:	602b      	strlt	r3, [r5, #0]
 8006736:	2c00      	cmp	r4, #0
 8006738:	d0dd      	beq.n	80066f6 <sniprintf+0x16>
 800673a:	9b02      	ldr	r3, [sp, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	e7d9      	b.n	80066f6 <sniprintf+0x16>
 8006742:	bf00      	nop
 8006744:	2000006c 	.word	0x2000006c

08006748 <siprintf>:
 8006748:	b40e      	push	{r1, r2, r3}
 800674a:	b500      	push	{lr}
 800674c:	b09c      	sub	sp, #112	; 0x70
 800674e:	ab1d      	add	r3, sp, #116	; 0x74
 8006750:	9002      	str	r0, [sp, #8]
 8006752:	9006      	str	r0, [sp, #24]
 8006754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006758:	4809      	ldr	r0, [pc, #36]	; (8006780 <siprintf+0x38>)
 800675a:	9107      	str	r1, [sp, #28]
 800675c:	9104      	str	r1, [sp, #16]
 800675e:	4909      	ldr	r1, [pc, #36]	; (8006784 <siprintf+0x3c>)
 8006760:	f853 2b04 	ldr.w	r2, [r3], #4
 8006764:	9105      	str	r1, [sp, #20]
 8006766:	6800      	ldr	r0, [r0, #0]
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	a902      	add	r1, sp, #8
 800676c:	f000 fab2 	bl	8006cd4 <_svfiprintf_r>
 8006770:	9b02      	ldr	r3, [sp, #8]
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	b01c      	add	sp, #112	; 0x70
 8006778:	f85d eb04 	ldr.w	lr, [sp], #4
 800677c:	b003      	add	sp, #12
 800677e:	4770      	bx	lr
 8006780:	2000006c 	.word	0x2000006c
 8006784:	ffff0208 	.word	0xffff0208

08006788 <__sread>:
 8006788:	b510      	push	{r4, lr}
 800678a:	460c      	mov	r4, r1
 800678c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006790:	f000 f8fc 	bl	800698c <_read_r>
 8006794:	2800      	cmp	r0, #0
 8006796:	bfab      	itete	ge
 8006798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800679a:	89a3      	ldrhlt	r3, [r4, #12]
 800679c:	181b      	addge	r3, r3, r0
 800679e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067a2:	bfac      	ite	ge
 80067a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80067a6:	81a3      	strhlt	r3, [r4, #12]
 80067a8:	bd10      	pop	{r4, pc}

080067aa <__swrite>:
 80067aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ae:	461f      	mov	r7, r3
 80067b0:	898b      	ldrh	r3, [r1, #12]
 80067b2:	05db      	lsls	r3, r3, #23
 80067b4:	4605      	mov	r5, r0
 80067b6:	460c      	mov	r4, r1
 80067b8:	4616      	mov	r6, r2
 80067ba:	d505      	bpl.n	80067c8 <__swrite+0x1e>
 80067bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c0:	2302      	movs	r3, #2
 80067c2:	2200      	movs	r2, #0
 80067c4:	f000 f8d0 	bl	8006968 <_lseek_r>
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067d2:	81a3      	strh	r3, [r4, #12]
 80067d4:	4632      	mov	r2, r6
 80067d6:	463b      	mov	r3, r7
 80067d8:	4628      	mov	r0, r5
 80067da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067de:	f000 b8e7 	b.w	80069b0 <_write_r>

080067e2 <__sseek>:
 80067e2:	b510      	push	{r4, lr}
 80067e4:	460c      	mov	r4, r1
 80067e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ea:	f000 f8bd 	bl	8006968 <_lseek_r>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	bf15      	itete	ne
 80067f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80067f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067fe:	81a3      	strheq	r3, [r4, #12]
 8006800:	bf18      	it	ne
 8006802:	81a3      	strhne	r3, [r4, #12]
 8006804:	bd10      	pop	{r4, pc}

08006806 <__sclose>:
 8006806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680a:	f000 b89d 	b.w	8006948 <_close_r>

0800680e <__swbuf_r>:
 800680e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006810:	460e      	mov	r6, r1
 8006812:	4614      	mov	r4, r2
 8006814:	4605      	mov	r5, r0
 8006816:	b118      	cbz	r0, 8006820 <__swbuf_r+0x12>
 8006818:	6a03      	ldr	r3, [r0, #32]
 800681a:	b90b      	cbnz	r3, 8006820 <__swbuf_r+0x12>
 800681c:	f7ff febc 	bl	8006598 <__sinit>
 8006820:	69a3      	ldr	r3, [r4, #24]
 8006822:	60a3      	str	r3, [r4, #8]
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	071a      	lsls	r2, r3, #28
 8006828:	d525      	bpl.n	8006876 <__swbuf_r+0x68>
 800682a:	6923      	ldr	r3, [r4, #16]
 800682c:	b31b      	cbz	r3, 8006876 <__swbuf_r+0x68>
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	6922      	ldr	r2, [r4, #16]
 8006832:	1a98      	subs	r0, r3, r2
 8006834:	6963      	ldr	r3, [r4, #20]
 8006836:	b2f6      	uxtb	r6, r6
 8006838:	4283      	cmp	r3, r0
 800683a:	4637      	mov	r7, r6
 800683c:	dc04      	bgt.n	8006848 <__swbuf_r+0x3a>
 800683e:	4621      	mov	r1, r4
 8006840:	4628      	mov	r0, r5
 8006842:	f000 fe9f 	bl	8007584 <_fflush_r>
 8006846:	b9e0      	cbnz	r0, 8006882 <__swbuf_r+0x74>
 8006848:	68a3      	ldr	r3, [r4, #8]
 800684a:	3b01      	subs	r3, #1
 800684c:	60a3      	str	r3, [r4, #8]
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	6022      	str	r2, [r4, #0]
 8006854:	701e      	strb	r6, [r3, #0]
 8006856:	6962      	ldr	r2, [r4, #20]
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	429a      	cmp	r2, r3
 800685c:	d004      	beq.n	8006868 <__swbuf_r+0x5a>
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	07db      	lsls	r3, r3, #31
 8006862:	d506      	bpl.n	8006872 <__swbuf_r+0x64>
 8006864:	2e0a      	cmp	r6, #10
 8006866:	d104      	bne.n	8006872 <__swbuf_r+0x64>
 8006868:	4621      	mov	r1, r4
 800686a:	4628      	mov	r0, r5
 800686c:	f000 fe8a 	bl	8007584 <_fflush_r>
 8006870:	b938      	cbnz	r0, 8006882 <__swbuf_r+0x74>
 8006872:	4638      	mov	r0, r7
 8006874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006876:	4621      	mov	r1, r4
 8006878:	4628      	mov	r0, r5
 800687a:	f000 f805 	bl	8006888 <__swsetup_r>
 800687e:	2800      	cmp	r0, #0
 8006880:	d0d5      	beq.n	800682e <__swbuf_r+0x20>
 8006882:	f04f 37ff 	mov.w	r7, #4294967295
 8006886:	e7f4      	b.n	8006872 <__swbuf_r+0x64>

08006888 <__swsetup_r>:
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	4b2a      	ldr	r3, [pc, #168]	; (8006934 <__swsetup_r+0xac>)
 800688c:	4605      	mov	r5, r0
 800688e:	6818      	ldr	r0, [r3, #0]
 8006890:	460c      	mov	r4, r1
 8006892:	b118      	cbz	r0, 800689c <__swsetup_r+0x14>
 8006894:	6a03      	ldr	r3, [r0, #32]
 8006896:	b90b      	cbnz	r3, 800689c <__swsetup_r+0x14>
 8006898:	f7ff fe7e 	bl	8006598 <__sinit>
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068a2:	0718      	lsls	r0, r3, #28
 80068a4:	d422      	bmi.n	80068ec <__swsetup_r+0x64>
 80068a6:	06d9      	lsls	r1, r3, #27
 80068a8:	d407      	bmi.n	80068ba <__swsetup_r+0x32>
 80068aa:	2309      	movs	r3, #9
 80068ac:	602b      	str	r3, [r5, #0]
 80068ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068b2:	81a3      	strh	r3, [r4, #12]
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295
 80068b8:	e034      	b.n	8006924 <__swsetup_r+0x9c>
 80068ba:	0758      	lsls	r0, r3, #29
 80068bc:	d512      	bpl.n	80068e4 <__swsetup_r+0x5c>
 80068be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068c0:	b141      	cbz	r1, 80068d4 <__swsetup_r+0x4c>
 80068c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068c6:	4299      	cmp	r1, r3
 80068c8:	d002      	beq.n	80068d0 <__swsetup_r+0x48>
 80068ca:	4628      	mov	r0, r5
 80068cc:	f000 f8b0 	bl	8006a30 <_free_r>
 80068d0:	2300      	movs	r3, #0
 80068d2:	6363      	str	r3, [r4, #52]	; 0x34
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068da:	81a3      	strh	r3, [r4, #12]
 80068dc:	2300      	movs	r3, #0
 80068de:	6063      	str	r3, [r4, #4]
 80068e0:	6923      	ldr	r3, [r4, #16]
 80068e2:	6023      	str	r3, [r4, #0]
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	f043 0308 	orr.w	r3, r3, #8
 80068ea:	81a3      	strh	r3, [r4, #12]
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	b94b      	cbnz	r3, 8006904 <__swsetup_r+0x7c>
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068fa:	d003      	beq.n	8006904 <__swsetup_r+0x7c>
 80068fc:	4621      	mov	r1, r4
 80068fe:	4628      	mov	r0, r5
 8006900:	f000 fe8e 	bl	8007620 <__smakebuf_r>
 8006904:	89a0      	ldrh	r0, [r4, #12]
 8006906:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800690a:	f010 0301 	ands.w	r3, r0, #1
 800690e:	d00a      	beq.n	8006926 <__swsetup_r+0x9e>
 8006910:	2300      	movs	r3, #0
 8006912:	60a3      	str	r3, [r4, #8]
 8006914:	6963      	ldr	r3, [r4, #20]
 8006916:	425b      	negs	r3, r3
 8006918:	61a3      	str	r3, [r4, #24]
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	b943      	cbnz	r3, 8006930 <__swsetup_r+0xa8>
 800691e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006922:	d1c4      	bne.n	80068ae <__swsetup_r+0x26>
 8006924:	bd38      	pop	{r3, r4, r5, pc}
 8006926:	0781      	lsls	r1, r0, #30
 8006928:	bf58      	it	pl
 800692a:	6963      	ldrpl	r3, [r4, #20]
 800692c:	60a3      	str	r3, [r4, #8]
 800692e:	e7f4      	b.n	800691a <__swsetup_r+0x92>
 8006930:	2000      	movs	r0, #0
 8006932:	e7f7      	b.n	8006924 <__swsetup_r+0x9c>
 8006934:	2000006c 	.word	0x2000006c

08006938 <memset>:
 8006938:	4402      	add	r2, r0
 800693a:	4603      	mov	r3, r0
 800693c:	4293      	cmp	r3, r2
 800693e:	d100      	bne.n	8006942 <memset+0xa>
 8006940:	4770      	bx	lr
 8006942:	f803 1b01 	strb.w	r1, [r3], #1
 8006946:	e7f9      	b.n	800693c <memset+0x4>

08006948 <_close_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4d06      	ldr	r5, [pc, #24]	; (8006964 <_close_r+0x1c>)
 800694c:	2300      	movs	r3, #0
 800694e:	4604      	mov	r4, r0
 8006950:	4608      	mov	r0, r1
 8006952:	602b      	str	r3, [r5, #0]
 8006954:	f7fa fe07 	bl	8001566 <_close>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d102      	bne.n	8006962 <_close_r+0x1a>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	b103      	cbz	r3, 8006962 <_close_r+0x1a>
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	20000ac4 	.word	0x20000ac4

08006968 <_lseek_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4d07      	ldr	r5, [pc, #28]	; (8006988 <_lseek_r+0x20>)
 800696c:	4604      	mov	r4, r0
 800696e:	4608      	mov	r0, r1
 8006970:	4611      	mov	r1, r2
 8006972:	2200      	movs	r2, #0
 8006974:	602a      	str	r2, [r5, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	f7fa fe1c 	bl	80015b4 <_lseek>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d102      	bne.n	8006986 <_lseek_r+0x1e>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	b103      	cbz	r3, 8006986 <_lseek_r+0x1e>
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	20000ac4 	.word	0x20000ac4

0800698c <_read_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4d07      	ldr	r5, [pc, #28]	; (80069ac <_read_r+0x20>)
 8006990:	4604      	mov	r4, r0
 8006992:	4608      	mov	r0, r1
 8006994:	4611      	mov	r1, r2
 8006996:	2200      	movs	r2, #0
 8006998:	602a      	str	r2, [r5, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f7fa fdc6 	bl	800152c <_read>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d102      	bne.n	80069aa <_read_r+0x1e>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	b103      	cbz	r3, 80069aa <_read_r+0x1e>
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	20000ac4 	.word	0x20000ac4

080069b0 <_write_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4d07      	ldr	r5, [pc, #28]	; (80069d0 <_write_r+0x20>)
 80069b4:	4604      	mov	r4, r0
 80069b6:	4608      	mov	r0, r1
 80069b8:	4611      	mov	r1, r2
 80069ba:	2200      	movs	r2, #0
 80069bc:	602a      	str	r2, [r5, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	f7f9 ff0a 	bl	80007d8 <_write>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d102      	bne.n	80069ce <_write_r+0x1e>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	b103      	cbz	r3, 80069ce <_write_r+0x1e>
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	20000ac4 	.word	0x20000ac4

080069d4 <__errno>:
 80069d4:	4b01      	ldr	r3, [pc, #4]	; (80069dc <__errno+0x8>)
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	2000006c 	.word	0x2000006c

080069e0 <__libc_init_array>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	4d0d      	ldr	r5, [pc, #52]	; (8006a18 <__libc_init_array+0x38>)
 80069e4:	4c0d      	ldr	r4, [pc, #52]	; (8006a1c <__libc_init_array+0x3c>)
 80069e6:	1b64      	subs	r4, r4, r5
 80069e8:	10a4      	asrs	r4, r4, #2
 80069ea:	2600      	movs	r6, #0
 80069ec:	42a6      	cmp	r6, r4
 80069ee:	d109      	bne.n	8006a04 <__libc_init_array+0x24>
 80069f0:	4d0b      	ldr	r5, [pc, #44]	; (8006a20 <__libc_init_array+0x40>)
 80069f2:	4c0c      	ldr	r4, [pc, #48]	; (8006a24 <__libc_init_array+0x44>)
 80069f4:	f000 fee2 	bl	80077bc <_init>
 80069f8:	1b64      	subs	r4, r4, r5
 80069fa:	10a4      	asrs	r4, r4, #2
 80069fc:	2600      	movs	r6, #0
 80069fe:	42a6      	cmp	r6, r4
 8006a00:	d105      	bne.n	8006a0e <__libc_init_array+0x2e>
 8006a02:	bd70      	pop	{r4, r5, r6, pc}
 8006a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a08:	4798      	blx	r3
 8006a0a:	3601      	adds	r6, #1
 8006a0c:	e7ee      	b.n	80069ec <__libc_init_array+0xc>
 8006a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a12:	4798      	blx	r3
 8006a14:	3601      	adds	r6, #1
 8006a16:	e7f2      	b.n	80069fe <__libc_init_array+0x1e>
 8006a18:	080078c4 	.word	0x080078c4
 8006a1c:	080078c4 	.word	0x080078c4
 8006a20:	080078c4 	.word	0x080078c4
 8006a24:	080078c8 	.word	0x080078c8

08006a28 <__retarget_lock_init_recursive>:
 8006a28:	4770      	bx	lr

08006a2a <__retarget_lock_acquire_recursive>:
 8006a2a:	4770      	bx	lr

08006a2c <__retarget_lock_release_recursive>:
 8006a2c:	4770      	bx	lr
	...

08006a30 <_free_r>:
 8006a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a32:	2900      	cmp	r1, #0
 8006a34:	d044      	beq.n	8006ac0 <_free_r+0x90>
 8006a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a3a:	9001      	str	r0, [sp, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8006a42:	bfb8      	it	lt
 8006a44:	18e4      	addlt	r4, r4, r3
 8006a46:	f000 f8df 	bl	8006c08 <__malloc_lock>
 8006a4a:	4a1e      	ldr	r2, [pc, #120]	; (8006ac4 <_free_r+0x94>)
 8006a4c:	9801      	ldr	r0, [sp, #4]
 8006a4e:	6813      	ldr	r3, [r2, #0]
 8006a50:	b933      	cbnz	r3, 8006a60 <_free_r+0x30>
 8006a52:	6063      	str	r3, [r4, #4]
 8006a54:	6014      	str	r4, [r2, #0]
 8006a56:	b003      	add	sp, #12
 8006a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a5c:	f000 b8da 	b.w	8006c14 <__malloc_unlock>
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	d908      	bls.n	8006a76 <_free_r+0x46>
 8006a64:	6825      	ldr	r5, [r4, #0]
 8006a66:	1961      	adds	r1, r4, r5
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	bf01      	itttt	eq
 8006a6c:	6819      	ldreq	r1, [r3, #0]
 8006a6e:	685b      	ldreq	r3, [r3, #4]
 8006a70:	1949      	addeq	r1, r1, r5
 8006a72:	6021      	streq	r1, [r4, #0]
 8006a74:	e7ed      	b.n	8006a52 <_free_r+0x22>
 8006a76:	461a      	mov	r2, r3
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	b10b      	cbz	r3, 8006a80 <_free_r+0x50>
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	d9fa      	bls.n	8006a76 <_free_r+0x46>
 8006a80:	6811      	ldr	r1, [r2, #0]
 8006a82:	1855      	adds	r5, r2, r1
 8006a84:	42a5      	cmp	r5, r4
 8006a86:	d10b      	bne.n	8006aa0 <_free_r+0x70>
 8006a88:	6824      	ldr	r4, [r4, #0]
 8006a8a:	4421      	add	r1, r4
 8006a8c:	1854      	adds	r4, r2, r1
 8006a8e:	42a3      	cmp	r3, r4
 8006a90:	6011      	str	r1, [r2, #0]
 8006a92:	d1e0      	bne.n	8006a56 <_free_r+0x26>
 8006a94:	681c      	ldr	r4, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	6053      	str	r3, [r2, #4]
 8006a9a:	440c      	add	r4, r1
 8006a9c:	6014      	str	r4, [r2, #0]
 8006a9e:	e7da      	b.n	8006a56 <_free_r+0x26>
 8006aa0:	d902      	bls.n	8006aa8 <_free_r+0x78>
 8006aa2:	230c      	movs	r3, #12
 8006aa4:	6003      	str	r3, [r0, #0]
 8006aa6:	e7d6      	b.n	8006a56 <_free_r+0x26>
 8006aa8:	6825      	ldr	r5, [r4, #0]
 8006aaa:	1961      	adds	r1, r4, r5
 8006aac:	428b      	cmp	r3, r1
 8006aae:	bf04      	itt	eq
 8006ab0:	6819      	ldreq	r1, [r3, #0]
 8006ab2:	685b      	ldreq	r3, [r3, #4]
 8006ab4:	6063      	str	r3, [r4, #4]
 8006ab6:	bf04      	itt	eq
 8006ab8:	1949      	addeq	r1, r1, r5
 8006aba:	6021      	streq	r1, [r4, #0]
 8006abc:	6054      	str	r4, [r2, #4]
 8006abe:	e7ca      	b.n	8006a56 <_free_r+0x26>
 8006ac0:	b003      	add	sp, #12
 8006ac2:	bd30      	pop	{r4, r5, pc}
 8006ac4:	20000acc 	.word	0x20000acc

08006ac8 <sbrk_aligned>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	4e0e      	ldr	r6, [pc, #56]	; (8006b04 <sbrk_aligned+0x3c>)
 8006acc:	460c      	mov	r4, r1
 8006ace:	6831      	ldr	r1, [r6, #0]
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	b911      	cbnz	r1, 8006ada <sbrk_aligned+0x12>
 8006ad4:	f000 fe1c 	bl	8007710 <_sbrk_r>
 8006ad8:	6030      	str	r0, [r6, #0]
 8006ada:	4621      	mov	r1, r4
 8006adc:	4628      	mov	r0, r5
 8006ade:	f000 fe17 	bl	8007710 <_sbrk_r>
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	d00a      	beq.n	8006afc <sbrk_aligned+0x34>
 8006ae6:	1cc4      	adds	r4, r0, #3
 8006ae8:	f024 0403 	bic.w	r4, r4, #3
 8006aec:	42a0      	cmp	r0, r4
 8006aee:	d007      	beq.n	8006b00 <sbrk_aligned+0x38>
 8006af0:	1a21      	subs	r1, r4, r0
 8006af2:	4628      	mov	r0, r5
 8006af4:	f000 fe0c 	bl	8007710 <_sbrk_r>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d101      	bne.n	8006b00 <sbrk_aligned+0x38>
 8006afc:	f04f 34ff 	mov.w	r4, #4294967295
 8006b00:	4620      	mov	r0, r4
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	20000ad0 	.word	0x20000ad0

08006b08 <_malloc_r>:
 8006b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b0c:	1ccd      	adds	r5, r1, #3
 8006b0e:	f025 0503 	bic.w	r5, r5, #3
 8006b12:	3508      	adds	r5, #8
 8006b14:	2d0c      	cmp	r5, #12
 8006b16:	bf38      	it	cc
 8006b18:	250c      	movcc	r5, #12
 8006b1a:	2d00      	cmp	r5, #0
 8006b1c:	4607      	mov	r7, r0
 8006b1e:	db01      	blt.n	8006b24 <_malloc_r+0x1c>
 8006b20:	42a9      	cmp	r1, r5
 8006b22:	d905      	bls.n	8006b30 <_malloc_r+0x28>
 8006b24:	230c      	movs	r3, #12
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	2600      	movs	r6, #0
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c04 <_malloc_r+0xfc>
 8006b34:	f000 f868 	bl	8006c08 <__malloc_lock>
 8006b38:	f8d8 3000 	ldr.w	r3, [r8]
 8006b3c:	461c      	mov	r4, r3
 8006b3e:	bb5c      	cbnz	r4, 8006b98 <_malloc_r+0x90>
 8006b40:	4629      	mov	r1, r5
 8006b42:	4638      	mov	r0, r7
 8006b44:	f7ff ffc0 	bl	8006ac8 <sbrk_aligned>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	d155      	bne.n	8006bfa <_malloc_r+0xf2>
 8006b4e:	f8d8 4000 	ldr.w	r4, [r8]
 8006b52:	4626      	mov	r6, r4
 8006b54:	2e00      	cmp	r6, #0
 8006b56:	d145      	bne.n	8006be4 <_malloc_r+0xdc>
 8006b58:	2c00      	cmp	r4, #0
 8006b5a:	d048      	beq.n	8006bee <_malloc_r+0xe6>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	4631      	mov	r1, r6
 8006b60:	4638      	mov	r0, r7
 8006b62:	eb04 0903 	add.w	r9, r4, r3
 8006b66:	f000 fdd3 	bl	8007710 <_sbrk_r>
 8006b6a:	4581      	cmp	r9, r0
 8006b6c:	d13f      	bne.n	8006bee <_malloc_r+0xe6>
 8006b6e:	6821      	ldr	r1, [r4, #0]
 8006b70:	1a6d      	subs	r5, r5, r1
 8006b72:	4629      	mov	r1, r5
 8006b74:	4638      	mov	r0, r7
 8006b76:	f7ff ffa7 	bl	8006ac8 <sbrk_aligned>
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d037      	beq.n	8006bee <_malloc_r+0xe6>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	442b      	add	r3, r5
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	f8d8 3000 	ldr.w	r3, [r8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d038      	beq.n	8006bfe <_malloc_r+0xf6>
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	42a2      	cmp	r2, r4
 8006b90:	d12b      	bne.n	8006bea <_malloc_r+0xe2>
 8006b92:	2200      	movs	r2, #0
 8006b94:	605a      	str	r2, [r3, #4]
 8006b96:	e00f      	b.n	8006bb8 <_malloc_r+0xb0>
 8006b98:	6822      	ldr	r2, [r4, #0]
 8006b9a:	1b52      	subs	r2, r2, r5
 8006b9c:	d41f      	bmi.n	8006bde <_malloc_r+0xd6>
 8006b9e:	2a0b      	cmp	r2, #11
 8006ba0:	d917      	bls.n	8006bd2 <_malloc_r+0xca>
 8006ba2:	1961      	adds	r1, r4, r5
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	6025      	str	r5, [r4, #0]
 8006ba8:	bf18      	it	ne
 8006baa:	6059      	strne	r1, [r3, #4]
 8006bac:	6863      	ldr	r3, [r4, #4]
 8006bae:	bf08      	it	eq
 8006bb0:	f8c8 1000 	streq.w	r1, [r8]
 8006bb4:	5162      	str	r2, [r4, r5]
 8006bb6:	604b      	str	r3, [r1, #4]
 8006bb8:	4638      	mov	r0, r7
 8006bba:	f104 060b 	add.w	r6, r4, #11
 8006bbe:	f000 f829 	bl	8006c14 <__malloc_unlock>
 8006bc2:	f026 0607 	bic.w	r6, r6, #7
 8006bc6:	1d23      	adds	r3, r4, #4
 8006bc8:	1af2      	subs	r2, r6, r3
 8006bca:	d0ae      	beq.n	8006b2a <_malloc_r+0x22>
 8006bcc:	1b9b      	subs	r3, r3, r6
 8006bce:	50a3      	str	r3, [r4, r2]
 8006bd0:	e7ab      	b.n	8006b2a <_malloc_r+0x22>
 8006bd2:	42a3      	cmp	r3, r4
 8006bd4:	6862      	ldr	r2, [r4, #4]
 8006bd6:	d1dd      	bne.n	8006b94 <_malloc_r+0x8c>
 8006bd8:	f8c8 2000 	str.w	r2, [r8]
 8006bdc:	e7ec      	b.n	8006bb8 <_malloc_r+0xb0>
 8006bde:	4623      	mov	r3, r4
 8006be0:	6864      	ldr	r4, [r4, #4]
 8006be2:	e7ac      	b.n	8006b3e <_malloc_r+0x36>
 8006be4:	4634      	mov	r4, r6
 8006be6:	6876      	ldr	r6, [r6, #4]
 8006be8:	e7b4      	b.n	8006b54 <_malloc_r+0x4c>
 8006bea:	4613      	mov	r3, r2
 8006bec:	e7cc      	b.n	8006b88 <_malloc_r+0x80>
 8006bee:	230c      	movs	r3, #12
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	f000 f80e 	bl	8006c14 <__malloc_unlock>
 8006bf8:	e797      	b.n	8006b2a <_malloc_r+0x22>
 8006bfa:	6025      	str	r5, [r4, #0]
 8006bfc:	e7dc      	b.n	8006bb8 <_malloc_r+0xb0>
 8006bfe:	605b      	str	r3, [r3, #4]
 8006c00:	deff      	udf	#255	; 0xff
 8006c02:	bf00      	nop
 8006c04:	20000acc 	.word	0x20000acc

08006c08 <__malloc_lock>:
 8006c08:	4801      	ldr	r0, [pc, #4]	; (8006c10 <__malloc_lock+0x8>)
 8006c0a:	f7ff bf0e 	b.w	8006a2a <__retarget_lock_acquire_recursive>
 8006c0e:	bf00      	nop
 8006c10:	20000ac8 	.word	0x20000ac8

08006c14 <__malloc_unlock>:
 8006c14:	4801      	ldr	r0, [pc, #4]	; (8006c1c <__malloc_unlock+0x8>)
 8006c16:	f7ff bf09 	b.w	8006a2c <__retarget_lock_release_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	20000ac8 	.word	0x20000ac8

08006c20 <__ssputs_r>:
 8006c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c24:	688e      	ldr	r6, [r1, #8]
 8006c26:	461f      	mov	r7, r3
 8006c28:	42be      	cmp	r6, r7
 8006c2a:	680b      	ldr	r3, [r1, #0]
 8006c2c:	4682      	mov	sl, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	4690      	mov	r8, r2
 8006c32:	d82c      	bhi.n	8006c8e <__ssputs_r+0x6e>
 8006c34:	898a      	ldrh	r2, [r1, #12]
 8006c36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c3a:	d026      	beq.n	8006c8a <__ssputs_r+0x6a>
 8006c3c:	6965      	ldr	r5, [r4, #20]
 8006c3e:	6909      	ldr	r1, [r1, #16]
 8006c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c44:	eba3 0901 	sub.w	r9, r3, r1
 8006c48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c4c:	1c7b      	adds	r3, r7, #1
 8006c4e:	444b      	add	r3, r9
 8006c50:	106d      	asrs	r5, r5, #1
 8006c52:	429d      	cmp	r5, r3
 8006c54:	bf38      	it	cc
 8006c56:	461d      	movcc	r5, r3
 8006c58:	0553      	lsls	r3, r2, #21
 8006c5a:	d527      	bpl.n	8006cac <__ssputs_r+0x8c>
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	f7ff ff53 	bl	8006b08 <_malloc_r>
 8006c62:	4606      	mov	r6, r0
 8006c64:	b360      	cbz	r0, 8006cc0 <__ssputs_r+0xa0>
 8006c66:	6921      	ldr	r1, [r4, #16]
 8006c68:	464a      	mov	r2, r9
 8006c6a:	f000 fd61 	bl	8007730 <memcpy>
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c78:	81a3      	strh	r3, [r4, #12]
 8006c7a:	6126      	str	r6, [r4, #16]
 8006c7c:	6165      	str	r5, [r4, #20]
 8006c7e:	444e      	add	r6, r9
 8006c80:	eba5 0509 	sub.w	r5, r5, r9
 8006c84:	6026      	str	r6, [r4, #0]
 8006c86:	60a5      	str	r5, [r4, #8]
 8006c88:	463e      	mov	r6, r7
 8006c8a:	42be      	cmp	r6, r7
 8006c8c:	d900      	bls.n	8006c90 <__ssputs_r+0x70>
 8006c8e:	463e      	mov	r6, r7
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	4632      	mov	r2, r6
 8006c94:	4641      	mov	r1, r8
 8006c96:	f000 fcff 	bl	8007698 <memmove>
 8006c9a:	68a3      	ldr	r3, [r4, #8]
 8006c9c:	1b9b      	subs	r3, r3, r6
 8006c9e:	60a3      	str	r3, [r4, #8]
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	4433      	add	r3, r6
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cac:	462a      	mov	r2, r5
 8006cae:	f000 fd4d 	bl	800774c <_realloc_r>
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d1e0      	bne.n	8006c7a <__ssputs_r+0x5a>
 8006cb8:	6921      	ldr	r1, [r4, #16]
 8006cba:	4650      	mov	r0, sl
 8006cbc:	f7ff feb8 	bl	8006a30 <_free_r>
 8006cc0:	230c      	movs	r3, #12
 8006cc2:	f8ca 3000 	str.w	r3, [sl]
 8006cc6:	89a3      	ldrh	r3, [r4, #12]
 8006cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ccc:	81a3      	strh	r3, [r4, #12]
 8006cce:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd2:	e7e9      	b.n	8006ca8 <__ssputs_r+0x88>

08006cd4 <_svfiprintf_r>:
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	4698      	mov	r8, r3
 8006cda:	898b      	ldrh	r3, [r1, #12]
 8006cdc:	061b      	lsls	r3, r3, #24
 8006cde:	b09d      	sub	sp, #116	; 0x74
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	4614      	mov	r4, r2
 8006ce6:	d50e      	bpl.n	8006d06 <_svfiprintf_r+0x32>
 8006ce8:	690b      	ldr	r3, [r1, #16]
 8006cea:	b963      	cbnz	r3, 8006d06 <_svfiprintf_r+0x32>
 8006cec:	2140      	movs	r1, #64	; 0x40
 8006cee:	f7ff ff0b 	bl	8006b08 <_malloc_r>
 8006cf2:	6028      	str	r0, [r5, #0]
 8006cf4:	6128      	str	r0, [r5, #16]
 8006cf6:	b920      	cbnz	r0, 8006d02 <_svfiprintf_r+0x2e>
 8006cf8:	230c      	movs	r3, #12
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	e0d0      	b.n	8006ea4 <_svfiprintf_r+0x1d0>
 8006d02:	2340      	movs	r3, #64	; 0x40
 8006d04:	616b      	str	r3, [r5, #20]
 8006d06:	2300      	movs	r3, #0
 8006d08:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0a:	2320      	movs	r3, #32
 8006d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d14:	2330      	movs	r3, #48	; 0x30
 8006d16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006ebc <_svfiprintf_r+0x1e8>
 8006d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d1e:	f04f 0901 	mov.w	r9, #1
 8006d22:	4623      	mov	r3, r4
 8006d24:	469a      	mov	sl, r3
 8006d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d2a:	b10a      	cbz	r2, 8006d30 <_svfiprintf_r+0x5c>
 8006d2c:	2a25      	cmp	r2, #37	; 0x25
 8006d2e:	d1f9      	bne.n	8006d24 <_svfiprintf_r+0x50>
 8006d30:	ebba 0b04 	subs.w	fp, sl, r4
 8006d34:	d00b      	beq.n	8006d4e <_svfiprintf_r+0x7a>
 8006d36:	465b      	mov	r3, fp
 8006d38:	4622      	mov	r2, r4
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	f7ff ff6f 	bl	8006c20 <__ssputs_r>
 8006d42:	3001      	adds	r0, #1
 8006d44:	f000 80a9 	beq.w	8006e9a <_svfiprintf_r+0x1c6>
 8006d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d4a:	445a      	add	r2, fp
 8006d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 80a1 	beq.w	8006e9a <_svfiprintf_r+0x1c6>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d62:	f10a 0a01 	add.w	sl, sl, #1
 8006d66:	9304      	str	r3, [sp, #16]
 8006d68:	9307      	str	r3, [sp, #28]
 8006d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d70:	4654      	mov	r4, sl
 8006d72:	2205      	movs	r2, #5
 8006d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d78:	4850      	ldr	r0, [pc, #320]	; (8006ebc <_svfiprintf_r+0x1e8>)
 8006d7a:	f7f9 fa41 	bl	8000200 <memchr>
 8006d7e:	9a04      	ldr	r2, [sp, #16]
 8006d80:	b9d8      	cbnz	r0, 8006dba <_svfiprintf_r+0xe6>
 8006d82:	06d0      	lsls	r0, r2, #27
 8006d84:	bf44      	itt	mi
 8006d86:	2320      	movmi	r3, #32
 8006d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d8c:	0711      	lsls	r1, r2, #28
 8006d8e:	bf44      	itt	mi
 8006d90:	232b      	movmi	r3, #43	; 0x2b
 8006d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d96:	f89a 3000 	ldrb.w	r3, [sl]
 8006d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d9c:	d015      	beq.n	8006dca <_svfiprintf_r+0xf6>
 8006d9e:	9a07      	ldr	r2, [sp, #28]
 8006da0:	4654      	mov	r4, sl
 8006da2:	2000      	movs	r0, #0
 8006da4:	f04f 0c0a 	mov.w	ip, #10
 8006da8:	4621      	mov	r1, r4
 8006daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dae:	3b30      	subs	r3, #48	; 0x30
 8006db0:	2b09      	cmp	r3, #9
 8006db2:	d94d      	bls.n	8006e50 <_svfiprintf_r+0x17c>
 8006db4:	b1b0      	cbz	r0, 8006de4 <_svfiprintf_r+0x110>
 8006db6:	9207      	str	r2, [sp, #28]
 8006db8:	e014      	b.n	8006de4 <_svfiprintf_r+0x110>
 8006dba:	eba0 0308 	sub.w	r3, r0, r8
 8006dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	9304      	str	r3, [sp, #16]
 8006dc6:	46a2      	mov	sl, r4
 8006dc8:	e7d2      	b.n	8006d70 <_svfiprintf_r+0x9c>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	1d19      	adds	r1, r3, #4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	9103      	str	r1, [sp, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	bfbb      	ittet	lt
 8006dd6:	425b      	neglt	r3, r3
 8006dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8006ddc:	9307      	strge	r3, [sp, #28]
 8006dde:	9307      	strlt	r3, [sp, #28]
 8006de0:	bfb8      	it	lt
 8006de2:	9204      	strlt	r2, [sp, #16]
 8006de4:	7823      	ldrb	r3, [r4, #0]
 8006de6:	2b2e      	cmp	r3, #46	; 0x2e
 8006de8:	d10c      	bne.n	8006e04 <_svfiprintf_r+0x130>
 8006dea:	7863      	ldrb	r3, [r4, #1]
 8006dec:	2b2a      	cmp	r3, #42	; 0x2a
 8006dee:	d134      	bne.n	8006e5a <_svfiprintf_r+0x186>
 8006df0:	9b03      	ldr	r3, [sp, #12]
 8006df2:	1d1a      	adds	r2, r3, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	9203      	str	r2, [sp, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bfb8      	it	lt
 8006dfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e00:	3402      	adds	r4, #2
 8006e02:	9305      	str	r3, [sp, #20]
 8006e04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006ecc <_svfiprintf_r+0x1f8>
 8006e08:	7821      	ldrb	r1, [r4, #0]
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	4650      	mov	r0, sl
 8006e0e:	f7f9 f9f7 	bl	8000200 <memchr>
 8006e12:	b138      	cbz	r0, 8006e24 <_svfiprintf_r+0x150>
 8006e14:	9b04      	ldr	r3, [sp, #16]
 8006e16:	eba0 000a 	sub.w	r0, r0, sl
 8006e1a:	2240      	movs	r2, #64	; 0x40
 8006e1c:	4082      	lsls	r2, r0
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	3401      	adds	r4, #1
 8006e22:	9304      	str	r3, [sp, #16]
 8006e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e28:	4825      	ldr	r0, [pc, #148]	; (8006ec0 <_svfiprintf_r+0x1ec>)
 8006e2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e2e:	2206      	movs	r2, #6
 8006e30:	f7f9 f9e6 	bl	8000200 <memchr>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d038      	beq.n	8006eaa <_svfiprintf_r+0x1d6>
 8006e38:	4b22      	ldr	r3, [pc, #136]	; (8006ec4 <_svfiprintf_r+0x1f0>)
 8006e3a:	bb1b      	cbnz	r3, 8006e84 <_svfiprintf_r+0x1b0>
 8006e3c:	9b03      	ldr	r3, [sp, #12]
 8006e3e:	3307      	adds	r3, #7
 8006e40:	f023 0307 	bic.w	r3, r3, #7
 8006e44:	3308      	adds	r3, #8
 8006e46:	9303      	str	r3, [sp, #12]
 8006e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4a:	4433      	add	r3, r6
 8006e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e4e:	e768      	b.n	8006d22 <_svfiprintf_r+0x4e>
 8006e50:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e54:	460c      	mov	r4, r1
 8006e56:	2001      	movs	r0, #1
 8006e58:	e7a6      	b.n	8006da8 <_svfiprintf_r+0xd4>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	3401      	adds	r4, #1
 8006e5e:	9305      	str	r3, [sp, #20]
 8006e60:	4619      	mov	r1, r3
 8006e62:	f04f 0c0a 	mov.w	ip, #10
 8006e66:	4620      	mov	r0, r4
 8006e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e6c:	3a30      	subs	r2, #48	; 0x30
 8006e6e:	2a09      	cmp	r2, #9
 8006e70:	d903      	bls.n	8006e7a <_svfiprintf_r+0x1a6>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0c6      	beq.n	8006e04 <_svfiprintf_r+0x130>
 8006e76:	9105      	str	r1, [sp, #20]
 8006e78:	e7c4      	b.n	8006e04 <_svfiprintf_r+0x130>
 8006e7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e7e:	4604      	mov	r4, r0
 8006e80:	2301      	movs	r3, #1
 8006e82:	e7f0      	b.n	8006e66 <_svfiprintf_r+0x192>
 8006e84:	ab03      	add	r3, sp, #12
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	462a      	mov	r2, r5
 8006e8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ec8 <_svfiprintf_r+0x1f4>)
 8006e8c:	a904      	add	r1, sp, #16
 8006e8e:	4638      	mov	r0, r7
 8006e90:	f3af 8000 	nop.w
 8006e94:	1c42      	adds	r2, r0, #1
 8006e96:	4606      	mov	r6, r0
 8006e98:	d1d6      	bne.n	8006e48 <_svfiprintf_r+0x174>
 8006e9a:	89ab      	ldrh	r3, [r5, #12]
 8006e9c:	065b      	lsls	r3, r3, #25
 8006e9e:	f53f af2d 	bmi.w	8006cfc <_svfiprintf_r+0x28>
 8006ea2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ea4:	b01d      	add	sp, #116	; 0x74
 8006ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eaa:	ab03      	add	r3, sp, #12
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	462a      	mov	r2, r5
 8006eb0:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <_svfiprintf_r+0x1f4>)
 8006eb2:	a904      	add	r1, sp, #16
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	f000 f9bd 	bl	8007234 <_printf_i>
 8006eba:	e7eb      	b.n	8006e94 <_svfiprintf_r+0x1c0>
 8006ebc:	08007888 	.word	0x08007888
 8006ec0:	08007892 	.word	0x08007892
 8006ec4:	00000000 	.word	0x00000000
 8006ec8:	08006c21 	.word	0x08006c21
 8006ecc:	0800788e 	.word	0x0800788e

08006ed0 <__sfputc_r>:
 8006ed0:	6893      	ldr	r3, [r2, #8]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	b410      	push	{r4}
 8006ed8:	6093      	str	r3, [r2, #8]
 8006eda:	da08      	bge.n	8006eee <__sfputc_r+0x1e>
 8006edc:	6994      	ldr	r4, [r2, #24]
 8006ede:	42a3      	cmp	r3, r4
 8006ee0:	db01      	blt.n	8006ee6 <__sfputc_r+0x16>
 8006ee2:	290a      	cmp	r1, #10
 8006ee4:	d103      	bne.n	8006eee <__sfputc_r+0x1e>
 8006ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eea:	f7ff bc90 	b.w	800680e <__swbuf_r>
 8006eee:	6813      	ldr	r3, [r2, #0]
 8006ef0:	1c58      	adds	r0, r3, #1
 8006ef2:	6010      	str	r0, [r2, #0]
 8006ef4:	7019      	strb	r1, [r3, #0]
 8006ef6:	4608      	mov	r0, r1
 8006ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <__sfputs_r>:
 8006efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f00:	4606      	mov	r6, r0
 8006f02:	460f      	mov	r7, r1
 8006f04:	4614      	mov	r4, r2
 8006f06:	18d5      	adds	r5, r2, r3
 8006f08:	42ac      	cmp	r4, r5
 8006f0a:	d101      	bne.n	8006f10 <__sfputs_r+0x12>
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	e007      	b.n	8006f20 <__sfputs_r+0x22>
 8006f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f14:	463a      	mov	r2, r7
 8006f16:	4630      	mov	r0, r6
 8006f18:	f7ff ffda 	bl	8006ed0 <__sfputc_r>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d1f3      	bne.n	8006f08 <__sfputs_r+0xa>
 8006f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f24 <_vfiprintf_r>:
 8006f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	460d      	mov	r5, r1
 8006f2a:	b09d      	sub	sp, #116	; 0x74
 8006f2c:	4614      	mov	r4, r2
 8006f2e:	4698      	mov	r8, r3
 8006f30:	4606      	mov	r6, r0
 8006f32:	b118      	cbz	r0, 8006f3c <_vfiprintf_r+0x18>
 8006f34:	6a03      	ldr	r3, [r0, #32]
 8006f36:	b90b      	cbnz	r3, 8006f3c <_vfiprintf_r+0x18>
 8006f38:	f7ff fb2e 	bl	8006598 <__sinit>
 8006f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f3e:	07d9      	lsls	r1, r3, #31
 8006f40:	d405      	bmi.n	8006f4e <_vfiprintf_r+0x2a>
 8006f42:	89ab      	ldrh	r3, [r5, #12]
 8006f44:	059a      	lsls	r2, r3, #22
 8006f46:	d402      	bmi.n	8006f4e <_vfiprintf_r+0x2a>
 8006f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f4a:	f7ff fd6e 	bl	8006a2a <__retarget_lock_acquire_recursive>
 8006f4e:	89ab      	ldrh	r3, [r5, #12]
 8006f50:	071b      	lsls	r3, r3, #28
 8006f52:	d501      	bpl.n	8006f58 <_vfiprintf_r+0x34>
 8006f54:	692b      	ldr	r3, [r5, #16]
 8006f56:	b99b      	cbnz	r3, 8006f80 <_vfiprintf_r+0x5c>
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f7ff fc94 	bl	8006888 <__swsetup_r>
 8006f60:	b170      	cbz	r0, 8006f80 <_vfiprintf_r+0x5c>
 8006f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f64:	07dc      	lsls	r4, r3, #31
 8006f66:	d504      	bpl.n	8006f72 <_vfiprintf_r+0x4e>
 8006f68:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6c:	b01d      	add	sp, #116	; 0x74
 8006f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f72:	89ab      	ldrh	r3, [r5, #12]
 8006f74:	0598      	lsls	r0, r3, #22
 8006f76:	d4f7      	bmi.n	8006f68 <_vfiprintf_r+0x44>
 8006f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f7a:	f7ff fd57 	bl	8006a2c <__retarget_lock_release_recursive>
 8006f7e:	e7f3      	b.n	8006f68 <_vfiprintf_r+0x44>
 8006f80:	2300      	movs	r3, #0
 8006f82:	9309      	str	r3, [sp, #36]	; 0x24
 8006f84:	2320      	movs	r3, #32
 8006f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f8e:	2330      	movs	r3, #48	; 0x30
 8006f90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007144 <_vfiprintf_r+0x220>
 8006f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f98:	f04f 0901 	mov.w	r9, #1
 8006f9c:	4623      	mov	r3, r4
 8006f9e:	469a      	mov	sl, r3
 8006fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fa4:	b10a      	cbz	r2, 8006faa <_vfiprintf_r+0x86>
 8006fa6:	2a25      	cmp	r2, #37	; 0x25
 8006fa8:	d1f9      	bne.n	8006f9e <_vfiprintf_r+0x7a>
 8006faa:	ebba 0b04 	subs.w	fp, sl, r4
 8006fae:	d00b      	beq.n	8006fc8 <_vfiprintf_r+0xa4>
 8006fb0:	465b      	mov	r3, fp
 8006fb2:	4622      	mov	r2, r4
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f7ff ffa1 	bl	8006efe <__sfputs_r>
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	f000 80a9 	beq.w	8007114 <_vfiprintf_r+0x1f0>
 8006fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fc4:	445a      	add	r2, fp
 8006fc6:	9209      	str	r2, [sp, #36]	; 0x24
 8006fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 80a1 	beq.w	8007114 <_vfiprintf_r+0x1f0>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fdc:	f10a 0a01 	add.w	sl, sl, #1
 8006fe0:	9304      	str	r3, [sp, #16]
 8006fe2:	9307      	str	r3, [sp, #28]
 8006fe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fe8:	931a      	str	r3, [sp, #104]	; 0x68
 8006fea:	4654      	mov	r4, sl
 8006fec:	2205      	movs	r2, #5
 8006fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ff2:	4854      	ldr	r0, [pc, #336]	; (8007144 <_vfiprintf_r+0x220>)
 8006ff4:	f7f9 f904 	bl	8000200 <memchr>
 8006ff8:	9a04      	ldr	r2, [sp, #16]
 8006ffa:	b9d8      	cbnz	r0, 8007034 <_vfiprintf_r+0x110>
 8006ffc:	06d1      	lsls	r1, r2, #27
 8006ffe:	bf44      	itt	mi
 8007000:	2320      	movmi	r3, #32
 8007002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007006:	0713      	lsls	r3, r2, #28
 8007008:	bf44      	itt	mi
 800700a:	232b      	movmi	r3, #43	; 0x2b
 800700c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007010:	f89a 3000 	ldrb.w	r3, [sl]
 8007014:	2b2a      	cmp	r3, #42	; 0x2a
 8007016:	d015      	beq.n	8007044 <_vfiprintf_r+0x120>
 8007018:	9a07      	ldr	r2, [sp, #28]
 800701a:	4654      	mov	r4, sl
 800701c:	2000      	movs	r0, #0
 800701e:	f04f 0c0a 	mov.w	ip, #10
 8007022:	4621      	mov	r1, r4
 8007024:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007028:	3b30      	subs	r3, #48	; 0x30
 800702a:	2b09      	cmp	r3, #9
 800702c:	d94d      	bls.n	80070ca <_vfiprintf_r+0x1a6>
 800702e:	b1b0      	cbz	r0, 800705e <_vfiprintf_r+0x13a>
 8007030:	9207      	str	r2, [sp, #28]
 8007032:	e014      	b.n	800705e <_vfiprintf_r+0x13a>
 8007034:	eba0 0308 	sub.w	r3, r0, r8
 8007038:	fa09 f303 	lsl.w	r3, r9, r3
 800703c:	4313      	orrs	r3, r2
 800703e:	9304      	str	r3, [sp, #16]
 8007040:	46a2      	mov	sl, r4
 8007042:	e7d2      	b.n	8006fea <_vfiprintf_r+0xc6>
 8007044:	9b03      	ldr	r3, [sp, #12]
 8007046:	1d19      	adds	r1, r3, #4
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	9103      	str	r1, [sp, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	bfbb      	ittet	lt
 8007050:	425b      	neglt	r3, r3
 8007052:	f042 0202 	orrlt.w	r2, r2, #2
 8007056:	9307      	strge	r3, [sp, #28]
 8007058:	9307      	strlt	r3, [sp, #28]
 800705a:	bfb8      	it	lt
 800705c:	9204      	strlt	r2, [sp, #16]
 800705e:	7823      	ldrb	r3, [r4, #0]
 8007060:	2b2e      	cmp	r3, #46	; 0x2e
 8007062:	d10c      	bne.n	800707e <_vfiprintf_r+0x15a>
 8007064:	7863      	ldrb	r3, [r4, #1]
 8007066:	2b2a      	cmp	r3, #42	; 0x2a
 8007068:	d134      	bne.n	80070d4 <_vfiprintf_r+0x1b0>
 800706a:	9b03      	ldr	r3, [sp, #12]
 800706c:	1d1a      	adds	r2, r3, #4
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	9203      	str	r2, [sp, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	bfb8      	it	lt
 8007076:	f04f 33ff 	movlt.w	r3, #4294967295
 800707a:	3402      	adds	r4, #2
 800707c:	9305      	str	r3, [sp, #20]
 800707e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007154 <_vfiprintf_r+0x230>
 8007082:	7821      	ldrb	r1, [r4, #0]
 8007084:	2203      	movs	r2, #3
 8007086:	4650      	mov	r0, sl
 8007088:	f7f9 f8ba 	bl	8000200 <memchr>
 800708c:	b138      	cbz	r0, 800709e <_vfiprintf_r+0x17a>
 800708e:	9b04      	ldr	r3, [sp, #16]
 8007090:	eba0 000a 	sub.w	r0, r0, sl
 8007094:	2240      	movs	r2, #64	; 0x40
 8007096:	4082      	lsls	r2, r0
 8007098:	4313      	orrs	r3, r2
 800709a:	3401      	adds	r4, #1
 800709c:	9304      	str	r3, [sp, #16]
 800709e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a2:	4829      	ldr	r0, [pc, #164]	; (8007148 <_vfiprintf_r+0x224>)
 80070a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070a8:	2206      	movs	r2, #6
 80070aa:	f7f9 f8a9 	bl	8000200 <memchr>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d03f      	beq.n	8007132 <_vfiprintf_r+0x20e>
 80070b2:	4b26      	ldr	r3, [pc, #152]	; (800714c <_vfiprintf_r+0x228>)
 80070b4:	bb1b      	cbnz	r3, 80070fe <_vfiprintf_r+0x1da>
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	3307      	adds	r3, #7
 80070ba:	f023 0307 	bic.w	r3, r3, #7
 80070be:	3308      	adds	r3, #8
 80070c0:	9303      	str	r3, [sp, #12]
 80070c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c4:	443b      	add	r3, r7
 80070c6:	9309      	str	r3, [sp, #36]	; 0x24
 80070c8:	e768      	b.n	8006f9c <_vfiprintf_r+0x78>
 80070ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80070ce:	460c      	mov	r4, r1
 80070d0:	2001      	movs	r0, #1
 80070d2:	e7a6      	b.n	8007022 <_vfiprintf_r+0xfe>
 80070d4:	2300      	movs	r3, #0
 80070d6:	3401      	adds	r4, #1
 80070d8:	9305      	str	r3, [sp, #20]
 80070da:	4619      	mov	r1, r3
 80070dc:	f04f 0c0a 	mov.w	ip, #10
 80070e0:	4620      	mov	r0, r4
 80070e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070e6:	3a30      	subs	r2, #48	; 0x30
 80070e8:	2a09      	cmp	r2, #9
 80070ea:	d903      	bls.n	80070f4 <_vfiprintf_r+0x1d0>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0c6      	beq.n	800707e <_vfiprintf_r+0x15a>
 80070f0:	9105      	str	r1, [sp, #20]
 80070f2:	e7c4      	b.n	800707e <_vfiprintf_r+0x15a>
 80070f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80070f8:	4604      	mov	r4, r0
 80070fa:	2301      	movs	r3, #1
 80070fc:	e7f0      	b.n	80070e0 <_vfiprintf_r+0x1bc>
 80070fe:	ab03      	add	r3, sp, #12
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	462a      	mov	r2, r5
 8007104:	4b12      	ldr	r3, [pc, #72]	; (8007150 <_vfiprintf_r+0x22c>)
 8007106:	a904      	add	r1, sp, #16
 8007108:	4630      	mov	r0, r6
 800710a:	f3af 8000 	nop.w
 800710e:	4607      	mov	r7, r0
 8007110:	1c78      	adds	r0, r7, #1
 8007112:	d1d6      	bne.n	80070c2 <_vfiprintf_r+0x19e>
 8007114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007116:	07d9      	lsls	r1, r3, #31
 8007118:	d405      	bmi.n	8007126 <_vfiprintf_r+0x202>
 800711a:	89ab      	ldrh	r3, [r5, #12]
 800711c:	059a      	lsls	r2, r3, #22
 800711e:	d402      	bmi.n	8007126 <_vfiprintf_r+0x202>
 8007120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007122:	f7ff fc83 	bl	8006a2c <__retarget_lock_release_recursive>
 8007126:	89ab      	ldrh	r3, [r5, #12]
 8007128:	065b      	lsls	r3, r3, #25
 800712a:	f53f af1d 	bmi.w	8006f68 <_vfiprintf_r+0x44>
 800712e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007130:	e71c      	b.n	8006f6c <_vfiprintf_r+0x48>
 8007132:	ab03      	add	r3, sp, #12
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	462a      	mov	r2, r5
 8007138:	4b05      	ldr	r3, [pc, #20]	; (8007150 <_vfiprintf_r+0x22c>)
 800713a:	a904      	add	r1, sp, #16
 800713c:	4630      	mov	r0, r6
 800713e:	f000 f879 	bl	8007234 <_printf_i>
 8007142:	e7e4      	b.n	800710e <_vfiprintf_r+0x1ea>
 8007144:	08007888 	.word	0x08007888
 8007148:	08007892 	.word	0x08007892
 800714c:	00000000 	.word	0x00000000
 8007150:	08006eff 	.word	0x08006eff
 8007154:	0800788e 	.word	0x0800788e

08007158 <_printf_common>:
 8007158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800715c:	4616      	mov	r6, r2
 800715e:	4699      	mov	r9, r3
 8007160:	688a      	ldr	r2, [r1, #8]
 8007162:	690b      	ldr	r3, [r1, #16]
 8007164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007168:	4293      	cmp	r3, r2
 800716a:	bfb8      	it	lt
 800716c:	4613      	movlt	r3, r2
 800716e:	6033      	str	r3, [r6, #0]
 8007170:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007174:	4607      	mov	r7, r0
 8007176:	460c      	mov	r4, r1
 8007178:	b10a      	cbz	r2, 800717e <_printf_common+0x26>
 800717a:	3301      	adds	r3, #1
 800717c:	6033      	str	r3, [r6, #0]
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	0699      	lsls	r1, r3, #26
 8007182:	bf42      	ittt	mi
 8007184:	6833      	ldrmi	r3, [r6, #0]
 8007186:	3302      	addmi	r3, #2
 8007188:	6033      	strmi	r3, [r6, #0]
 800718a:	6825      	ldr	r5, [r4, #0]
 800718c:	f015 0506 	ands.w	r5, r5, #6
 8007190:	d106      	bne.n	80071a0 <_printf_common+0x48>
 8007192:	f104 0a19 	add.w	sl, r4, #25
 8007196:	68e3      	ldr	r3, [r4, #12]
 8007198:	6832      	ldr	r2, [r6, #0]
 800719a:	1a9b      	subs	r3, r3, r2
 800719c:	42ab      	cmp	r3, r5
 800719e:	dc26      	bgt.n	80071ee <_printf_common+0x96>
 80071a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071a4:	1e13      	subs	r3, r2, #0
 80071a6:	6822      	ldr	r2, [r4, #0]
 80071a8:	bf18      	it	ne
 80071aa:	2301      	movne	r3, #1
 80071ac:	0692      	lsls	r2, r2, #26
 80071ae:	d42b      	bmi.n	8007208 <_printf_common+0xb0>
 80071b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071b4:	4649      	mov	r1, r9
 80071b6:	4638      	mov	r0, r7
 80071b8:	47c0      	blx	r8
 80071ba:	3001      	adds	r0, #1
 80071bc:	d01e      	beq.n	80071fc <_printf_common+0xa4>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	6922      	ldr	r2, [r4, #16]
 80071c2:	f003 0306 	and.w	r3, r3, #6
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	bf02      	ittt	eq
 80071ca:	68e5      	ldreq	r5, [r4, #12]
 80071cc:	6833      	ldreq	r3, [r6, #0]
 80071ce:	1aed      	subeq	r5, r5, r3
 80071d0:	68a3      	ldr	r3, [r4, #8]
 80071d2:	bf0c      	ite	eq
 80071d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071d8:	2500      	movne	r5, #0
 80071da:	4293      	cmp	r3, r2
 80071dc:	bfc4      	itt	gt
 80071de:	1a9b      	subgt	r3, r3, r2
 80071e0:	18ed      	addgt	r5, r5, r3
 80071e2:	2600      	movs	r6, #0
 80071e4:	341a      	adds	r4, #26
 80071e6:	42b5      	cmp	r5, r6
 80071e8:	d11a      	bne.n	8007220 <_printf_common+0xc8>
 80071ea:	2000      	movs	r0, #0
 80071ec:	e008      	b.n	8007200 <_printf_common+0xa8>
 80071ee:	2301      	movs	r3, #1
 80071f0:	4652      	mov	r2, sl
 80071f2:	4649      	mov	r1, r9
 80071f4:	4638      	mov	r0, r7
 80071f6:	47c0      	blx	r8
 80071f8:	3001      	adds	r0, #1
 80071fa:	d103      	bne.n	8007204 <_printf_common+0xac>
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007204:	3501      	adds	r5, #1
 8007206:	e7c6      	b.n	8007196 <_printf_common+0x3e>
 8007208:	18e1      	adds	r1, r4, r3
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	2030      	movs	r0, #48	; 0x30
 800720e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007212:	4422      	add	r2, r4
 8007214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800721c:	3302      	adds	r3, #2
 800721e:	e7c7      	b.n	80071b0 <_printf_common+0x58>
 8007220:	2301      	movs	r3, #1
 8007222:	4622      	mov	r2, r4
 8007224:	4649      	mov	r1, r9
 8007226:	4638      	mov	r0, r7
 8007228:	47c0      	blx	r8
 800722a:	3001      	adds	r0, #1
 800722c:	d0e6      	beq.n	80071fc <_printf_common+0xa4>
 800722e:	3601      	adds	r6, #1
 8007230:	e7d9      	b.n	80071e6 <_printf_common+0x8e>
	...

08007234 <_printf_i>:
 8007234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007238:	7e0f      	ldrb	r7, [r1, #24]
 800723a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800723c:	2f78      	cmp	r7, #120	; 0x78
 800723e:	4691      	mov	r9, r2
 8007240:	4680      	mov	r8, r0
 8007242:	460c      	mov	r4, r1
 8007244:	469a      	mov	sl, r3
 8007246:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800724a:	d807      	bhi.n	800725c <_printf_i+0x28>
 800724c:	2f62      	cmp	r7, #98	; 0x62
 800724e:	d80a      	bhi.n	8007266 <_printf_i+0x32>
 8007250:	2f00      	cmp	r7, #0
 8007252:	f000 80d4 	beq.w	80073fe <_printf_i+0x1ca>
 8007256:	2f58      	cmp	r7, #88	; 0x58
 8007258:	f000 80c0 	beq.w	80073dc <_printf_i+0x1a8>
 800725c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007264:	e03a      	b.n	80072dc <_printf_i+0xa8>
 8007266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800726a:	2b15      	cmp	r3, #21
 800726c:	d8f6      	bhi.n	800725c <_printf_i+0x28>
 800726e:	a101      	add	r1, pc, #4	; (adr r1, 8007274 <_printf_i+0x40>)
 8007270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007274:	080072cd 	.word	0x080072cd
 8007278:	080072e1 	.word	0x080072e1
 800727c:	0800725d 	.word	0x0800725d
 8007280:	0800725d 	.word	0x0800725d
 8007284:	0800725d 	.word	0x0800725d
 8007288:	0800725d 	.word	0x0800725d
 800728c:	080072e1 	.word	0x080072e1
 8007290:	0800725d 	.word	0x0800725d
 8007294:	0800725d 	.word	0x0800725d
 8007298:	0800725d 	.word	0x0800725d
 800729c:	0800725d 	.word	0x0800725d
 80072a0:	080073e5 	.word	0x080073e5
 80072a4:	0800730d 	.word	0x0800730d
 80072a8:	0800739f 	.word	0x0800739f
 80072ac:	0800725d 	.word	0x0800725d
 80072b0:	0800725d 	.word	0x0800725d
 80072b4:	08007407 	.word	0x08007407
 80072b8:	0800725d 	.word	0x0800725d
 80072bc:	0800730d 	.word	0x0800730d
 80072c0:	0800725d 	.word	0x0800725d
 80072c4:	0800725d 	.word	0x0800725d
 80072c8:	080073a7 	.word	0x080073a7
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	1d1a      	adds	r2, r3, #4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	602a      	str	r2, [r5, #0]
 80072d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072dc:	2301      	movs	r3, #1
 80072de:	e09f      	b.n	8007420 <_printf_i+0x1ec>
 80072e0:	6820      	ldr	r0, [r4, #0]
 80072e2:	682b      	ldr	r3, [r5, #0]
 80072e4:	0607      	lsls	r7, r0, #24
 80072e6:	f103 0104 	add.w	r1, r3, #4
 80072ea:	6029      	str	r1, [r5, #0]
 80072ec:	d501      	bpl.n	80072f2 <_printf_i+0xbe>
 80072ee:	681e      	ldr	r6, [r3, #0]
 80072f0:	e003      	b.n	80072fa <_printf_i+0xc6>
 80072f2:	0646      	lsls	r6, r0, #25
 80072f4:	d5fb      	bpl.n	80072ee <_printf_i+0xba>
 80072f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80072fa:	2e00      	cmp	r6, #0
 80072fc:	da03      	bge.n	8007306 <_printf_i+0xd2>
 80072fe:	232d      	movs	r3, #45	; 0x2d
 8007300:	4276      	negs	r6, r6
 8007302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007306:	485a      	ldr	r0, [pc, #360]	; (8007470 <_printf_i+0x23c>)
 8007308:	230a      	movs	r3, #10
 800730a:	e012      	b.n	8007332 <_printf_i+0xfe>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	6820      	ldr	r0, [r4, #0]
 8007310:	1d19      	adds	r1, r3, #4
 8007312:	6029      	str	r1, [r5, #0]
 8007314:	0605      	lsls	r5, r0, #24
 8007316:	d501      	bpl.n	800731c <_printf_i+0xe8>
 8007318:	681e      	ldr	r6, [r3, #0]
 800731a:	e002      	b.n	8007322 <_printf_i+0xee>
 800731c:	0641      	lsls	r1, r0, #25
 800731e:	d5fb      	bpl.n	8007318 <_printf_i+0xe4>
 8007320:	881e      	ldrh	r6, [r3, #0]
 8007322:	4853      	ldr	r0, [pc, #332]	; (8007470 <_printf_i+0x23c>)
 8007324:	2f6f      	cmp	r7, #111	; 0x6f
 8007326:	bf0c      	ite	eq
 8007328:	2308      	moveq	r3, #8
 800732a:	230a      	movne	r3, #10
 800732c:	2100      	movs	r1, #0
 800732e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007332:	6865      	ldr	r5, [r4, #4]
 8007334:	60a5      	str	r5, [r4, #8]
 8007336:	2d00      	cmp	r5, #0
 8007338:	bfa2      	ittt	ge
 800733a:	6821      	ldrge	r1, [r4, #0]
 800733c:	f021 0104 	bicge.w	r1, r1, #4
 8007340:	6021      	strge	r1, [r4, #0]
 8007342:	b90e      	cbnz	r6, 8007348 <_printf_i+0x114>
 8007344:	2d00      	cmp	r5, #0
 8007346:	d04b      	beq.n	80073e0 <_printf_i+0x1ac>
 8007348:	4615      	mov	r5, r2
 800734a:	fbb6 f1f3 	udiv	r1, r6, r3
 800734e:	fb03 6711 	mls	r7, r3, r1, r6
 8007352:	5dc7      	ldrb	r7, [r0, r7]
 8007354:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007358:	4637      	mov	r7, r6
 800735a:	42bb      	cmp	r3, r7
 800735c:	460e      	mov	r6, r1
 800735e:	d9f4      	bls.n	800734a <_printf_i+0x116>
 8007360:	2b08      	cmp	r3, #8
 8007362:	d10b      	bne.n	800737c <_printf_i+0x148>
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	07de      	lsls	r6, r3, #31
 8007368:	d508      	bpl.n	800737c <_printf_i+0x148>
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	6861      	ldr	r1, [r4, #4]
 800736e:	4299      	cmp	r1, r3
 8007370:	bfde      	ittt	le
 8007372:	2330      	movle	r3, #48	; 0x30
 8007374:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007378:	f105 35ff 	addle.w	r5, r5, #4294967295
 800737c:	1b52      	subs	r2, r2, r5
 800737e:	6122      	str	r2, [r4, #16]
 8007380:	f8cd a000 	str.w	sl, [sp]
 8007384:	464b      	mov	r3, r9
 8007386:	aa03      	add	r2, sp, #12
 8007388:	4621      	mov	r1, r4
 800738a:	4640      	mov	r0, r8
 800738c:	f7ff fee4 	bl	8007158 <_printf_common>
 8007390:	3001      	adds	r0, #1
 8007392:	d14a      	bne.n	800742a <_printf_i+0x1f6>
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	b004      	add	sp, #16
 800739a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	f043 0320 	orr.w	r3, r3, #32
 80073a4:	6023      	str	r3, [r4, #0]
 80073a6:	4833      	ldr	r0, [pc, #204]	; (8007474 <_printf_i+0x240>)
 80073a8:	2778      	movs	r7, #120	; 0x78
 80073aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	6829      	ldr	r1, [r5, #0]
 80073b2:	061f      	lsls	r7, r3, #24
 80073b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80073b8:	d402      	bmi.n	80073c0 <_printf_i+0x18c>
 80073ba:	065f      	lsls	r7, r3, #25
 80073bc:	bf48      	it	mi
 80073be:	b2b6      	uxthmi	r6, r6
 80073c0:	07df      	lsls	r7, r3, #31
 80073c2:	bf48      	it	mi
 80073c4:	f043 0320 	orrmi.w	r3, r3, #32
 80073c8:	6029      	str	r1, [r5, #0]
 80073ca:	bf48      	it	mi
 80073cc:	6023      	strmi	r3, [r4, #0]
 80073ce:	b91e      	cbnz	r6, 80073d8 <_printf_i+0x1a4>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	f023 0320 	bic.w	r3, r3, #32
 80073d6:	6023      	str	r3, [r4, #0]
 80073d8:	2310      	movs	r3, #16
 80073da:	e7a7      	b.n	800732c <_printf_i+0xf8>
 80073dc:	4824      	ldr	r0, [pc, #144]	; (8007470 <_printf_i+0x23c>)
 80073de:	e7e4      	b.n	80073aa <_printf_i+0x176>
 80073e0:	4615      	mov	r5, r2
 80073e2:	e7bd      	b.n	8007360 <_printf_i+0x12c>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	6826      	ldr	r6, [r4, #0]
 80073e8:	6961      	ldr	r1, [r4, #20]
 80073ea:	1d18      	adds	r0, r3, #4
 80073ec:	6028      	str	r0, [r5, #0]
 80073ee:	0635      	lsls	r5, r6, #24
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	d501      	bpl.n	80073f8 <_printf_i+0x1c4>
 80073f4:	6019      	str	r1, [r3, #0]
 80073f6:	e002      	b.n	80073fe <_printf_i+0x1ca>
 80073f8:	0670      	lsls	r0, r6, #25
 80073fa:	d5fb      	bpl.n	80073f4 <_printf_i+0x1c0>
 80073fc:	8019      	strh	r1, [r3, #0]
 80073fe:	2300      	movs	r3, #0
 8007400:	6123      	str	r3, [r4, #16]
 8007402:	4615      	mov	r5, r2
 8007404:	e7bc      	b.n	8007380 <_printf_i+0x14c>
 8007406:	682b      	ldr	r3, [r5, #0]
 8007408:	1d1a      	adds	r2, r3, #4
 800740a:	602a      	str	r2, [r5, #0]
 800740c:	681d      	ldr	r5, [r3, #0]
 800740e:	6862      	ldr	r2, [r4, #4]
 8007410:	2100      	movs	r1, #0
 8007412:	4628      	mov	r0, r5
 8007414:	f7f8 fef4 	bl	8000200 <memchr>
 8007418:	b108      	cbz	r0, 800741e <_printf_i+0x1ea>
 800741a:	1b40      	subs	r0, r0, r5
 800741c:	6060      	str	r0, [r4, #4]
 800741e:	6863      	ldr	r3, [r4, #4]
 8007420:	6123      	str	r3, [r4, #16]
 8007422:	2300      	movs	r3, #0
 8007424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007428:	e7aa      	b.n	8007380 <_printf_i+0x14c>
 800742a:	6923      	ldr	r3, [r4, #16]
 800742c:	462a      	mov	r2, r5
 800742e:	4649      	mov	r1, r9
 8007430:	4640      	mov	r0, r8
 8007432:	47d0      	blx	sl
 8007434:	3001      	adds	r0, #1
 8007436:	d0ad      	beq.n	8007394 <_printf_i+0x160>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	079b      	lsls	r3, r3, #30
 800743c:	d413      	bmi.n	8007466 <_printf_i+0x232>
 800743e:	68e0      	ldr	r0, [r4, #12]
 8007440:	9b03      	ldr	r3, [sp, #12]
 8007442:	4298      	cmp	r0, r3
 8007444:	bfb8      	it	lt
 8007446:	4618      	movlt	r0, r3
 8007448:	e7a6      	b.n	8007398 <_printf_i+0x164>
 800744a:	2301      	movs	r3, #1
 800744c:	4632      	mov	r2, r6
 800744e:	4649      	mov	r1, r9
 8007450:	4640      	mov	r0, r8
 8007452:	47d0      	blx	sl
 8007454:	3001      	adds	r0, #1
 8007456:	d09d      	beq.n	8007394 <_printf_i+0x160>
 8007458:	3501      	adds	r5, #1
 800745a:	68e3      	ldr	r3, [r4, #12]
 800745c:	9903      	ldr	r1, [sp, #12]
 800745e:	1a5b      	subs	r3, r3, r1
 8007460:	42ab      	cmp	r3, r5
 8007462:	dcf2      	bgt.n	800744a <_printf_i+0x216>
 8007464:	e7eb      	b.n	800743e <_printf_i+0x20a>
 8007466:	2500      	movs	r5, #0
 8007468:	f104 0619 	add.w	r6, r4, #25
 800746c:	e7f5      	b.n	800745a <_printf_i+0x226>
 800746e:	bf00      	nop
 8007470:	08007899 	.word	0x08007899
 8007474:	080078aa 	.word	0x080078aa

08007478 <__sflush_r>:
 8007478:	898a      	ldrh	r2, [r1, #12]
 800747a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800747e:	4605      	mov	r5, r0
 8007480:	0710      	lsls	r0, r2, #28
 8007482:	460c      	mov	r4, r1
 8007484:	d458      	bmi.n	8007538 <__sflush_r+0xc0>
 8007486:	684b      	ldr	r3, [r1, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	dc05      	bgt.n	8007498 <__sflush_r+0x20>
 800748c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800748e:	2b00      	cmp	r3, #0
 8007490:	dc02      	bgt.n	8007498 <__sflush_r+0x20>
 8007492:	2000      	movs	r0, #0
 8007494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800749a:	2e00      	cmp	r6, #0
 800749c:	d0f9      	beq.n	8007492 <__sflush_r+0x1a>
 800749e:	2300      	movs	r3, #0
 80074a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074a4:	682f      	ldr	r7, [r5, #0]
 80074a6:	6a21      	ldr	r1, [r4, #32]
 80074a8:	602b      	str	r3, [r5, #0]
 80074aa:	d032      	beq.n	8007512 <__sflush_r+0x9a>
 80074ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	075a      	lsls	r2, r3, #29
 80074b2:	d505      	bpl.n	80074c0 <__sflush_r+0x48>
 80074b4:	6863      	ldr	r3, [r4, #4]
 80074b6:	1ac0      	subs	r0, r0, r3
 80074b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074ba:	b10b      	cbz	r3, 80074c0 <__sflush_r+0x48>
 80074bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074be:	1ac0      	subs	r0, r0, r3
 80074c0:	2300      	movs	r3, #0
 80074c2:	4602      	mov	r2, r0
 80074c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074c6:	6a21      	ldr	r1, [r4, #32]
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b0      	blx	r6
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	d106      	bne.n	80074e0 <__sflush_r+0x68>
 80074d2:	6829      	ldr	r1, [r5, #0]
 80074d4:	291d      	cmp	r1, #29
 80074d6:	d82b      	bhi.n	8007530 <__sflush_r+0xb8>
 80074d8:	4a29      	ldr	r2, [pc, #164]	; (8007580 <__sflush_r+0x108>)
 80074da:	410a      	asrs	r2, r1
 80074dc:	07d6      	lsls	r6, r2, #31
 80074de:	d427      	bmi.n	8007530 <__sflush_r+0xb8>
 80074e0:	2200      	movs	r2, #0
 80074e2:	6062      	str	r2, [r4, #4]
 80074e4:	04d9      	lsls	r1, r3, #19
 80074e6:	6922      	ldr	r2, [r4, #16]
 80074e8:	6022      	str	r2, [r4, #0]
 80074ea:	d504      	bpl.n	80074f6 <__sflush_r+0x7e>
 80074ec:	1c42      	adds	r2, r0, #1
 80074ee:	d101      	bne.n	80074f4 <__sflush_r+0x7c>
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	b903      	cbnz	r3, 80074f6 <__sflush_r+0x7e>
 80074f4:	6560      	str	r0, [r4, #84]	; 0x54
 80074f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074f8:	602f      	str	r7, [r5, #0]
 80074fa:	2900      	cmp	r1, #0
 80074fc:	d0c9      	beq.n	8007492 <__sflush_r+0x1a>
 80074fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007502:	4299      	cmp	r1, r3
 8007504:	d002      	beq.n	800750c <__sflush_r+0x94>
 8007506:	4628      	mov	r0, r5
 8007508:	f7ff fa92 	bl	8006a30 <_free_r>
 800750c:	2000      	movs	r0, #0
 800750e:	6360      	str	r0, [r4, #52]	; 0x34
 8007510:	e7c0      	b.n	8007494 <__sflush_r+0x1c>
 8007512:	2301      	movs	r3, #1
 8007514:	4628      	mov	r0, r5
 8007516:	47b0      	blx	r6
 8007518:	1c41      	adds	r1, r0, #1
 800751a:	d1c8      	bne.n	80074ae <__sflush_r+0x36>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0c5      	beq.n	80074ae <__sflush_r+0x36>
 8007522:	2b1d      	cmp	r3, #29
 8007524:	d001      	beq.n	800752a <__sflush_r+0xb2>
 8007526:	2b16      	cmp	r3, #22
 8007528:	d101      	bne.n	800752e <__sflush_r+0xb6>
 800752a:	602f      	str	r7, [r5, #0]
 800752c:	e7b1      	b.n	8007492 <__sflush_r+0x1a>
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007534:	81a3      	strh	r3, [r4, #12]
 8007536:	e7ad      	b.n	8007494 <__sflush_r+0x1c>
 8007538:	690f      	ldr	r7, [r1, #16]
 800753a:	2f00      	cmp	r7, #0
 800753c:	d0a9      	beq.n	8007492 <__sflush_r+0x1a>
 800753e:	0793      	lsls	r3, r2, #30
 8007540:	680e      	ldr	r6, [r1, #0]
 8007542:	bf08      	it	eq
 8007544:	694b      	ldreq	r3, [r1, #20]
 8007546:	600f      	str	r7, [r1, #0]
 8007548:	bf18      	it	ne
 800754a:	2300      	movne	r3, #0
 800754c:	eba6 0807 	sub.w	r8, r6, r7
 8007550:	608b      	str	r3, [r1, #8]
 8007552:	f1b8 0f00 	cmp.w	r8, #0
 8007556:	dd9c      	ble.n	8007492 <__sflush_r+0x1a>
 8007558:	6a21      	ldr	r1, [r4, #32]
 800755a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800755c:	4643      	mov	r3, r8
 800755e:	463a      	mov	r2, r7
 8007560:	4628      	mov	r0, r5
 8007562:	47b0      	blx	r6
 8007564:	2800      	cmp	r0, #0
 8007566:	dc06      	bgt.n	8007576 <__sflush_r+0xfe>
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800756e:	81a3      	strh	r3, [r4, #12]
 8007570:	f04f 30ff 	mov.w	r0, #4294967295
 8007574:	e78e      	b.n	8007494 <__sflush_r+0x1c>
 8007576:	4407      	add	r7, r0
 8007578:	eba8 0800 	sub.w	r8, r8, r0
 800757c:	e7e9      	b.n	8007552 <__sflush_r+0xda>
 800757e:	bf00      	nop
 8007580:	dfbffffe 	.word	0xdfbffffe

08007584 <_fflush_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	690b      	ldr	r3, [r1, #16]
 8007588:	4605      	mov	r5, r0
 800758a:	460c      	mov	r4, r1
 800758c:	b913      	cbnz	r3, 8007594 <_fflush_r+0x10>
 800758e:	2500      	movs	r5, #0
 8007590:	4628      	mov	r0, r5
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	b118      	cbz	r0, 800759e <_fflush_r+0x1a>
 8007596:	6a03      	ldr	r3, [r0, #32]
 8007598:	b90b      	cbnz	r3, 800759e <_fflush_r+0x1a>
 800759a:	f7fe fffd 	bl	8006598 <__sinit>
 800759e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0f3      	beq.n	800758e <_fflush_r+0xa>
 80075a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075a8:	07d0      	lsls	r0, r2, #31
 80075aa:	d404      	bmi.n	80075b6 <_fflush_r+0x32>
 80075ac:	0599      	lsls	r1, r3, #22
 80075ae:	d402      	bmi.n	80075b6 <_fflush_r+0x32>
 80075b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075b2:	f7ff fa3a 	bl	8006a2a <__retarget_lock_acquire_recursive>
 80075b6:	4628      	mov	r0, r5
 80075b8:	4621      	mov	r1, r4
 80075ba:	f7ff ff5d 	bl	8007478 <__sflush_r>
 80075be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075c0:	07da      	lsls	r2, r3, #31
 80075c2:	4605      	mov	r5, r0
 80075c4:	d4e4      	bmi.n	8007590 <_fflush_r+0xc>
 80075c6:	89a3      	ldrh	r3, [r4, #12]
 80075c8:	059b      	lsls	r3, r3, #22
 80075ca:	d4e1      	bmi.n	8007590 <_fflush_r+0xc>
 80075cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ce:	f7ff fa2d 	bl	8006a2c <__retarget_lock_release_recursive>
 80075d2:	e7dd      	b.n	8007590 <_fflush_r+0xc>

080075d4 <__swhatbuf_r>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	460c      	mov	r4, r1
 80075d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075dc:	2900      	cmp	r1, #0
 80075de:	b096      	sub	sp, #88	; 0x58
 80075e0:	4615      	mov	r5, r2
 80075e2:	461e      	mov	r6, r3
 80075e4:	da0d      	bge.n	8007602 <__swhatbuf_r+0x2e>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80075ec:	f04f 0100 	mov.w	r1, #0
 80075f0:	bf0c      	ite	eq
 80075f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80075f6:	2340      	movne	r3, #64	; 0x40
 80075f8:	2000      	movs	r0, #0
 80075fa:	6031      	str	r1, [r6, #0]
 80075fc:	602b      	str	r3, [r5, #0]
 80075fe:	b016      	add	sp, #88	; 0x58
 8007600:	bd70      	pop	{r4, r5, r6, pc}
 8007602:	466a      	mov	r2, sp
 8007604:	f000 f862 	bl	80076cc <_fstat_r>
 8007608:	2800      	cmp	r0, #0
 800760a:	dbec      	blt.n	80075e6 <__swhatbuf_r+0x12>
 800760c:	9901      	ldr	r1, [sp, #4]
 800760e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007612:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007616:	4259      	negs	r1, r3
 8007618:	4159      	adcs	r1, r3
 800761a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800761e:	e7eb      	b.n	80075f8 <__swhatbuf_r+0x24>

08007620 <__smakebuf_r>:
 8007620:	898b      	ldrh	r3, [r1, #12]
 8007622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007624:	079d      	lsls	r5, r3, #30
 8007626:	4606      	mov	r6, r0
 8007628:	460c      	mov	r4, r1
 800762a:	d507      	bpl.n	800763c <__smakebuf_r+0x1c>
 800762c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	6123      	str	r3, [r4, #16]
 8007634:	2301      	movs	r3, #1
 8007636:	6163      	str	r3, [r4, #20]
 8007638:	b002      	add	sp, #8
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	ab01      	add	r3, sp, #4
 800763e:	466a      	mov	r2, sp
 8007640:	f7ff ffc8 	bl	80075d4 <__swhatbuf_r>
 8007644:	9900      	ldr	r1, [sp, #0]
 8007646:	4605      	mov	r5, r0
 8007648:	4630      	mov	r0, r6
 800764a:	f7ff fa5d 	bl	8006b08 <_malloc_r>
 800764e:	b948      	cbnz	r0, 8007664 <__smakebuf_r+0x44>
 8007650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007654:	059a      	lsls	r2, r3, #22
 8007656:	d4ef      	bmi.n	8007638 <__smakebuf_r+0x18>
 8007658:	f023 0303 	bic.w	r3, r3, #3
 800765c:	f043 0302 	orr.w	r3, r3, #2
 8007660:	81a3      	strh	r3, [r4, #12]
 8007662:	e7e3      	b.n	800762c <__smakebuf_r+0xc>
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	6020      	str	r0, [r4, #0]
 8007668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766c:	81a3      	strh	r3, [r4, #12]
 800766e:	9b00      	ldr	r3, [sp, #0]
 8007670:	6163      	str	r3, [r4, #20]
 8007672:	9b01      	ldr	r3, [sp, #4]
 8007674:	6120      	str	r0, [r4, #16]
 8007676:	b15b      	cbz	r3, 8007690 <__smakebuf_r+0x70>
 8007678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800767c:	4630      	mov	r0, r6
 800767e:	f000 f837 	bl	80076f0 <_isatty_r>
 8007682:	b128      	cbz	r0, 8007690 <__smakebuf_r+0x70>
 8007684:	89a3      	ldrh	r3, [r4, #12]
 8007686:	f023 0303 	bic.w	r3, r3, #3
 800768a:	f043 0301 	orr.w	r3, r3, #1
 800768e:	81a3      	strh	r3, [r4, #12]
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	431d      	orrs	r5, r3
 8007694:	81a5      	strh	r5, [r4, #12]
 8007696:	e7cf      	b.n	8007638 <__smakebuf_r+0x18>

08007698 <memmove>:
 8007698:	4288      	cmp	r0, r1
 800769a:	b510      	push	{r4, lr}
 800769c:	eb01 0402 	add.w	r4, r1, r2
 80076a0:	d902      	bls.n	80076a8 <memmove+0x10>
 80076a2:	4284      	cmp	r4, r0
 80076a4:	4623      	mov	r3, r4
 80076a6:	d807      	bhi.n	80076b8 <memmove+0x20>
 80076a8:	1e43      	subs	r3, r0, #1
 80076aa:	42a1      	cmp	r1, r4
 80076ac:	d008      	beq.n	80076c0 <memmove+0x28>
 80076ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076b6:	e7f8      	b.n	80076aa <memmove+0x12>
 80076b8:	4402      	add	r2, r0
 80076ba:	4601      	mov	r1, r0
 80076bc:	428a      	cmp	r2, r1
 80076be:	d100      	bne.n	80076c2 <memmove+0x2a>
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076ca:	e7f7      	b.n	80076bc <memmove+0x24>

080076cc <_fstat_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d07      	ldr	r5, [pc, #28]	; (80076ec <_fstat_r+0x20>)
 80076d0:	2300      	movs	r3, #0
 80076d2:	4604      	mov	r4, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	4611      	mov	r1, r2
 80076d8:	602b      	str	r3, [r5, #0]
 80076da:	f7f9 ff50 	bl	800157e <_fstat>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d102      	bne.n	80076e8 <_fstat_r+0x1c>
 80076e2:	682b      	ldr	r3, [r5, #0]
 80076e4:	b103      	cbz	r3, 80076e8 <_fstat_r+0x1c>
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	bd38      	pop	{r3, r4, r5, pc}
 80076ea:	bf00      	nop
 80076ec:	20000ac4 	.word	0x20000ac4

080076f0 <_isatty_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4d06      	ldr	r5, [pc, #24]	; (800770c <_isatty_r+0x1c>)
 80076f4:	2300      	movs	r3, #0
 80076f6:	4604      	mov	r4, r0
 80076f8:	4608      	mov	r0, r1
 80076fa:	602b      	str	r3, [r5, #0]
 80076fc:	f7f9 ff4f 	bl	800159e <_isatty>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d102      	bne.n	800770a <_isatty_r+0x1a>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	b103      	cbz	r3, 800770a <_isatty_r+0x1a>
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	20000ac4 	.word	0x20000ac4

08007710 <_sbrk_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4d06      	ldr	r5, [pc, #24]	; (800772c <_sbrk_r+0x1c>)
 8007714:	2300      	movs	r3, #0
 8007716:	4604      	mov	r4, r0
 8007718:	4608      	mov	r0, r1
 800771a:	602b      	str	r3, [r5, #0]
 800771c:	f7f9 ff58 	bl	80015d0 <_sbrk>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d102      	bne.n	800772a <_sbrk_r+0x1a>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	b103      	cbz	r3, 800772a <_sbrk_r+0x1a>
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	20000ac4 	.word	0x20000ac4

08007730 <memcpy>:
 8007730:	440a      	add	r2, r1
 8007732:	4291      	cmp	r1, r2
 8007734:	f100 33ff 	add.w	r3, r0, #4294967295
 8007738:	d100      	bne.n	800773c <memcpy+0xc>
 800773a:	4770      	bx	lr
 800773c:	b510      	push	{r4, lr}
 800773e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007746:	4291      	cmp	r1, r2
 8007748:	d1f9      	bne.n	800773e <memcpy+0xe>
 800774a:	bd10      	pop	{r4, pc}

0800774c <_realloc_r>:
 800774c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007750:	4680      	mov	r8, r0
 8007752:	4614      	mov	r4, r2
 8007754:	460e      	mov	r6, r1
 8007756:	b921      	cbnz	r1, 8007762 <_realloc_r+0x16>
 8007758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800775c:	4611      	mov	r1, r2
 800775e:	f7ff b9d3 	b.w	8006b08 <_malloc_r>
 8007762:	b92a      	cbnz	r2, 8007770 <_realloc_r+0x24>
 8007764:	f7ff f964 	bl	8006a30 <_free_r>
 8007768:	4625      	mov	r5, r4
 800776a:	4628      	mov	r0, r5
 800776c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007770:	f000 f81b 	bl	80077aa <_malloc_usable_size_r>
 8007774:	4284      	cmp	r4, r0
 8007776:	4607      	mov	r7, r0
 8007778:	d802      	bhi.n	8007780 <_realloc_r+0x34>
 800777a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800777e:	d812      	bhi.n	80077a6 <_realloc_r+0x5a>
 8007780:	4621      	mov	r1, r4
 8007782:	4640      	mov	r0, r8
 8007784:	f7ff f9c0 	bl	8006b08 <_malloc_r>
 8007788:	4605      	mov	r5, r0
 800778a:	2800      	cmp	r0, #0
 800778c:	d0ed      	beq.n	800776a <_realloc_r+0x1e>
 800778e:	42bc      	cmp	r4, r7
 8007790:	4622      	mov	r2, r4
 8007792:	4631      	mov	r1, r6
 8007794:	bf28      	it	cs
 8007796:	463a      	movcs	r2, r7
 8007798:	f7ff ffca 	bl	8007730 <memcpy>
 800779c:	4631      	mov	r1, r6
 800779e:	4640      	mov	r0, r8
 80077a0:	f7ff f946 	bl	8006a30 <_free_r>
 80077a4:	e7e1      	b.n	800776a <_realloc_r+0x1e>
 80077a6:	4635      	mov	r5, r6
 80077a8:	e7df      	b.n	800776a <_realloc_r+0x1e>

080077aa <_malloc_usable_size_r>:
 80077aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ae:	1f18      	subs	r0, r3, #4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	bfbc      	itt	lt
 80077b4:	580b      	ldrlt	r3, [r1, r0]
 80077b6:	18c0      	addlt	r0, r0, r3
 80077b8:	4770      	bx	lr
	...

080077bc <_init>:
 80077bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077be:	bf00      	nop
 80077c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077c2:	bc08      	pop	{r3}
 80077c4:	469e      	mov	lr, r3
 80077c6:	4770      	bx	lr

080077c8 <_fini>:
 80077c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ca:	bf00      	nop
 80077cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ce:	bc08      	pop	{r3}
 80077d0:	469e      	mov	lr, r3
 80077d2:	4770      	bx	lr
