
stm32_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000787c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007a2c  08007a2c  00017a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ba4  08007ba4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bac  08007bac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bac  08007bac  00017bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bb0  08007bb0  00017bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000ad4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b44  20000b44  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017b04  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031ba  00000000  00000000  00037be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013b0  00000000  00000000  0003ada8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f57  00000000  00000000  0003c158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000281c9  00000000  00000000  0003d0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018b90  00000000  00000000  00065278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1aa2  00000000  00000000  0007de08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005ca4  00000000  00000000  0016f8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00175550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007a14 	.word	0x08007a14

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08007a14 	.word	0x08007a14

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f005 fb62 	bl	8005c98 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f003 fabf 	bl	8003b6c <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f006 fadb 	bl	8006bc0 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f005 fb3b 	bl	8005c98 <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f005 fb33 	bl	8005c98 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f005 fb23 	bl	8005c98 <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	08007a3c 	.word	0x08007a3c
 8000660:	200003d8 	.word	0x200003d8
 8000664:	20000364 	.word	0x20000364
 8000668:	08007a2c 	.word	0x08007a2c
 800066c:	08007a34 	.word	0x08007a34
 8000670:	08007a38 	.word	0x08007a38

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f003 fa6b 	bl	8003b6c <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f003 f934 	bl	8003970 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 f9eb 	bl	8001ae8 <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000364 	.word	0x20000364

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <_write>:
static void MX_I2C1_Init(void);
static void MX_RTC_Init(void);
static void MX_ADC1_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ec:	68b9      	ldr	r1, [r7, #8]
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <_write+0x28>)
 80007f0:	f005 fa52 	bl	8005c98 <HAL_UART_Transmit>
	return len;
 80007f4:	687b      	ldr	r3, [r7, #4]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200003d8 	.word	0x200003d8

08000804 <get_alarm>:
	aTime.AlarmTime.Minutes = mm; // set minutes
	aTime.AlarmTime.Seconds = ss; // set seconds
	HAL_RTC_SetAlarm(&hrtc, &aTime, RTC_FORMAT_BIN);
}
void get_alarm(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af02      	add	r7, sp, #8
	HAL_RTC_GetAlarm(&hrtc, &aTime, RTC_CR_ALRAE, RTC_FORMAT_BIN);
 800080a:	2300      	movs	r3, #0
 800080c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000810:	490e      	ldr	r1, [pc, #56]	; (800084c <get_alarm+0x48>)
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <get_alarm+0x4c>)
 8000814:	f005 f856 	bl	80058c4 <HAL_RTC_GetAlarm>
	sprintf((char*)alarmTime, "%s %02d : %02d : %02d      ", ampm[aTime.AlarmTime.TimeFormat], aTime.AlarmTime.Hours, aTime.AlarmTime.Minutes, aTime.AlarmTime.Seconds);
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <get_alarm+0x48>)
 800081a:	78db      	ldrb	r3, [r3, #3]
 800081c:	461a      	mov	r2, r3
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <get_alarm+0x50>)
 8000826:	441a      	add	r2, r3
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <get_alarm+0x48>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <get_alarm+0x48>)
 8000830:	785b      	ldrb	r3, [r3, #1]
 8000832:	4619      	mov	r1, r3
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <get_alarm+0x48>)
 8000836:	789b      	ldrb	r3, [r3, #2]
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	9100      	str	r1, [sp, #0]
 800083c:	4603      	mov	r3, r0
 800083e:	4906      	ldr	r1, [pc, #24]	; (8000858 <get_alarm+0x54>)
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <get_alarm+0x58>)
 8000842:	f006 f9f1 	bl	8006c28 <siprintf>
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200009a4 	.word	0x200009a4
 8000850:	200003b8 	.word	0x200003b8
 8000854:	20000000 	.word	0x20000000
 8000858:	08007a74 	.word	0x08007a74
 800085c:	20000968 	.word	0x20000968

08000860 <get_time>:

void get_time(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000866:	2200      	movs	r2, #0
 8000868:	4918      	ldr	r1, [pc, #96]	; (80008cc <get_time+0x6c>)
 800086a:	4819      	ldr	r0, [pc, #100]	; (80008d0 <get_time+0x70>)
 800086c:	f004 fdb6 	bl	80053dc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000870:	2200      	movs	r2, #0
 8000872:	4918      	ldr	r1, [pc, #96]	; (80008d4 <get_time+0x74>)
 8000874:	4816      	ldr	r0, [pc, #88]	; (80008d0 <get_time+0x70>)
 8000876:	f004 fe93 	bl	80055a0 <HAL_RTC_GetDate>
	sprintf((char*)showTime, "%s %02d : %02d : %02d      ", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <get_time+0x6c>)
 800087c:	78db      	ldrb	r3, [r3, #3]
 800087e:	461a      	mov	r2, r3
 8000880:	4613      	mov	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <get_time+0x78>)
 8000888:	441a      	add	r2, r3
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <get_time+0x6c>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <get_time+0x6c>)
 8000892:	785b      	ldrb	r3, [r3, #1]
 8000894:	4619      	mov	r1, r3
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <get_time+0x6c>)
 8000898:	789b      	ldrb	r3, [r3, #2]
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	9100      	str	r1, [sp, #0]
 800089e:	4603      	mov	r3, r0
 80008a0:	490e      	ldr	r1, [pc, #56]	; (80008dc <get_time+0x7c>)
 80008a2:	480f      	ldr	r0, [pc, #60]	; (80008e0 <get_time+0x80>)
 80008a4:	f006 f9c0 	bl	8006c28 <siprintf>
	sprintf((char *)showDate, "%04d-%02d-%02d         ", 2000 + sDate.Year, sDate.Month, sDate.Date);
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <get_time+0x74>)
 80008aa:	78db      	ldrb	r3, [r3, #3]
 80008ac:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <get_time+0x74>)
 80008b2:	785b      	ldrb	r3, [r3, #1]
 80008b4:	4619      	mov	r1, r3
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <get_time+0x74>)
 80008b8:	789b      	ldrb	r3, [r3, #2]
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	460b      	mov	r3, r1
 80008be:	4909      	ldr	r1, [pc, #36]	; (80008e4 <get_time+0x84>)
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <get_time+0x88>)
 80008c2:	f006 f9b1 	bl	8006c28 <siprintf>
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000098c 	.word	0x2000098c
 80008d0:	200003b8 	.word	0x200003b8
 80008d4:	200009a0 	.word	0x200009a0
 80008d8:	20000000 	.word	0x20000000
 80008dc:	08007a74 	.word	0x08007a74
 80008e0:	20000928 	.word	0x20000928
 80008e4:	08007a90 	.word	0x08007a90
 80008e8:	20000948 	.word	0x20000948

080008ec <HAL_GPIO_EXTI_Callback>:
uint32_t ctime, ltime, interval;
int level;
uint32_t double_key_cnt;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	80fb      	strh	r3, [r7, #6]
if (GPIO_Pin == GPIO_PIN_7) {
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	2b80      	cmp	r3, #128	; 0x80
 80008fa:	d161      	bne.n	80009c0 <HAL_GPIO_EXTI_Callback+0xd4>
	ctime = HAL_GetTick();
 80008fc:	f001 f8e8 	bl	8001ad0 <HAL_GetTick>
 8000900:	4603      	mov	r3, r0
 8000902:	4a31      	ldr	r2, [pc, #196]	; (80009c8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000904:	6013      	str	r3, [r2, #0]
	interval = ctime - ltime;
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	4b30      	ldr	r3, [pc, #192]	; (80009cc <HAL_GPIO_EXTI_Callback+0xe0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	4a2f      	ldr	r2, [pc, #188]	; (80009d0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000912:	6013      	str	r3, [r2, #0]
	ltime = ctime;
 8000914:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a2c      	ldr	r2, [pc, #176]	; (80009cc <HAL_GPIO_EXTI_Callback+0xe0>)
 800091a:	6013      	str	r3, [r2, #0]
	level = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	482d      	ldr	r0, [pc, #180]	; (80009d4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000920:	f002 fe7e 	bl	8003620 <HAL_GPIO_ReadPin>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <HAL_GPIO_EXTI_Callback+0xec>)
 800092a:	601a      	str	r2, [r3, #0]

	if (level == 1) {
 800092c:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <HAL_GPIO_EXTI_Callback+0xec>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d143      	bne.n	80009bc <HAL_GPIO_EXTI_Callback+0xd0>
//  			printf("interval = %u, cnt: %u ", (unsigned int)interval, double_key_cnt);
		if (interval < 130) {
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b81      	cmp	r3, #129	; 0x81
 800093a:	d805      	bhi.n	8000948 <HAL_GPIO_EXTI_Callback+0x5c>
			double_key_cnt++;
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <HAL_GPIO_EXTI_Callback+0xf0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	4a26      	ldr	r2, [pc, #152]	; (80009dc <HAL_GPIO_EXTI_Callback+0xf0>)
 8000944:	6013      	str	r3, [r2, #0]
 8000946:	e02c      	b.n	80009a2 <HAL_GPIO_EXTI_Callback+0xb6>
		}
		else if (interval >= 130 && interval <= 200) {
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b81      	cmp	r3, #129	; 0x81
 800094e:	d91a      	bls.n	8000986 <HAL_GPIO_EXTI_Callback+0x9a>
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2bc8      	cmp	r3, #200	; 0xc8
 8000956:	d816      	bhi.n	8000986 <HAL_GPIO_EXTI_Callback+0x9a>
			printf("One click \r\n");
 8000958:	4821      	ldr	r0, [pc, #132]	; (80009e0 <HAL_GPIO_EXTI_Callback+0xf4>)
 800095a:	f006 f929 	bl	8006bb0 <puts>
			if (current_state.mode == NORMAL_STATE) {
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d108      	bne.n	8000978 <HAL_GPIO_EXTI_Callback+0x8c>
				current_state.mode = TIME_SETTING;
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
				setTime(hourMinSec);
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xfc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f000 f891 	bl	8000a98 <setTime>
 8000976:	e002      	b.n	800097e <HAL_GPIO_EXTI_Callback+0x92>
			}
			else {
				current_state.mode = NORMAL_STATE;
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_GPIO_EXTI_Callback+0xf8>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
			}
			double_key_cnt = 0;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_GPIO_EXTI_Callback+0xf0>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	e00d      	b.n	80009a2 <HAL_GPIO_EXTI_Callback+0xb6>
		}
		else if (interval >= 1000) {
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800098e:	d308      	bcc.n	80009a2 <HAL_GPIO_EXTI_Callback+0xb6>
			printf("long \r\n");
 8000990:	4816      	ldr	r0, [pc, #88]	; (80009ec <HAL_GPIO_EXTI_Callback+0x100>)
 8000992:	f006 f90d 	bl	8006bb0 <puts>
			current_state.mode = ALARM_TIME_SETTING;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000998:	2202      	movs	r2, #2
 800099a:	701a      	strb	r2, [r3, #0]
			double_key_cnt =0;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_GPIO_EXTI_Callback+0xf0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
		}
		if (double_key_cnt >= 3) {
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_GPIO_EXTI_Callback+0xf0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d908      	bls.n	80009bc <HAL_GPIO_EXTI_Callback+0xd0>
			printf("double~~~~~~~~~\r\n");
 80009aa:	4811      	ldr	r0, [pc, #68]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x104>)
 80009ac:	f006 f900 	bl	8006bb0 <puts>
			current_state.mode = MUSIC_SELECT;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_GPIO_EXTI_Callback+0xf8>)
 80009b2:	2203      	movs	r2, #3
 80009b4:	701a      	strb	r2, [r3, #0]
			double_key_cnt = 0;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_GPIO_EXTI_Callback+0xf0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
		}
	}
	time_display();
 80009bc:	f000 f81a 	bl	80009f4 <time_display>
  }
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200009d4 	.word	0x200009d4
 80009cc:	200009d8 	.word	0x200009d8
 80009d0:	200009dc 	.word	0x200009dc
 80009d4:	40021400 	.word	0x40021400
 80009d8:	200009e0 	.word	0x200009e0
 80009dc:	200009e4 	.word	0x200009e4
 80009e0:	08007aa8 	.word	0x08007aa8
 80009e4:	2000008c 	.word	0x2000008c
 80009e8:	20000988 	.word	0x20000988
 80009ec:	08007ab4 	.word	0x08007ab4
 80009f0:	08007abc 	.word	0x08007abc

080009f4 <time_display>:
void time_display(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  if (current_state.mode == NORMAL_STATE) {
 80009f8:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <time_display+0x8c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d112      	bne.n	8000a26 <time_display+0x32>
	  get_time();
 8000a00:	f7ff ff2e 	bl	8000860 <get_time>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	204e      	movs	r0, #78	; 0x4e
 8000a08:	f7ff fe8a 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showDate);
 8000a0c:	491d      	ldr	r1, [pc, #116]	; (8000a84 <time_display+0x90>)
 8000a0e:	204e      	movs	r0, #78	; 0x4e
 8000a10:	f7ff fec7 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000a14:	21c0      	movs	r1, #192	; 0xc0
 8000a16:	204e      	movs	r0, #78	; 0x4e
 8000a18:	f7ff fe82 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 8000a1c:	491a      	ldr	r1, [pc, #104]	; (8000a88 <time_display+0x94>)
 8000a1e:	204e      	movs	r0, #78	; 0x4e
 8000a20:	f7ff febf 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
	  LCD_SendString(LCD_ADDR, "Alarm Setting       ");
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
	  LCD_SendString(LCD_ADDR, alarmTime);
  }
}
 8000a24:	e02a      	b.n	8000a7c <time_display+0x88>
  else if (current_state.mode == TIME_SETTING){
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <time_display+0x8c>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d110      	bne.n	8000a50 <time_display+0x5c>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000a2e:	2180      	movs	r1, #128	; 0x80
 8000a30:	204e      	movs	r0, #78	; 0x4e
 8000a32:	f7ff fe75 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Time Setting      ");
 8000a36:	4915      	ldr	r1, [pc, #84]	; (8000a8c <time_display+0x98>)
 8000a38:	204e      	movs	r0, #78	; 0x4e
 8000a3a:	f7ff feb2 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000a3e:	21c0      	movs	r1, #192	; 0xc0
 8000a40:	204e      	movs	r0, #78	; 0x4e
 8000a42:	f7ff fe6d 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 8000a46:	4910      	ldr	r1, [pc, #64]	; (8000a88 <time_display+0x94>)
 8000a48:	204e      	movs	r0, #78	; 0x4e
 8000a4a:	f7ff feaa 	bl	80007a2 <LCD_SendString>
}
 8000a4e:	e015      	b.n	8000a7c <time_display+0x88>
  else if (current_state.mode == ALARM_TIME_SETTING) {
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <time_display+0x8c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d111      	bne.n	8000a7c <time_display+0x88>
	  get_alarm();
 8000a58:	f7ff fed4 	bl	8000804 <get_alarm>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	204e      	movs	r0, #78	; 0x4e
 8000a60:	f7ff fe5e 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Alarm Setting       ");
 8000a64:	490a      	ldr	r1, [pc, #40]	; (8000a90 <time_display+0x9c>)
 8000a66:	204e      	movs	r0, #78	; 0x4e
 8000a68:	f7ff fe9b 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000a6c:	21c0      	movs	r1, #192	; 0xc0
 8000a6e:	204e      	movs	r0, #78	; 0x4e
 8000a70:	f7ff fe56 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, alarmTime);
 8000a74:	4907      	ldr	r1, [pc, #28]	; (8000a94 <time_display+0xa0>)
 8000a76:	204e      	movs	r0, #78	; 0x4e
 8000a78:	f7ff fe93 	bl	80007a2 <LCD_SendString>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000008c 	.word	0x2000008c
 8000a84:	20000948 	.word	0x20000948
 8000a88:	20000928 	.word	0x20000928
 8000a8c:	08007ad0 	.word	0x08007ad0
 8000a90:	08007ae4 	.word	0x08007ae4
 8000a94:	20000968 	.word	0x20000968

08000a98 <setTime>:
void setTime(int hourMinSec) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	  leftright();
 8000aa0:	f000 f85c 	bl	8000b5c <leftright>
	if (hourMinSec == 1) {
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d10c      	bne.n	8000ac4 <setTime+0x2c>
		printf("Hour controlling \r\n");
 8000aaa:	4818      	ldr	r0, [pc, #96]	; (8000b0c <setTime+0x74>)
 8000aac:	f006 f880 	bl	8006bb0 <puts>
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4817      	ldr	r0, [pc, #92]	; (8000b10 <setTime+0x78>)
 8000ab4:	f002 fde5 	bl	8003682 <HAL_GPIO_TogglePin>
		updown(sTime.Hours);
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <setTime+0x7c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f82f 	bl	8000b20 <updown>
	} else if (hourMinSec == 3) {
		printf("Seconds controlling \r\n");
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
		updown(sTime.Seconds);
	}
}
 8000ac2:	e01f      	b.n	8000b04 <setTime+0x6c>
	} else if (hourMinSec == 2) {
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d10c      	bne.n	8000ae4 <setTime+0x4c>
		printf("Minute controlling  \r\n");
 8000aca:	4813      	ldr	r0, [pc, #76]	; (8000b18 <setTime+0x80>)
 8000acc:	f006 f870 	bl	8006bb0 <puts>
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	480f      	ldr	r0, [pc, #60]	; (8000b10 <setTime+0x78>)
 8000ad4:	f002 fdd5 	bl	8003682 <HAL_GPIO_TogglePin>
		updown(sTime.Minutes);
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <setTime+0x7c>)
 8000ada:	785b      	ldrb	r3, [r3, #1]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f81f 	bl	8000b20 <updown>
}
 8000ae2:	e00f      	b.n	8000b04 <setTime+0x6c>
	} else if (hourMinSec == 3) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d10c      	bne.n	8000b04 <setTime+0x6c>
		printf("Seconds controlling \r\n");
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <setTime+0x84>)
 8000aec:	f006 f860 	bl	8006bb0 <puts>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <setTime+0x78>)
 8000af6:	f002 fdc4 	bl	8003682 <HAL_GPIO_TogglePin>
		updown(sTime.Seconds);
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <setTime+0x7c>)
 8000afc:	789b      	ldrb	r3, [r3, #2]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f80e 	bl	8000b20 <updown>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08007afc 	.word	0x08007afc
 8000b10:	40020400 	.word	0x40020400
 8000b14:	2000098c 	.word	0x2000098c
 8000b18:	08007b10 	.word	0x08007b10
 8000b1c:	08007b28 	.word	0x08007b28

08000b20 <updown>:
void updown(uint8_t timePosition) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  if (XY[1] < 100) {
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <updown+0x38>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2b63      	cmp	r3, #99	; 0x63
 8000b30:	d803      	bhi.n	8000b3a <updown+0x1a>
	  timePosition--;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	71fb      	strb	r3, [r7, #7]
  } else if (XY[1] > 900) {
	  timePosition++;
  }
}
 8000b38:	e007      	b.n	8000b4a <updown+0x2a>
  } else if (XY[1] > 900) {
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <updown+0x38>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000b42:	d902      	bls.n	8000b4a <updown+0x2a>
	  timePosition++;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	3301      	adds	r3, #1
 8000b48:	71fb      	strb	r3, [r7, #7]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200009cc 	.word	0x200009cc

08000b5c <leftright>:

void leftright() {
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  if (XY[0] < 100) {
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <leftright+0x4c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b63      	cmp	r3, #99	; 0x63
 8000b66:	d805      	bhi.n	8000b74 <leftright+0x18>
	  hourMinSec++;
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <leftright+0x50>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <leftright+0x50>)
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	e009      	b.n	8000b88 <leftright+0x2c>
  } else if (XY[0] > 900) {
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <leftright+0x4c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000b7c:	d904      	bls.n	8000b88 <leftright+0x2c>
	  hourMinSec--;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <leftright+0x50>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	4a09      	ldr	r2, [pc, #36]	; (8000bac <leftright+0x50>)
 8000b86:	6013      	str	r3, [r2, #0]
  }
  hourMinSec %= 4;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <leftright+0x50>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	425a      	negs	r2, r3
 8000b8e:	f003 0303 	and.w	r3, r3, #3
 8000b92:	f002 0203 	and.w	r2, r2, #3
 8000b96:	bf58      	it	pl
 8000b98:	4253      	negpl	r3, r2
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <leftright+0x50>)
 8000b9c:	6013      	str	r3, [r2, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	200009cc 	.word	0x200009cc
 8000bac:	20000988 	.word	0x20000988

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb4:	f000 ff26 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb8:	f000 f84a 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbc:	f000 fab8 	bl	8001130 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc0:	f000 fa96 	bl	80010f0 <MX_DMA_Init>
  MX_ETH_Init();
 8000bc4:	f000 f91c 	bl	8000e00 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000bc8:	f000 fa3a 	bl	8001040 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bcc:	f000 fa62 	bl	8001094 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000bd0:	f000 f964 	bl	8000e9c <MX_I2C1_Init>
  MX_RTC_Init();
 8000bd4:	f000 f9a2 	bl	8000f1c <MX_RTC_Init>
  MX_ADC1_Init();
 8000bd8:	f000 f8b2 	bl	8000d40 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000bdc:	f000 f8a4 	bl	8000d28 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scan();
 8000be0:	f7ff fcdc 	bl	800059c <I2C_Scan>
  LCD_Init(LCD_ADDR);
 8000be4:	204e      	movs	r0, #78	; 0x4e
 8000be6:	f7ff fdbf 	bl	8000768 <LCD_Init>
  HAL_ADC_Start_DMA(&hadc1, XY, 2);
 8000bea:	2202      	movs	r2, #2
 8000bec:	4911      	ldr	r1, [pc, #68]	; (8000c34 <main+0x84>)
 8000bee:	4812      	ldr	r0, [pc, #72]	; (8000c38 <main+0x88>)
 8000bf0:	f000 ffe2 	bl	8001bb8 <HAL_ADC_Start_DMA>

  current_state.mode = NORMAL_STATE;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <main+0x8c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  time_display();
 8000bfa:	f7ff fefb 	bl	80009f4 <time_display>
	  HAL_UART_Transmit(&huart3, (uint8_t *)&showTime, strlen(showTime), 1000);
 8000bfe:	4810      	ldr	r0, [pc, #64]	; (8000c40 <main+0x90>)
 8000c00:	f7ff faf6 	bl	80001f0 <strlen>
 8000c04:	4603      	mov	r3, r0
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <main+0x90>)
 8000c0e:	480d      	ldr	r0, [pc, #52]	; (8000c44 <main+0x94>)
 8000c10:	f005 f842 	bl	8005c98 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t *)&showDate, strlen(showDate), 1000);
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <main+0x98>)
 8000c16:	f7ff faeb 	bl	80001f0 <strlen>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	4909      	ldr	r1, [pc, #36]	; (8000c48 <main+0x98>)
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <main+0x94>)
 8000c26:	f005 f837 	bl	8005c98 <HAL_UART_Transmit>

	  printf("\r\n");
 8000c2a:	4808      	ldr	r0, [pc, #32]	; (8000c4c <main+0x9c>)
 8000c2c:	f005 ffc0 	bl	8006bb0 <puts>
	  time_display();
 8000c30:	e7e3      	b.n	8000bfa <main+0x4a>
 8000c32:	bf00      	nop
 8000c34:	200009cc 	.word	0x200009cc
 8000c38:	2000020c 	.word	0x2000020c
 8000c3c:	2000008c 	.word	0x2000008c
 8000c40:	20000928 	.word	0x20000928
 8000c44:	200003d8 	.word	0x200003d8
 8000c48:	20000948 	.word	0x20000948
 8000c4c:	08007b40 	.word	0x08007b40

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2230      	movs	r2, #48	; 0x30
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f006 f8da 	bl	8006e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <SystemClock_Config+0xd4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <SystemClock_Config+0xd4>)
 8000c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <SystemClock_Config+0xd4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000cac:	2305      	movs	r3, #5
 8000cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cb0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cc8:	23a8      	movs	r3, #168	; 0xa8
 8000cca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd4:	f107 0320 	add.w	r3, r7, #32
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fc17 	bl	800450c <HAL_RCC_OscConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ce4:	f000 fafc 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce8:	230f      	movs	r3, #15
 8000cea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cec:	2302      	movs	r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cf4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2105      	movs	r1, #5
 8000d06:	4618      	mov	r0, r3
 8000d08:	f003 fe78 	bl	80049fc <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d12:	f000 fae5 	bl	80012e0 <Error_Handler>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3750      	adds	r7, #80	; 0x50
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40007000 	.word	0x40007000

08000d28 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2017      	movs	r0, #23
 8000d32:	f001 fbfa 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d36:	2017      	movs	r0, #23
 8000d38:	f001 fc13 	bl	8002562 <HAL_NVIC_EnableIRQ>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d46:	463b      	mov	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d52:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000d54:	4a28      	ldr	r2, [pc, #160]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000d56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d58:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000d5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d66:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d6c:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000d82:	4a1e      	ldr	r2, [pc, #120]	; (8000dfc <MX_ADC1_Init+0xbc>)
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da0:	4814      	ldr	r0, [pc, #80]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000da2:	f000 fec5 	bl	8001b30 <HAL_ADC_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dac:	f000 fa98 	bl	80012e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000db0:	230d      	movs	r3, #13
 8000db2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000db8:	2304      	movs	r3, #4
 8000dba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000dc2:	f001 f827 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dcc:	f000 fa88 	bl	80012e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dd0:	230a      	movs	r3, #10
 8000dd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_ADC1_Init+0xb4>)
 8000dde:	f001 f819 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000de8:	f000 fa7a 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	2000020c 	.word	0x2000020c
 8000df8:	40012000 	.word	0x40012000
 8000dfc:	0f000001 	.word	0x0f000001

08000e00 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <MX_ETH_Init+0x84>)
 8000e06:	4a20      	ldr	r2, [pc, #128]	; (8000e88 <MX_ETH_Init+0x88>)
 8000e08:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <MX_ETH_Init+0x8c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <MX_ETH_Init+0x8c>)
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <MX_ETH_Init+0x8c>)
 8000e18:	22e1      	movs	r2, #225	; 0xe1
 8000e1a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_ETH_Init+0x8c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_ETH_Init+0x8c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_ETH_Init+0x8c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_ETH_Init+0x84>)
 8000e30:	4a16      	ldr	r2, [pc, #88]	; (8000e8c <MX_ETH_Init+0x8c>)
 8000e32:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_ETH_Init+0x84>)
 8000e36:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e3a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_ETH_Init+0x84>)
 8000e3e:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <MX_ETH_Init+0x90>)
 8000e40:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_ETH_Init+0x84>)
 8000e44:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <MX_ETH_Init+0x94>)
 8000e46:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_ETH_Init+0x84>)
 8000e4a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e4e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <MX_ETH_Init+0x84>)
 8000e52:	f001 ff11 	bl	8002c78 <HAL_ETH_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000e5c:	f000 fa40 	bl	80012e0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e60:	2238      	movs	r2, #56	; 0x38
 8000e62:	2100      	movs	r1, #0
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <MX_ETH_Init+0x98>)
 8000e66:	f005 ffd7 	bl	8006e18 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_ETH_Init+0x98>)
 8000e6c:	2221      	movs	r2, #33	; 0x21
 8000e6e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_ETH_Init+0x98>)
 8000e72:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000e76:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <MX_ETH_Init+0x98>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200002b4 	.word	0x200002b4
 8000e88:	40028000 	.word	0x40028000
 8000e8c:	200009e8 	.word	0x200009e8
 8000e90:	2000016c 	.word	0x2000016c
 8000e94:	200000cc 	.word	0x200000cc
 8000e98:	20000094 	.word	0x20000094

08000e9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <MX_I2C1_Init+0x78>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <MX_I2C1_Init+0x7c>)
 8000eaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000eba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ebe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000eda:	f002 fc05 	bl	80036e8 <HAL_I2C_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ee4:	f000 f9fc 	bl	80012e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000eec:	f003 f975 	bl	80041da <HAL_I2CEx_ConfigAnalogFilter>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000ef6:	f000 f9f3 	bl	80012e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000efe:	f003 f9a8 	bl	8004252 <HAL_I2CEx_ConfigDigitalFilter>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000f08:	f000 f9ea 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000364 	.word	0x20000364
 8000f14:	40005400 	.word	0x40005400
 8000f18:	000186a0 	.word	0x000186a0

08000f1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b090      	sub	sp, #64	; 0x40
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f32:	2300      	movs	r3, #0
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000f36:	463b      	mov	r3, r7
 8000f38:	2228      	movs	r2, #40	; 0x28
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f005 ff6b 	bl	8006e18 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <MX_RTC_Init+0x11c>)
 8000f44:	4a3d      	ldr	r2, [pc, #244]	; (800103c <MX_RTC_Init+0x120>)
 8000f46:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000f48:	4b3b      	ldr	r3, [pc, #236]	; (8001038 <MX_RTC_Init+0x11c>)
 8000f4a:	2240      	movs	r2, #64	; 0x40
 8000f4c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f4e:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <MX_RTC_Init+0x11c>)
 8000f50:	227f      	movs	r2, #127	; 0x7f
 8000f52:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f54:	4b38      	ldr	r3, [pc, #224]	; (8001038 <MX_RTC_Init+0x11c>)
 8000f56:	22ff      	movs	r2, #255	; 0xff
 8000f58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <MX_RTC_Init+0x11c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <MX_RTC_Init+0x11c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <MX_RTC_Init+0x11c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f6c:	4832      	ldr	r0, [pc, #200]	; (8001038 <MX_RTC_Init+0x11c>)
 8000f6e:	f004 f925 	bl	80051bc <HAL_RTC_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000f78:	f000 f9b2 	bl	80012e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4824      	ldr	r0, [pc, #144]	; (8001038 <MX_RTC_Init+0x11c>)
 8000fa6:	f004 f97f 	bl	80052a8 <HAL_RTC_SetTime>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000fb0:	f000 f996 	bl	80012e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 8000fba:	2311      	movs	r3, #17
 8000fbc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x6;
 8000fc0:	2306      	movs	r3, #6
 8000fc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x23;
 8000fc6:	2323      	movs	r3, #35	; 0x23
 8000fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000fcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4818      	ldr	r0, [pc, #96]	; (8001038 <MX_RTC_Init+0x11c>)
 8000fd6:	f004 fa5f 	bl	8005498 <HAL_RTC_SetDate>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000fe0:	f000 f97e 	bl	80012e0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000fec:	2330      	movs	r3, #48	; 0x30
 8000fee:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001000:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001004:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800100e:	2301      	movs	r3, #1
 8001010:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800101a:	463b      	mov	r3, r7
 800101c:	2201      	movs	r2, #1
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_RTC_Init+0x11c>)
 8001022:	f004 fb0d 	bl	8005640 <HAL_RTC_SetAlarm_IT>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 800102c:	f000 f958 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
//  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD);
  /* USER CODE END RTC_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3740      	adds	r7, #64	; 0x40
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200003b8 	.word	0x200003b8
 800103c:	40002800 	.word	0x40002800

08001040 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_USART3_UART_Init+0x4c>)
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <MX_USART3_UART_Init+0x50>)
 8001048:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <MX_USART3_UART_Init+0x4c>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_USART3_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_USART3_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_USART3_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_USART3_UART_Init+0x4c>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_USART3_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_USART3_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_USART3_UART_Init+0x4c>)
 8001078:	f004 fdc1 	bl	8005bfe <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001082:	f000 f92d 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200003d8 	.word	0x200003d8
 8001090:	40004800 	.word	0x40004800

08001094 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800109a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800109e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a2:	2204      	movs	r2, #4
 80010a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a8:	2202      	movs	r2, #2
 80010aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b4:	2202      	movs	r2, #2
 80010b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d8:	f003 f8fa 	bl	80042d0 <HAL_PCD_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010e2:	f000 f8fd 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000041c 	.word	0x2000041c

080010f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_DMA_Init+0x3c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <MX_DMA_Init+0x3c>)
 8001100:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_DMA_Init+0x3c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2038      	movs	r0, #56	; 0x38
 8001118:	f001 fa07 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800111c:	2038      	movs	r0, #56	; 0x38
 800111e:	f001 fa20 	bl	8002562 <HAL_NVIC_EnableIRQ>

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	4b59      	ldr	r3, [pc, #356]	; (80012b0 <MX_GPIO_Init+0x180>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a58      	ldr	r2, [pc, #352]	; (80012b0 <MX_GPIO_Init+0x180>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b56      	ldr	r3, [pc, #344]	; (80012b0 <MX_GPIO_Init+0x180>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	4b52      	ldr	r3, [pc, #328]	; (80012b0 <MX_GPIO_Init+0x180>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a51      	ldr	r2, [pc, #324]	; (80012b0 <MX_GPIO_Init+0x180>)
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b4f      	ldr	r3, [pc, #316]	; (80012b0 <MX_GPIO_Init+0x180>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b4b      	ldr	r3, [pc, #300]	; (80012b0 <MX_GPIO_Init+0x180>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a4a      	ldr	r2, [pc, #296]	; (80012b0 <MX_GPIO_Init+0x180>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <MX_GPIO_Init+0x180>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <MX_GPIO_Init+0x180>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a43      	ldr	r2, [pc, #268]	; (80012b0 <MX_GPIO_Init+0x180>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <MX_GPIO_Init+0x180>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <MX_GPIO_Init+0x180>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <MX_GPIO_Init+0x180>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <MX_GPIO_Init+0x180>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <MX_GPIO_Init+0x180>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a35      	ldr	r2, [pc, #212]	; (80012b0 <MX_GPIO_Init+0x180>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <MX_GPIO_Init+0x180>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <MX_GPIO_Init+0x180>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <MX_GPIO_Init+0x180>)
 80011f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <MX_GPIO_Init+0x180>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001210:	4828      	ldr	r0, [pc, #160]	; (80012b4 <MX_GPIO_Init+0x184>)
 8001212:	f002 fa1d 	bl	8003650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2140      	movs	r1, #64	; 0x40
 800121a:	4827      	ldr	r0, [pc, #156]	; (80012b8 <MX_GPIO_Init+0x188>)
 800121c:	f002 fa18 	bl	8003650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001226:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800122a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4821      	ldr	r0, [pc, #132]	; (80012bc <MX_GPIO_Init+0x18c>)
 8001238:	f002 f846 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : setBtn_Pin */
  GPIO_InitStruct.Pin = setBtn_Pin;
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001240:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001246:	2301      	movs	r3, #1
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(setBtn_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	481b      	ldr	r0, [pc, #108]	; (80012c0 <MX_GPIO_Init+0x190>)
 8001252:	f002 f839 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001256:	f244 0381 	movw	r3, #16513	; 0x4081
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	4811      	ldr	r0, [pc, #68]	; (80012b4 <MX_GPIO_Init+0x184>)
 8001270:	f002 f82a 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001274:	2340      	movs	r3, #64	; 0x40
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	480b      	ldr	r0, [pc, #44]	; (80012b8 <MX_GPIO_Init+0x188>)
 800128c:	f002 f81c 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_GPIO_Init+0x188>)
 80012a4:	f002 f810 	bl	80032c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a8:	bf00      	nop
 80012aa:	3730      	adds	r7, #48	; 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40021800 	.word	0x40021800
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40021400 	.word	0x40021400

080012c4 <HAL_RTC_AlarmAEventCallback>:
/*
 * Double click : time_interval = 100~200ms
 * Long Key : time_interval = 20~50ms in 30 consecutive times
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  printf("alarm~! \r\n");
 80012cc:	4803      	ldr	r0, [pc, #12]	; (80012dc <HAL_RTC_AlarmAEventCallback+0x18>)
 80012ce:	f005 fc6f 	bl	8006bb0 <puts>

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	08007b44 	.word	0x08007b44

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <Error_Handler+0x8>
	...

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <HAL_MspInit+0x4c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_MspInit+0x4c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <HAL_ADC_MspInit+0xdc>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d157      	bne.n	800140e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <HAL_ADC_MspInit+0xe0>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a2d      	ldr	r2, [pc, #180]	; (800141c <HAL_ADC_MspInit+0xe0>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HAL_ADC_MspInit+0xe0>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_ADC_MspInit+0xe0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a26      	ldr	r2, [pc, #152]	; (800141c <HAL_ADC_MspInit+0xe0>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_ADC_MspInit+0xe0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001396:	2309      	movs	r3, #9
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139a:	2303      	movs	r3, #3
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	481d      	ldr	r0, [pc, #116]	; (8001420 <HAL_ADC_MspInit+0xe4>)
 80013aa:	f001 ff8d 	bl	80032c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_ADC_MspInit+0xe8>)
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_ADC_MspInit+0xec>)
 80013b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_ADC_MspInit+0xe8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <HAL_ADC_MspInit+0xe8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_ADC_MspInit+0xe8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_ADC_MspInit+0xe8>)
 80013c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_ADC_MspInit+0xe8>)
 80013d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_ADC_MspInit+0xe8>)
 80013d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_ADC_MspInit+0xe8>)
 80013e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_ADC_MspInit+0xe8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <HAL_ADC_MspInit+0xe8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013f2:	480c      	ldr	r0, [pc, #48]	; (8001424 <HAL_ADC_MspInit+0xe8>)
 80013f4:	f001 f8d0 	bl	8002598 <HAL_DMA_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80013fe:	f7ff ff6f 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_ADC_MspInit+0xe8>)
 8001406:	639a      	str	r2, [r3, #56]	; 0x38
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_ADC_MspInit+0xe8>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	; 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40012000 	.word	0x40012000
 800141c:	40023800 	.word	0x40023800
 8001420:	40020800 	.word	0x40020800
 8001424:	20000254 	.word	0x20000254
 8001428:	40026410 	.word	0x40026410

0800142c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08e      	sub	sp, #56	; 0x38
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a55      	ldr	r2, [pc, #340]	; (80015a0 <HAL_ETH_MspInit+0x174>)
 800144a:	4293      	cmp	r3, r2
 800144c:	f040 80a4 	bne.w	8001598 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
 8001454:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 800145a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4a4b      	ldr	r2, [pc, #300]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 8001476:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800147a:	6313      	str	r3, [r2, #48]	; 0x30
 800147c:	4b49      	ldr	r3, [pc, #292]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	4b45      	ldr	r3, [pc, #276]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a44      	ldr	r2, [pc, #272]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 8001492:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	4a3d      	ldr	r2, [pc, #244]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	6313      	str	r3, [r2, #48]	; 0x30
 80014b4:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a36      	ldr	r2, [pc, #216]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	6313      	str	r3, [r2, #48]	; 0x30
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	4a28      	ldr	r2, [pc, #160]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 8001502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001506:	6313      	str	r3, [r2, #48]	; 0x30
 8001508:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <HAL_ETH_MspInit+0x178>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001514:	2332      	movs	r3, #50	; 0x32
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001524:	230b      	movs	r3, #11
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	481e      	ldr	r0, [pc, #120]	; (80015a8 <HAL_ETH_MspInit+0x17c>)
 8001530:	f001 feca 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001534:	2386      	movs	r3, #134	; 0x86
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001544:	230b      	movs	r3, #11
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	4619      	mov	r1, r3
 800154e:	4817      	ldr	r0, [pc, #92]	; (80015ac <HAL_ETH_MspInit+0x180>)
 8001550:	f001 feba 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001566:	230b      	movs	r3, #11
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	480f      	ldr	r0, [pc, #60]	; (80015b0 <HAL_ETH_MspInit+0x184>)
 8001572:	f001 fea9 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001576:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001588:	230b      	movs	r3, #11
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	4808      	ldr	r0, [pc, #32]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 8001594:	f001 fe98 	bl	80032c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3738      	adds	r7, #56	; 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40028000 	.word	0x40028000
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020000 	.word	0x40020000
 80015b0:	40020400 	.word	0x40020400
 80015b4:	40021800 	.word	0x40021800

080015b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a19      	ldr	r2, [pc, #100]	; (800163c <HAL_I2C_MspInit+0x84>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d12c      	bne.n	8001634 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_I2C_MspInit+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_I2C_MspInit+0x88>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_I2C_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fc:	2312      	movs	r3, #18
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001608:	2304      	movs	r3, #4
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	480c      	ldr	r0, [pc, #48]	; (8001644 <HAL_I2C_MspInit+0x8c>)
 8001614:	f001 fe58 	bl	80032c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_I2C_MspInit+0x88>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_I2C_MspInit+0x88>)
 8001622:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001626:	6413      	str	r3, [r2, #64]	; 0x40
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_I2C_MspInit+0x88>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40005400 	.word	0x40005400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400

08001648 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08e      	sub	sp, #56	; 0x38
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	2230      	movs	r2, #48	; 0x30
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f005 fbdd 	bl	8006e18 <memset>
  if(hrtc->Instance==RTC)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <HAL_RTC_MspInit+0x5c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d119      	bne.n	800169c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001668:	2320      	movs	r3, #32
 800166a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800166c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	4618      	mov	r0, r3
 8001678:	f003 fbe0 	bl	8004e3c <HAL_RCCEx_PeriphCLKConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001682:	f7ff fe2d 	bl	80012e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_RTC_MspInit+0x60>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	2029      	movs	r0, #41	; 0x29
 8001692:	f000 ff4a 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001696:	2029      	movs	r0, #41	; 0x29
 8001698:	f000 ff63 	bl	8002562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800169c:	bf00      	nop
 800169e:	3738      	adds	r7, #56	; 0x38
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40002800 	.word	0x40002800
 80016a8:	42470e3c 	.word	0x42470e3c

080016ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_UART_MspInit+0x84>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12c      	bne.n	8001728 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001718:	2307      	movs	r3, #7
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <HAL_UART_MspInit+0x8c>)
 8001724:	f001 fdd0 	bl	80032c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	; 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40004800 	.word	0x40004800
 8001734:	40023800 	.word	0x40023800
 8001738:	40020c00 	.word	0x40020c00

0800173c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175c:	d13f      	bne.n	80017de <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800177a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800178c:	230a      	movs	r3, #10
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	4815      	ldr	r0, [pc, #84]	; (80017ec <HAL_PCD_MspInit+0xb0>)
 8001798:	f001 fd96 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800179c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	480e      	ldr	r0, [pc, #56]	; (80017ec <HAL_PCD_MspInit+0xb0>)
 80017b2:	f001 fd89 	bl	80032c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 80017b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 80017bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c0:	6353      	str	r3, [r2, #52]	; 0x34
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_PCD_MspInit+0xac>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183c:	f000 f934 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(setBtn_Pin);
 8001848:	2080      	movs	r0, #128	; 0x80
 800184a:	f001 ff35 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <RTC_Alarm_IRQHandler+0x10>)
 800185a:	f004 f8c3 	bl	80059e4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200003b8 	.word	0x200003b8

08001868 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <DMA2_Stream0_IRQHandler+0x10>)
 800186e:	f000 ff99 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000254 	.word	0x20000254

0800187c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	e00a      	b.n	80018a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800188e:	f3af 8000 	nop.w
 8001892:	4601      	mov	r1, r0
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	60ba      	str	r2, [r7, #8]
 800189a:	b2ca      	uxtb	r2, r1
 800189c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dbf0      	blt.n	800188e <_read+0x12>
  }

  return len;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018de:	605a      	str	r2, [r3, #4]
  return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_isatty>:

int _isatty(int file)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f005 fab0 	bl	8006eb4 <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20030000 	.word	0x20030000
 8001980:	00000400 	.word	0x00000400
 8001984:	200009f0 	.word	0x200009f0
 8001988:	20000b48 	.word	0x20000b48

0800198c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019b6:	490e      	ldr	r1, [pc, #56]	; (80019f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019cc:	4c0b      	ldr	r4, [pc, #44]	; (80019fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019da:	f7ff ffd7 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f005 fa6f 	bl	8006ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff f8e5 	bl	8000bb0 <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019f4:	08007bb4 	.word	0x08007bb4
  ldr r2, =_sbss
 80019f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019fc:	20000b44 	.word	0x20000b44

08001a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_Init+0x40>)
 8001a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_Init+0x40>)
 8001a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x40>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 fd71 	bl	8002514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 f808 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fc58 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x54>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x58>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 fd89 	bl	800257e <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f000 fd51 	bl	800252a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_InitTick+0x5c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20000010 	.word	0x20000010
 8001aa4:	2000000c 	.word	0x2000000c

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000010 	.word	0x20000010
 8001acc:	200009f4 	.word	0x200009f4

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	200009f4 	.word	0x200009f4

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000010 	.word	0x20000010

08001b30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e033      	b.n	8001bae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fbf4 	bl	800133c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d118      	bne.n	8001ba0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b76:	f023 0302 	bic.w	r3, r3, #2
 8001b7a:	f043 0202 	orr.w	r2, r3, #2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fa78 	bl	8002078 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f023 0303 	bic.w	r3, r3, #3
 8001b96:	f043 0201 	orr.w	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b9e:	e001      	b.n	8001ba4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_Start_DMA+0x1e>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e0e9      	b.n	8001daa <HAL_ADC_Start_DMA+0x1f2>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d018      	beq.n	8001c1e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfc:	4b6d      	ldr	r3, [pc, #436]	; (8001db4 <HAL_ADC_Start_DMA+0x1fc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6d      	ldr	r2, [pc, #436]	; (8001db8 <HAL_ADC_Start_DMA+0x200>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0c9a      	lsrs	r2, r3, #18
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c10:	e002      	b.n	8001c18 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f9      	bne.n	8001c12 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c2c:	d107      	bne.n	8001c3e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	f040 80a1 	bne.w	8001d90 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c8c:	d106      	bne.n	8001c9c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f023 0206 	bic.w	r2, r3, #6
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	645a      	str	r2, [r3, #68]	; 0x44
 8001c9a:	e002      	b.n	8001ca2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001caa:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <HAL_ADC_Start_DMA+0x204>)
 8001cac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb2:	4a43      	ldr	r2, [pc, #268]	; (8001dc0 <HAL_ADC_Start_DMA+0x208>)
 8001cb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	4a42      	ldr	r2, [pc, #264]	; (8001dc4 <HAL_ADC_Start_DMA+0x20c>)
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	4a41      	ldr	r2, [pc, #260]	; (8001dc8 <HAL_ADC_Start_DMA+0x210>)
 8001cc4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001cde:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	334c      	adds	r3, #76	; 0x4c
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f000 fcf8 	bl	80026f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d12a      	bne.n	8001d66 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2d      	ldr	r2, [pc, #180]	; (8001dcc <HAL_ADC_Start_DMA+0x214>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d015      	beq.n	8001d46 <HAL_ADC_Start_DMA+0x18e>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2c      	ldr	r2, [pc, #176]	; (8001dd0 <HAL_ADC_Start_DMA+0x218>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d105      	bne.n	8001d30 <HAL_ADC_Start_DMA+0x178>
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_ADC_Start_DMA+0x204>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00a      	beq.n	8001d46 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a27      	ldr	r2, [pc, #156]	; (8001dd4 <HAL_ADC_Start_DMA+0x21c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d136      	bne.n	8001da8 <HAL_ADC_Start_DMA+0x1f0>
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_ADC_Start_DMA+0x204>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d130      	bne.n	8001da8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d129      	bne.n	8001da8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	e020      	b.n	8001da8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <HAL_ADC_Start_DMA+0x214>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d11b      	bne.n	8001da8 <HAL_ADC_Start_DMA+0x1f0>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d114      	bne.n	8001da8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	e00b      	b.n	8001da8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f043 0210 	orr.w	r2, r3, #16
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000008 	.word	0x20000008
 8001db8:	431bde83 	.word	0x431bde83
 8001dbc:	40012300 	.word	0x40012300
 8001dc0:	08002271 	.word	0x08002271
 8001dc4:	0800232b 	.word	0x0800232b
 8001dc8:	08002347 	.word	0x08002347
 8001dcc:	40012000 	.word	0x40012000
 8001dd0:	40012100 	.word	0x40012100
 8001dd4:	40012200 	.word	0x40012200

08001dd8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x1c>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e113      	b.n	8002058 <HAL_ADC_ConfigChannel+0x244>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d925      	bls.n	8001e8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68d9      	ldr	r1, [r3, #12]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	3b1e      	subs	r3, #30
 8001e56:	2207      	movs	r2, #7
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	400a      	ands	r2, r1
 8001e64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68d9      	ldr	r1, [r3, #12]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	4603      	mov	r3, r0
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4403      	add	r3, r0
 8001e7e:	3b1e      	subs	r3, #30
 8001e80:	409a      	lsls	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	e022      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6919      	ldr	r1, [r3, #16]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	400a      	ands	r2, r1
 8001eae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6919      	ldr	r1, [r3, #16]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4403      	add	r3, r0
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d824      	bhi.n	8001f24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	3b05      	subs	r3, #5
 8001eec:	221f      	movs	r2, #31
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	400a      	ands	r2, r1
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	3b05      	subs	r3, #5
 8001f16:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	635a      	str	r2, [r3, #52]	; 0x34
 8001f22:	e04c      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b0c      	cmp	r3, #12
 8001f2a:	d824      	bhi.n	8001f76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b23      	subs	r3, #35	; 0x23
 8001f3e:	221f      	movs	r2, #31
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43da      	mvns	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	3b23      	subs	r3, #35	; 0x23
 8001f68:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30
 8001f74:	e023      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	3b41      	subs	r3, #65	; 0x41
 8001f88:	221f      	movs	r2, #31
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	400a      	ands	r2, r1
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b41      	subs	r3, #65	; 0x41
 8001fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <HAL_ADC_ConfigChannel+0x250>)
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a28      	ldr	r2, [pc, #160]	; (8002068 <HAL_ADC_ConfigChannel+0x254>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d10f      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1d8>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b12      	cmp	r3, #18
 8001fd2:	d10b      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_ADC_ConfigChannel+0x254>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d12b      	bne.n	800204e <HAL_ADC_ConfigChannel+0x23a>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1c      	ldr	r2, [pc, #112]	; (800206c <HAL_ADC_ConfigChannel+0x258>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d003      	beq.n	8002008 <HAL_ADC_ConfigChannel+0x1f4>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b11      	cmp	r3, #17
 8002006:	d122      	bne.n	800204e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_ADC_ConfigChannel+0x258>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d111      	bne.n	800204e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_ADC_ConfigChannel+0x25c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a11      	ldr	r2, [pc, #68]	; (8002074 <HAL_ADC_ConfigChannel+0x260>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	0c9a      	lsrs	r2, r3, #18
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002040:	e002      	b.n	8002048 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	3b01      	subs	r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f9      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	40012300 	.word	0x40012300
 8002068:	40012000 	.word	0x40012000
 800206c:	10000012 	.word	0x10000012
 8002070:	20000008 	.word	0x20000008
 8002074:	431bde83 	.word	0x431bde83

08002078 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002080:	4b79      	ldr	r3, [pc, #484]	; (8002268 <ADC_Init+0x1f0>)
 8002082:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	431a      	orrs	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	021a      	lsls	r2, r3, #8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6899      	ldr	r1, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	4a58      	ldr	r2, [pc, #352]	; (800226c <ADC_Init+0x1f4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d022      	beq.n	8002156 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800211e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6899      	ldr	r1, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002140:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6899      	ldr	r1, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	e00f      	b.n	8002176 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002164:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002174:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0202 	bic.w	r2, r2, #2
 8002184:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6899      	ldr	r1, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7e1b      	ldrb	r3, [r3, #24]
 8002190:	005a      	lsls	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d01b      	beq.n	80021dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6859      	ldr	r1, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	3b01      	subs	r3, #1
 80021d0:	035a      	lsls	r2, r3, #13
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	e007      	b.n	80021ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	3b01      	subs	r3, #1
 8002208:	051a      	lsls	r2, r3, #20
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002220:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6899      	ldr	r1, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800222e:	025a      	lsls	r2, r3, #9
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002246:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6899      	ldr	r1, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	029a      	lsls	r2, r3, #10
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40012300 	.word	0x40012300
 800226c:	0f000001 	.word	0x0f000001

08002270 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002286:	2b00      	cmp	r3, #0
 8002288:	d13c      	bne.n	8002304 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d12b      	bne.n	80022fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d127      	bne.n	80022fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d006      	beq.n	80022c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d119      	bne.n	80022fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0220 	bic.w	r2, r2, #32
 80022d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d105      	bne.n	80022fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f7ff fd6b 	bl	8001dd8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002302:	e00e      	b.n	8002322 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f7ff fd75 	bl	8001e00 <HAL_ADC_ErrorCallback>
}
 8002316:	e004      	b.n	8002322 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f7ff fd57 	bl	8001dec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2240      	movs	r2, #64	; 0x40
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f043 0204 	orr.w	r2, r3, #4
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f7ff fd4a 	bl	8001e00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800239c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <__NVIC_GetPriorityGrouping+0x18>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 0307 	and.w	r3, r3, #7
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	db0b      	blt.n	8002402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4907      	ldr	r1, [pc, #28]	; (8002410 <__NVIC_EnableIRQ+0x38>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2001      	movs	r0, #1
 80023fa:	fa00 f202 	lsl.w	r2, r0, r2
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000e100 	.word	0xe000e100

08002414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	6039      	str	r1, [r7, #0]
 800241e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	2b00      	cmp	r3, #0
 8002426:	db0a      	blt.n	800243e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2da      	uxtb	r2, r3
 800242c:	490c      	ldr	r1, [pc, #48]	; (8002460 <__NVIC_SetPriority+0x4c>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	0112      	lsls	r2, r2, #4
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	440b      	add	r3, r1
 8002438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800243c:	e00a      	b.n	8002454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4908      	ldr	r1, [pc, #32]	; (8002464 <__NVIC_SetPriority+0x50>)
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	3b04      	subs	r3, #4
 800244c:	0112      	lsls	r2, r2, #4
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	440b      	add	r3, r1
 8002452:	761a      	strb	r2, [r3, #24]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000e100 	.word	0xe000e100
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f1c3 0307 	rsb	r3, r3, #7
 8002482:	2b04      	cmp	r3, #4
 8002484:	bf28      	it	cs
 8002486:	2304      	movcs	r3, #4
 8002488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3304      	adds	r3, #4
 800248e:	2b06      	cmp	r3, #6
 8002490:	d902      	bls.n	8002498 <NVIC_EncodePriority+0x30>
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3b03      	subs	r3, #3
 8002496:	e000      	b.n	800249a <NVIC_EncodePriority+0x32>
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	f04f 32ff 	mov.w	r2, #4294967295
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43da      	mvns	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	401a      	ands	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	43d9      	mvns	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	4313      	orrs	r3, r2
         );
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3724      	adds	r7, #36	; 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e0:	d301      	bcc.n	80024e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00f      	b.n	8002506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <SysTick_Config+0x40>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ee:	210f      	movs	r1, #15
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	f7ff ff8e 	bl	8002414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <SysTick_Config+0x40>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <SysTick_Config+0x40>)
 8002500:	2207      	movs	r2, #7
 8002502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	e000e010 	.word	0xe000e010

08002514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff29 	bl	8002374 <__NVIC_SetPriorityGrouping>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	4603      	mov	r3, r0
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800253c:	f7ff ff3e 	bl	80023bc <__NVIC_GetPriorityGrouping>
 8002540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	6978      	ldr	r0, [r7, #20]
 8002548:	f7ff ff8e 	bl	8002468 <NVIC_EncodePriority>
 800254c:	4602      	mov	r2, r0
 800254e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff5d 	bl	8002414 <__NVIC_SetPriority>
}
 800255a:	bf00      	nop
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff31 	bl	80023d8 <__NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ffa2 	bl	80024d0 <SysTick_Config>
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff fa94 	bl	8001ad0 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e099      	b.n	80026e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d4:	e00f      	b.n	80025f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025d6:	f7ff fa7b 	bl	8001ad0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d908      	bls.n	80025f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2203      	movs	r2, #3
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e078      	b.n	80026e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e8      	bne.n	80025d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <HAL_DMA_Init+0x158>)
 8002610:	4013      	ands	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002622:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	2b04      	cmp	r3, #4
 800264e:	d107      	bne.n	8002660 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	4313      	orrs	r3, r2
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f023 0307 	bic.w	r3, r3, #7
 8002676:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	2b04      	cmp	r3, #4
 8002688:	d117      	bne.n	80026ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00e      	beq.n	80026ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fa6f 	bl	8002b80 <DMA_CheckFifoParam>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026b6:	2301      	movs	r3, #1
 80026b8:	e016      	b.n	80026e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fa26 	bl	8002b14 <DMA_CalcBaseAndBitshift>
 80026c8:	4603      	mov	r3, r0
 80026ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d0:	223f      	movs	r2, #63	; 0x3f
 80026d2:	409a      	lsls	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	f010803f 	.word	0xf010803f

080026f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_DMA_Start_IT+0x26>
 8002716:	2302      	movs	r3, #2
 8002718:	e040      	b.n	800279c <HAL_DMA_Start_IT+0xa8>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b01      	cmp	r3, #1
 800272c:	d12f      	bne.n	800278e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2202      	movs	r2, #2
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f9b8 	bl	8002ab8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	223f      	movs	r2, #63	; 0x3f
 800274e:	409a      	lsls	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0216 	orr.w	r2, r2, #22
 8002762:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0208 	orr.w	r2, r2, #8
 800277a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e005      	b.n	800279a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002796:	2302      	movs	r3, #2
 8002798:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800279a:	7dfb      	ldrb	r3, [r7, #23]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027b0:	4b8e      	ldr	r3, [pc, #568]	; (80029ec <HAL_DMA_IRQHandler+0x248>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a8e      	ldr	r2, [pc, #568]	; (80029f0 <HAL_DMA_IRQHandler+0x24c>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0a9b      	lsrs	r3, r3, #10
 80027bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2208      	movs	r2, #8
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01a      	beq.n	8002810 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0204 	bic.w	r2, r2, #4
 80027f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	2208      	movs	r2, #8
 80027fe:	409a      	lsls	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002814:	2201      	movs	r2, #1
 8002816:	409a      	lsls	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d012      	beq.n	8002846 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	2201      	movs	r2, #1
 8002834:	409a      	lsls	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	f043 0202 	orr.w	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284a:	2204      	movs	r2, #4
 800284c:	409a      	lsls	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	2204      	movs	r2, #4
 800286a:	409a      	lsls	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002874:	f043 0204 	orr.w	r2, r3, #4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	2210      	movs	r2, #16
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d043      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d03c      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	2210      	movs	r2, #16
 80028a0:	409a      	lsls	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d018      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d108      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d024      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	4798      	blx	r3
 80028d2:	e01f      	b.n	8002914 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01b      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
 80028e4:	e016      	b.n	8002914 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0208 	bic.w	r2, r2, #8
 8002902:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2220      	movs	r2, #32
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 808f 	beq.w	8002a44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8087 	beq.w	8002a44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	2220      	movs	r2, #32
 800293c:	409a      	lsls	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b05      	cmp	r3, #5
 800294c:	d136      	bne.n	80029bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0216 	bic.w	r2, r2, #22
 800295c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800296c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <HAL_DMA_IRQHandler+0x1da>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297a:	2b00      	cmp	r3, #0
 800297c:	d007      	beq.n	800298e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0208 	bic.w	r2, r2, #8
 800298c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	223f      	movs	r2, #63	; 0x3f
 8002994:	409a      	lsls	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d07e      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	4798      	blx	r3
        }
        return;
 80029ba:	e079      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01d      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10d      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d031      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
 80029e8:	e02c      	b.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
 80029ea:	bf00      	nop
 80029ec:	20000008 	.word	0x20000008
 80029f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d023      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
 8002a04:	e01e      	b.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10f      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0210 	bic.w	r2, r2, #16
 8002a22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d032      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d022      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	3301      	adds	r3, #1
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d307      	bcc.n	8002a8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f2      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x2cc>
 8002a8a:	e000      	b.n	8002a8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
 8002aae:	e000      	b.n	8002ab2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ab0:	bf00      	nop
    }
  }
}
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d108      	bne.n	8002af8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002af6:	e007      	b.n	8002b08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	60da      	str	r2, [r3, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3b10      	subs	r3, #16
 8002b24:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <DMA_CalcBaseAndBitshift+0x64>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b2e:	4a13      	ldr	r2, [pc, #76]	; (8002b7c <DMA_CalcBaseAndBitshift+0x68>)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d909      	bls.n	8002b56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	1d1a      	adds	r2, r3, #4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	659a      	str	r2, [r3, #88]	; 0x58
 8002b54:	e007      	b.n	8002b66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	aaaaaaab 	.word	0xaaaaaaab
 8002b7c:	08007b68 	.word	0x08007b68

08002b80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d11f      	bne.n	8002bda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d856      	bhi.n	8002c4e <DMA_CheckFifoParam+0xce>
 8002ba0:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <DMA_CheckFifoParam+0x28>)
 8002ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba6:	bf00      	nop
 8002ba8:	08002bb9 	.word	0x08002bb9
 8002bac:	08002bcb 	.word	0x08002bcb
 8002bb0:	08002bb9 	.word	0x08002bb9
 8002bb4:	08002c4f 	.word	0x08002c4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d046      	beq.n	8002c52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc8:	e043      	b.n	8002c52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bd2:	d140      	bne.n	8002c56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd8:	e03d      	b.n	8002c56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be2:	d121      	bne.n	8002c28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d837      	bhi.n	8002c5a <DMA_CheckFifoParam+0xda>
 8002bea:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <DMA_CheckFifoParam+0x70>)
 8002bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf0:	08002c01 	.word	0x08002c01
 8002bf4:	08002c07 	.word	0x08002c07
 8002bf8:	08002c01 	.word	0x08002c01
 8002bfc:	08002c19 	.word	0x08002c19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      break;
 8002c04:	e030      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d025      	beq.n	8002c5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c16:	e022      	b.n	8002c5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c20:	d11f      	bne.n	8002c62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c26:	e01c      	b.n	8002c62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d903      	bls.n	8002c36 <DMA_CheckFifoParam+0xb6>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d003      	beq.n	8002c3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c34:	e018      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3a:	e015      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00e      	beq.n	8002c66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4c:	e00b      	b.n	8002c66 <DMA_CheckFifoParam+0xe6>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e00a      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      break;
 8002c52:	bf00      	nop
 8002c54:	e008      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      break;
 8002c56:	bf00      	nop
 8002c58:	e006      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e004      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e002      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c62:	bf00      	nop
 8002c64:	e000      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      break;
 8002c66:	bf00      	nop
    }
  } 
  
  return status; 
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop

08002c78 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e06c      	b.n	8002d64 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d106      	bne.n	8002ca2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2223      	movs	r2, #35	; 0x23
 8002c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7fe fbc5 	bl	800142c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <HAL_ETH_Init+0xf4>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	4a30      	ldr	r2, [pc, #192]	; (8002d6c <HAL_ETH_Init+0xf4>)
 8002cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_ETH_Init+0xf4>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002cbe:	4b2c      	ldr	r3, [pc, #176]	; (8002d70 <HAL_ETH_Init+0xf8>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <HAL_ETH_Init+0xf8>)
 8002cc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cc8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002cca:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <HAL_ETH_Init+0xf8>)
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	4927      	ldr	r1, [pc, #156]	; (8002d70 <HAL_ETH_Init+0xf8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_ETH_Init+0xf8>)
 8002cda:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cf2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf4:	f7fe feec 	bl	8001ad0 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002cfa:	e011      	b.n	8002d20 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002cfc:	f7fe fee8 	bl	8001ad0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d0a:	d909      	bls.n	8002d20 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	22e0      	movs	r2, #224	; 0xe0
 8002d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e021      	b.n	8002d64 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e4      	bne.n	8002cfc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f958 	bl	8002fe8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f9ff 	bl	800313c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa55 	bl	80031ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f9bd 	bl	80030cc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40013800 	.word	0x40013800

08002d74 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4b51      	ldr	r3, [pc, #324]	; (8002ed0 <ETH_SetMACConfig+0x15c>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	7c1b      	ldrb	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d102      	bne.n	8002d9c <ETH_SetMACConfig+0x28>
 8002d96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002d9a:	e000      	b.n	8002d9e <ETH_SetMACConfig+0x2a>
 8002d9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	7c5b      	ldrb	r3, [r3, #17]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <ETH_SetMACConfig+0x38>
 8002da6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002daa:	e000      	b.n	8002dae <ETH_SetMACConfig+0x3a>
 8002dac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002dae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002db4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	7fdb      	ldrb	r3, [r3, #31]
 8002dba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002dbc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002dc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	7f92      	ldrb	r2, [r2, #30]
 8002dc8:	2a00      	cmp	r2, #0
 8002dca:	d102      	bne.n	8002dd2 <ETH_SetMACConfig+0x5e>
 8002dcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dd0:	e000      	b.n	8002dd4 <ETH_SetMACConfig+0x60>
 8002dd2:	2200      	movs	r2, #0
                        macconf->Speed |
 8002dd4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	7f1b      	ldrb	r3, [r3, #28]
 8002dda:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ddc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002de2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	791b      	ldrb	r3, [r3, #4]
 8002de8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002dea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002df2:	2a00      	cmp	r2, #0
 8002df4:	d102      	bne.n	8002dfc <ETH_SetMACConfig+0x88>
 8002df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dfa:	e000      	b.n	8002dfe <ETH_SetMACConfig+0x8a>
 8002dfc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002dfe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	7bdb      	ldrb	r3, [r3, #15]
 8002e04:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e06:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e14:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e16:	4313      	orrs	r3, r2
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f7fe fe5a 	bl	8001ae8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e52:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002e5a:	2a00      	cmp	r2, #0
 8002e5c:	d101      	bne.n	8002e62 <ETH_SetMACConfig+0xee>
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	e000      	b.n	8002e64 <ETH_SetMACConfig+0xf0>
 8002e62:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e64:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002e72:	2a01      	cmp	r2, #1
 8002e74:	d101      	bne.n	8002e7a <ETH_SetMACConfig+0x106>
 8002e76:	2208      	movs	r2, #8
 8002e78:	e000      	b.n	8002e7c <ETH_SetMACConfig+0x108>
 8002e7a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002e7c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002e84:	2a01      	cmp	r2, #1
 8002e86:	d101      	bne.n	8002e8c <ETH_SetMACConfig+0x118>
 8002e88:	2204      	movs	r2, #4
 8002e8a:	e000      	b.n	8002e8e <ETH_SetMACConfig+0x11a>
 8002e8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002e96:	2a01      	cmp	r2, #1
 8002e98:	d101      	bne.n	8002e9e <ETH_SetMACConfig+0x12a>
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	e000      	b.n	8002ea0 <ETH_SetMACConfig+0x12c>
 8002e9e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f7fe fe15 	bl	8001ae8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	619a      	str	r2, [r3, #24]
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	ff20810f 	.word	0xff20810f

08002ed4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <ETH_SetDMAConfig+0x110>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	7b1b      	ldrb	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <ETH_SetDMAConfig+0x2c>
 8002efa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002efe:	e000      	b.n	8002f02 <ETH_SetDMAConfig+0x2e>
 8002f00:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	7b5b      	ldrb	r3, [r3, #13]
 8002f06:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f08:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	7f52      	ldrb	r2, [r2, #29]
 8002f0e:	2a00      	cmp	r2, #0
 8002f10:	d102      	bne.n	8002f18 <ETH_SetDMAConfig+0x44>
 8002f12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f16:	e000      	b.n	8002f1a <ETH_SetDMAConfig+0x46>
 8002f18:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f1a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	7b9b      	ldrb	r3, [r3, #14]
 8002f20:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f22:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	7f1b      	ldrb	r3, [r3, #28]
 8002f2e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	7f9b      	ldrb	r3, [r3, #30]
 8002f36:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f38:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f3e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f46:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	f7fe fdbc 	bl	8001ae8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	791b      	ldrb	r3, [r3, #4]
 8002f82:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f88:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002f8e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f94:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f9c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002f9e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002fa6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fc8:	2001      	movs	r0, #1
 8002fca:	f7fe fd8d 	bl	8001ae8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6013      	str	r3, [r2, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	f8de3f23 	.word	0xf8de3f23

08002fe8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b0a6      	sub	sp, #152	; 0x98
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003012:	2301      	movs	r3, #1
 8003014:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800301e:	2300      	movs	r3, #0
 8003020:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003024:	2300      	movs	r3, #0
 8003026:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003028:	2300      	movs	r3, #0
 800302a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800302e:	2300      	movs	r3, #0
 8003030:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003032:	2300      	movs	r3, #0
 8003034:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003044:	2300      	movs	r3, #0
 8003046:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800304a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800304e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003050:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003054:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800305c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff fe86 	bl	8002d74 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003068:	2301      	movs	r3, #1
 800306a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800306c:	2301      	movs	r3, #1
 800306e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003070:	2301      	movs	r3, #1
 8003072:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003076:	2301      	movs	r3, #1
 8003078:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003084:	2300      	movs	r3, #0
 8003086:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800308a:	2300      	movs	r3, #0
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003094:	2301      	movs	r3, #1
 8003096:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800309c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800309e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030b8:	f107 0308 	add.w	r3, r7, #8
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ff08 	bl	8002ed4 <ETH_SetDMAConfig>
}
 80030c4:	bf00      	nop
 80030c6:	3798      	adds	r7, #152	; 0x98
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3305      	adds	r3, #5
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	021b      	lsls	r3, r3, #8
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	3204      	adds	r2, #4
 80030e4:	7812      	ldrb	r2, [r2, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <ETH_MACAddressConfig+0x68>)
 80030ee:	4413      	add	r3, r2
 80030f0:	461a      	mov	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3303      	adds	r3, #3
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	061a      	lsls	r2, r3, #24
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3302      	adds	r3, #2
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	041b      	lsls	r3, r3, #16
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3301      	adds	r3, #1
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	4313      	orrs	r3, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	7812      	ldrb	r2, [r2, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <ETH_MACAddressConfig+0x6c>)
 800311e:	4413      	add	r3, r2
 8003120:	461a      	mov	r2, r3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	6013      	str	r3, [r2, #0]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40028040 	.word	0x40028040
 8003138:	40028044 	.word	0x40028044

0800313c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	e03e      	b.n	80031c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68d9      	ldr	r1, [r3, #12]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2200      	movs	r2, #0
 8003166:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2200      	movs	r2, #0
 8003172:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	3206      	adds	r2, #6
 800317c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d80c      	bhi.n	80031ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68d9      	ldr	r1, [r3, #12]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	440b      	add	r3, r1
 80031a4:	461a      	mov	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	e004      	b.n	80031b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	461a      	mov	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3301      	adds	r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d9bd      	bls.n	800314a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031e0:	611a      	str	r2, [r3, #16]
}
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b085      	sub	sp, #20
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e046      	b.n	800328a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6919      	ldr	r1, [r3, #16]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2200      	movs	r2, #0
 8003218:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2200      	movs	r2, #0
 800321e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2200      	movs	r2, #0
 8003224:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2200      	movs	r2, #0
 800322a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2200      	movs	r2, #0
 8003230:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003238:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003240:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	3212      	adds	r2, #18
 8003256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d80c      	bhi.n	800327a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6919      	ldr	r1, [r3, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	461a      	mov	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	60da      	str	r2, [r3, #12]
 8003278:	e004      	b.n	8003284 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	461a      	mov	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	3301      	adds	r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b03      	cmp	r3, #3
 800328e:	d9b5      	bls.n	80031fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ba:	60da      	str	r2, [r3, #12]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	; 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	e177      	b.n	80035d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032e4:	2201      	movs	r2, #1
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	f040 8166 	bne.w	80035ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b01      	cmp	r3, #1
 800330c:	d005      	beq.n	800331a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003316:	2b02      	cmp	r3, #2
 8003318:	d130      	bne.n	800337c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	2203      	movs	r2, #3
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003350:	2201      	movs	r2, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 0201 	and.w	r2, r3, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b03      	cmp	r3, #3
 8003386:	d017      	beq.n	80033b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	2203      	movs	r2, #3
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d123      	bne.n	800340c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	08da      	lsrs	r2, r3, #3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3208      	adds	r2, #8
 80033cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	220f      	movs	r2, #15
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	08da      	lsrs	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3208      	adds	r2, #8
 8003406:	69b9      	ldr	r1, [r7, #24]
 8003408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0203 	and.w	r2, r3, #3
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80c0 	beq.w	80035ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b66      	ldr	r3, [pc, #408]	; (80035ec <HAL_GPIO_Init+0x324>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_GPIO_Init+0x324>)
 8003458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800345c:	6453      	str	r3, [r2, #68]	; 0x44
 800345e:	4b63      	ldr	r3, [pc, #396]	; (80035ec <HAL_GPIO_Init+0x324>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800346a:	4a61      	ldr	r2, [pc, #388]	; (80035f0 <HAL_GPIO_Init+0x328>)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	3302      	adds	r3, #2
 8003472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	220f      	movs	r2, #15
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a58      	ldr	r2, [pc, #352]	; (80035f4 <HAL_GPIO_Init+0x32c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d037      	beq.n	8003506 <HAL_GPIO_Init+0x23e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a57      	ldr	r2, [pc, #348]	; (80035f8 <HAL_GPIO_Init+0x330>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d031      	beq.n	8003502 <HAL_GPIO_Init+0x23a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a56      	ldr	r2, [pc, #344]	; (80035fc <HAL_GPIO_Init+0x334>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d02b      	beq.n	80034fe <HAL_GPIO_Init+0x236>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a55      	ldr	r2, [pc, #340]	; (8003600 <HAL_GPIO_Init+0x338>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d025      	beq.n	80034fa <HAL_GPIO_Init+0x232>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a54      	ldr	r2, [pc, #336]	; (8003604 <HAL_GPIO_Init+0x33c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01f      	beq.n	80034f6 <HAL_GPIO_Init+0x22e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a53      	ldr	r2, [pc, #332]	; (8003608 <HAL_GPIO_Init+0x340>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d019      	beq.n	80034f2 <HAL_GPIO_Init+0x22a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a52      	ldr	r2, [pc, #328]	; (800360c <HAL_GPIO_Init+0x344>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_GPIO_Init+0x226>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a51      	ldr	r2, [pc, #324]	; (8003610 <HAL_GPIO_Init+0x348>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00d      	beq.n	80034ea <HAL_GPIO_Init+0x222>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a50      	ldr	r2, [pc, #320]	; (8003614 <HAL_GPIO_Init+0x34c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <HAL_GPIO_Init+0x21e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4f      	ldr	r2, [pc, #316]	; (8003618 <HAL_GPIO_Init+0x350>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_GPIO_Init+0x21a>
 80034de:	2309      	movs	r3, #9
 80034e0:	e012      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034e2:	230a      	movs	r3, #10
 80034e4:	e010      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034e6:	2308      	movs	r3, #8
 80034e8:	e00e      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034ea:	2307      	movs	r3, #7
 80034ec:	e00c      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034ee:	2306      	movs	r3, #6
 80034f0:	e00a      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034f2:	2305      	movs	r3, #5
 80034f4:	e008      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034f6:	2304      	movs	r3, #4
 80034f8:	e006      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034fa:	2303      	movs	r3, #3
 80034fc:	e004      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034fe:	2302      	movs	r3, #2
 8003500:	e002      	b.n	8003508 <HAL_GPIO_Init+0x240>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_GPIO_Init+0x240>
 8003506:	2300      	movs	r3, #0
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	f002 0203 	and.w	r2, r2, #3
 800350e:	0092      	lsls	r2, r2, #2
 8003510:	4093      	lsls	r3, r2
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003518:	4935      	ldr	r1, [pc, #212]	; (80035f0 <HAL_GPIO_Init+0x328>)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	3302      	adds	r3, #2
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <HAL_GPIO_Init+0x354>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800354a:	4a34      	ldr	r2, [pc, #208]	; (800361c <HAL_GPIO_Init+0x354>)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003550:	4b32      	ldr	r3, [pc, #200]	; (800361c <HAL_GPIO_Init+0x354>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003574:	4a29      	ldr	r2, [pc, #164]	; (800361c <HAL_GPIO_Init+0x354>)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800357a:	4b28      	ldr	r3, [pc, #160]	; (800361c <HAL_GPIO_Init+0x354>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_GPIO_Init+0x354>)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_GPIO_Init+0x354>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <HAL_GPIO_Init+0x354>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3301      	adds	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b0f      	cmp	r3, #15
 80035d8:	f67f ae84 	bls.w	80032e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	3724      	adds	r7, #36	; 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40013800 	.word	0x40013800
 80035f4:	40020000 	.word	0x40020000
 80035f8:	40020400 	.word	0x40020400
 80035fc:	40020800 	.word	0x40020800
 8003600:	40020c00 	.word	0x40020c00
 8003604:	40021000 	.word	0x40021000
 8003608:	40021400 	.word	0x40021400
 800360c:	40021800 	.word	0x40021800
 8003610:	40021c00 	.word	0x40021c00
 8003614:	40022000 	.word	0x40022000
 8003618:	40022400 	.word	0x40022400
 800361c:	40013c00 	.word	0x40013c00

08003620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	e001      	b.n	8003642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800363e:	2300      	movs	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	807b      	strh	r3, [r7, #2]
 800365c:	4613      	mov	r3, r2
 800365e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003660:	787b      	ldrb	r3, [r7, #1]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003666:	887a      	ldrh	r2, [r7, #2]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800366c:	e003      	b.n	8003676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800366e:	887b      	ldrh	r3, [r7, #2]
 8003670:	041a      	lsls	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	619a      	str	r2, [r3, #24]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003694:	887a      	ldrh	r2, [r7, #2]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4013      	ands	r3, r2
 800369a:	041a      	lsls	r2, r3, #16
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	43d9      	mvns	r1, r3
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	400b      	ands	r3, r1
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	619a      	str	r2, [r3, #24]
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036c2:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d006      	beq.n	80036dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ce:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd f908 	bl	80008ec <HAL_GPIO_EXTI_Callback>
  }
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e12b      	b.n	8003952 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd ff52 	bl	80015b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	; 0x24
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800373a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800374a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800374c:	f001 fb4e 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 8003750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4a81      	ldr	r2, [pc, #516]	; (800395c <HAL_I2C_Init+0x274>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d807      	bhi.n	800376c <HAL_I2C_Init+0x84>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a80      	ldr	r2, [pc, #512]	; (8003960 <HAL_I2C_Init+0x278>)
 8003760:	4293      	cmp	r3, r2
 8003762:	bf94      	ite	ls
 8003764:	2301      	movls	r3, #1
 8003766:	2300      	movhi	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e006      	b.n	800377a <HAL_I2C_Init+0x92>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a7d      	ldr	r2, [pc, #500]	; (8003964 <HAL_I2C_Init+0x27c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0e7      	b.n	8003952 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a78      	ldr	r2, [pc, #480]	; (8003968 <HAL_I2C_Init+0x280>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0c9b      	lsrs	r3, r3, #18
 800378c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a6a      	ldr	r2, [pc, #424]	; (800395c <HAL_I2C_Init+0x274>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d802      	bhi.n	80037bc <HAL_I2C_Init+0xd4>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3301      	adds	r3, #1
 80037ba:	e009      	b.n	80037d0 <HAL_I2C_Init+0xe8>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	4a69      	ldr	r2, [pc, #420]	; (800396c <HAL_I2C_Init+0x284>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	3301      	adds	r3, #1
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	495c      	ldr	r1, [pc, #368]	; (800395c <HAL_I2C_Init+0x274>)
 80037ec:	428b      	cmp	r3, r1
 80037ee:	d819      	bhi.n	8003824 <HAL_I2C_Init+0x13c>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e59      	subs	r1, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80037fe:	1c59      	adds	r1, r3, #1
 8003800:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003804:	400b      	ands	r3, r1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_I2C_Init+0x138>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1e59      	subs	r1, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fbb1 f3f3 	udiv	r3, r1, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381e:	e051      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 8003820:	2304      	movs	r3, #4
 8003822:	e04f      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d111      	bne.n	8003850 <HAL_I2C_Init+0x168>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e58      	subs	r0, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e012      	b.n	8003876 <HAL_I2C_Init+0x18e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e58      	subs	r0, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	0099      	lsls	r1, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	fbb0 f3f3 	udiv	r3, r0, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Init+0x196>
 800387a:	2301      	movs	r3, #1
 800387c:	e022      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10e      	bne.n	80038a4 <HAL_I2C_Init+0x1bc>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1e58      	subs	r0, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	440b      	add	r3, r1
 8003894:	fbb0 f3f3 	udiv	r3, r0, r3
 8003898:	3301      	adds	r3, #1
 800389a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a2:	e00f      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1e58      	subs	r0, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	0099      	lsls	r1, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ba:	3301      	adds	r3, #1
 80038bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	6809      	ldr	r1, [r1, #0]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6911      	ldr	r1, [r2, #16]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68d2      	ldr	r2, [r2, #12]
 80038fe:	4311      	orrs	r1, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	430b      	orrs	r3, r1
 8003906:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	000186a0 	.word	0x000186a0
 8003960:	001e847f 	.word	0x001e847f
 8003964:	003d08ff 	.word	0x003d08ff
 8003968:	431bde83 	.word	0x431bde83
 800396c:	10624dd3 	.word	0x10624dd3

08003970 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	461a      	mov	r2, r3
 800397c:	460b      	mov	r3, r1
 800397e:	817b      	strh	r3, [r7, #10]
 8003980:	4613      	mov	r3, r2
 8003982:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003984:	f7fe f8a4 	bl	8001ad0 <HAL_GetTick>
 8003988:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b20      	cmp	r3, #32
 8003994:	f040 80e0 	bne.w	8003b58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	2319      	movs	r3, #25
 800399e:	2201      	movs	r2, #1
 80039a0:	4970      	ldr	r1, [pc, #448]	; (8003b64 <HAL_I2C_Master_Transmit+0x1f4>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fa92 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
 80039b0:	e0d3      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_I2C_Master_Transmit+0x50>
 80039bc:	2302      	movs	r3, #2
 80039be:	e0cc      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d007      	beq.n	80039e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2221      	movs	r2, #33	; 0x21
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2210      	movs	r2, #16
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	893a      	ldrh	r2, [r7, #8]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a50      	ldr	r2, [pc, #320]	; (8003b68 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a28:	8979      	ldrh	r1, [r7, #10]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	6a3a      	ldr	r2, [r7, #32]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f9ca 	bl	8003dc8 <I2C_MasterRequestWrite>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e08d      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a54:	e066      	b.n	8003b24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	6a39      	ldr	r1, [r7, #32]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fb0c 	bl	8004078 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d107      	bne.n	8003a7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e06b      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d11b      	bne.n	8003af8 <HAL_I2C_Master_Transmit+0x188>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d017      	beq.n	8003af8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	6a39      	ldr	r1, [r7, #32]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fafc 	bl	80040fa <I2C_WaitOnBTFFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00d      	beq.n	8003b24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d107      	bne.n	8003b20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e01a      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d194      	bne.n	8003a56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	00100002 	.word	0x00100002
 8003b68:	ffff0000 	.word	0xffff0000

08003b6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003b7c:	f7fd ffa8 	bl	8001ad0 <HAL_GetTick>
 8003b80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	f040 8111 	bne.w	8003db6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2319      	movs	r3, #25
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4988      	ldr	r1, [pc, #544]	; (8003dc0 <HAL_I2C_IsDeviceReady+0x254>)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f994 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003baa:	2302      	movs	r3, #2
 8003bac:	e104      	b.n	8003db8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2C_IsDeviceReady+0x50>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e0fd      	b.n	8003db8 <HAL_I2C_IsDeviceReady+0x24c>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d007      	beq.n	8003be2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2224      	movs	r2, #36	; 0x24
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a70      	ldr	r2, [pc, #448]	; (8003dc4 <HAL_I2C_IsDeviceReady+0x258>)
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f952 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3c:	d103      	bne.n	8003c46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e0b6      	b.n	8003db8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c4a:	897b      	ldrh	r3, [r7, #10]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c5a:	f7fd ff39 	bl	8001ad0 <HAL_GetTick>
 8003c5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	2300      	movne	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c84:	bf0c      	ite	eq
 8003c86:	2301      	moveq	r3, #1
 8003c88:	2300      	movne	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c8e:	e025      	b.n	8003cdc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c90:	f7fd ff1e 	bl	8001ad0 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d302      	bcc.n	8003ca6 <HAL_I2C_IsDeviceReady+0x13a>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	22a0      	movs	r2, #160	; 0xa0
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2ba0      	cmp	r3, #160	; 0xa0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_I2C_IsDeviceReady+0x188>
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d102      	bne.n	8003cf4 <HAL_I2C_IsDeviceReady+0x188>
 8003cee:	7dbb      	ldrb	r3, [r7, #22]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0cd      	beq.n	8003c90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d129      	bne.n	8003d5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2319      	movs	r3, #25
 8003d36:	2201      	movs	r2, #1
 8003d38:	4921      	ldr	r1, [pc, #132]	; (8003dc0 <HAL_I2C_IsDeviceReady+0x254>)
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f8c6 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e036      	b.n	8003db8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e02c      	b.n	8003db8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2319      	movs	r3, #25
 8003d7e:	2201      	movs	r2, #1
 8003d80:	490f      	ldr	r1, [pc, #60]	; (8003dc0 <HAL_I2C_IsDeviceReady+0x254>)
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f8a2 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e012      	b.n	8003db8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	3301      	adds	r3, #1
 8003d96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	f4ff af32 	bcc.w	8003c06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	00100002 	.word	0x00100002
 8003dc4:	ffff0000 	.word	0xffff0000

08003dc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d006      	beq.n	8003df2 <I2C_MasterRequestWrite+0x2a>
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d003      	beq.n	8003df2 <I2C_MasterRequestWrite+0x2a>
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003df0:	d108      	bne.n	8003e04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	e00b      	b.n	8003e1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	2b12      	cmp	r3, #18
 8003e0a:	d107      	bne.n	8003e1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f84f 	bl	8003ecc <I2C_WaitOnFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e42:	d103      	bne.n	8003e4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e035      	b.n	8003ebc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e58:	d108      	bne.n	8003e6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e5a:	897b      	ldrh	r3, [r7, #10]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e68:	611a      	str	r2, [r3, #16]
 8003e6a:	e01b      	b.n	8003ea4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e6c:	897b      	ldrh	r3, [r7, #10]
 8003e6e:	11db      	asrs	r3, r3, #7
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f003 0306 	and.w	r3, r3, #6
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f063 030f 	orn	r3, r3, #15
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	490e      	ldr	r1, [pc, #56]	; (8003ec4 <I2C_MasterRequestWrite+0xfc>)
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f875 	bl	8003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e010      	b.n	8003ebc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e9a:	897b      	ldrh	r3, [r7, #10]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4907      	ldr	r1, [pc, #28]	; (8003ec8 <I2C_MasterRequestWrite+0x100>)
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f865 	bl	8003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	00010008 	.word	0x00010008
 8003ec8:	00010002 	.word	0x00010002

08003ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003edc:	e025      	b.n	8003f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d021      	beq.n	8003f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee6:	f7fd fdf3 	bl	8001ad0 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d116      	bne.n	8003f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f043 0220 	orr.w	r2, r3, #32
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e023      	b.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	0c1b      	lsrs	r3, r3, #16
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d10d      	bne.n	8003f50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bf0c      	ite	eq
 8003f46:	2301      	moveq	r3, #1
 8003f48:	2300      	movne	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	e00c      	b.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	43da      	mvns	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bf0c      	ite	eq
 8003f62:	2301      	moveq	r3, #1
 8003f64:	2300      	movne	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d0b6      	beq.n	8003ede <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f88:	e051      	b.n	800402e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f98:	d123      	bne.n	8003fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0204 	orr.w	r2, r3, #4
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e046      	b.n	8004070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d021      	beq.n	800402e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fea:	f7fd fd71 	bl	8001ad0 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d116      	bne.n	800402e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e020      	b.n	8004070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d10c      	bne.n	8004052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	43da      	mvns	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	e00b      	b.n	800406a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	43da      	mvns	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4013      	ands	r3, r2
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf14      	ite	ne
 8004064:	2301      	movne	r3, #1
 8004066:	2300      	moveq	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d18d      	bne.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004084:	e02d      	b.n	80040e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f878 	bl	800417c <I2C_IsAcknowledgeFailed>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e02d      	b.n	80040f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d021      	beq.n	80040e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409e:	f7fd fd17 	bl	8001ad0 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d302      	bcc.n	80040b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d116      	bne.n	80040e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e007      	b.n	80040f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b80      	cmp	r3, #128	; 0x80
 80040ee:	d1ca      	bne.n	8004086 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004106:	e02d      	b.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f837 	bl	800417c <I2C_IsAcknowledgeFailed>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e02d      	b.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411e:	d021      	beq.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004120:	f7fd fcd6 	bl	8001ad0 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	429a      	cmp	r2, r3
 800412e:	d302      	bcc.n	8004136 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d116      	bne.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e007      	b.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b04      	cmp	r3, #4
 8004170:	d1ca      	bne.n	8004108 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004192:	d11b      	bne.n	80041cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800419c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	f043 0204 	orr.w	r2, r3, #4
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d129      	bne.n	8004244 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	; 0x24
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0201 	bic.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0210 	bic.w	r2, r2, #16
 8004216:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004244:	2302      	movs	r3, #2
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b20      	cmp	r3, #32
 800426a:	d12a      	bne.n	80042c2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	; 0x24
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0201 	bic.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800428c:	89fb      	ldrh	r3, [r7, #14]
 800428e:	f023 030f 	bic.w	r3, r3, #15
 8004292:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	b29a      	uxth	r2, r3
 8004298:	89fb      	ldrh	r3, [r7, #14]
 800429a:	4313      	orrs	r3, r2
 800429c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	89fa      	ldrh	r2, [r7, #14]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e000      	b.n	80042c4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
  }
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d2:	b08f      	sub	sp, #60	; 0x3c
 80042d4:	af0a      	add	r7, sp, #40	; 0x28
 80042d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e10f      	b.n	8004502 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fd fa1d 	bl	800173c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2203      	movs	r2, #3
 8004306:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d102      	bne.n	800431c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f002 f88e 	bl	8006442 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	687e      	ldr	r6, [r7, #4]
 800432e:	466d      	mov	r5, sp
 8004330:	f106 0410 	add.w	r4, r6, #16
 8004334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800433a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800433c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004340:	e885 0003 	stmia.w	r5, {r0, r1}
 8004344:	1d33      	adds	r3, r6, #4
 8004346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004348:	6838      	ldr	r0, [r7, #0]
 800434a:	f002 f819 	bl	8006380 <USB_CoreInit>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e0d0      	b.n	8004502 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f002 f87c 	bl	8006464 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800436c:	2300      	movs	r3, #0
 800436e:	73fb      	strb	r3, [r7, #15]
 8004370:	e04a      	b.n	8004408 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004372:	7bfa      	ldrb	r2, [r7, #15]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	333d      	adds	r3, #61	; 0x3d
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004386:	7bfa      	ldrb	r2, [r7, #15]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	333c      	adds	r3, #60	; 0x3c
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800439a:	7bfa      	ldrb	r2, [r7, #15]
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	b298      	uxth	r0, r3
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	3344      	adds	r3, #68	; 0x44
 80043ae:	4602      	mov	r2, r0
 80043b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	3340      	adds	r3, #64	; 0x40
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	3348      	adds	r3, #72	; 0x48
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043da:	7bfa      	ldrb	r2, [r7, #15]
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	334c      	adds	r3, #76	; 0x4c
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043ee:	7bfa      	ldrb	r2, [r7, #15]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	3354      	adds	r3, #84	; 0x54
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	3301      	adds	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	7bfa      	ldrb	r2, [r7, #15]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	429a      	cmp	r2, r3
 8004410:	d3af      	bcc.n	8004372 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]
 8004416:	e044      	b.n	80044a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800442e:	7bfa      	ldrb	r2, [r7, #15]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004440:	7bfa      	ldrb	r2, [r7, #15]
 8004442:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004444:	7bfa      	ldrb	r2, [r7, #15]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800445a:	7bfa      	ldrb	r2, [r7, #15]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004470:	7bfa      	ldrb	r2, [r7, #15]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004486:	7bfa      	ldrb	r2, [r7, #15]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	3301      	adds	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
 80044a2:	7bfa      	ldrb	r2, [r7, #15]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d3b5      	bcc.n	8004418 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	603b      	str	r3, [r7, #0]
 80044b2:	687e      	ldr	r6, [r7, #4]
 80044b4:	466d      	mov	r5, sp
 80044b6:	f106 0410 	add.w	r4, r6, #16
 80044ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80044ca:	1d33      	adds	r3, r6, #4
 80044cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044ce:	6838      	ldr	r0, [r7, #0]
 80044d0:	f002 f814 	bl	80064fc <USB_DevInit>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e00d      	b.n	8004502 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f002 f9df 	bl	80068be <USB_DevDisconnect>

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800450c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e267      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d075      	beq.n	8004616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800452a:	4b88      	ldr	r3, [pc, #544]	; (800474c <HAL_RCC_OscConfig+0x240>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b04      	cmp	r3, #4
 8004534:	d00c      	beq.n	8004550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004536:	4b85      	ldr	r3, [pc, #532]	; (800474c <HAL_RCC_OscConfig+0x240>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800453e:	2b08      	cmp	r3, #8
 8004540:	d112      	bne.n	8004568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004542:	4b82      	ldr	r3, [pc, #520]	; (800474c <HAL_RCC_OscConfig+0x240>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800454e:	d10b      	bne.n	8004568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004550:	4b7e      	ldr	r3, [pc, #504]	; (800474c <HAL_RCC_OscConfig+0x240>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d05b      	beq.n	8004614 <HAL_RCC_OscConfig+0x108>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d157      	bne.n	8004614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e242      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d106      	bne.n	8004580 <HAL_RCC_OscConfig+0x74>
 8004572:	4b76      	ldr	r3, [pc, #472]	; (800474c <HAL_RCC_OscConfig+0x240>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a75      	ldr	r2, [pc, #468]	; (800474c <HAL_RCC_OscConfig+0x240>)
 8004578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e01d      	b.n	80045bc <HAL_RCC_OscConfig+0xb0>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004588:	d10c      	bne.n	80045a4 <HAL_RCC_OscConfig+0x98>
 800458a:	4b70      	ldr	r3, [pc, #448]	; (800474c <HAL_RCC_OscConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a6f      	ldr	r2, [pc, #444]	; (800474c <HAL_RCC_OscConfig+0x240>)
 8004590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b6d      	ldr	r3, [pc, #436]	; (800474c <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6c      	ldr	r2, [pc, #432]	; (800474c <HAL_RCC_OscConfig+0x240>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e00b      	b.n	80045bc <HAL_RCC_OscConfig+0xb0>
 80045a4:	4b69      	ldr	r3, [pc, #420]	; (800474c <HAL_RCC_OscConfig+0x240>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a68      	ldr	r2, [pc, #416]	; (800474c <HAL_RCC_OscConfig+0x240>)
 80045aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	4b66      	ldr	r3, [pc, #408]	; (800474c <HAL_RCC_OscConfig+0x240>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a65      	ldr	r2, [pc, #404]	; (800474c <HAL_RCC_OscConfig+0x240>)
 80045b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d013      	beq.n	80045ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7fd fa84 	bl	8001ad0 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fd fa80 	bl	8001ad0 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e207      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	4b5b      	ldr	r3, [pc, #364]	; (800474c <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0xc0>
 80045ea:	e014      	b.n	8004616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fd fa70 	bl	8001ad0 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fd fa6c 	bl	8001ad0 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	; 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e1f3      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004606:	4b51      	ldr	r3, [pc, #324]	; (800474c <HAL_RCC_OscConfig+0x240>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0xe8>
 8004612:	e000      	b.n	8004616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d063      	beq.n	80046ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004622:	4b4a      	ldr	r3, [pc, #296]	; (800474c <HAL_RCC_OscConfig+0x240>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCC_OscConfig+0x240>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004636:	2b08      	cmp	r3, #8
 8004638:	d11c      	bne.n	8004674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800463a:	4b44      	ldr	r3, [pc, #272]	; (800474c <HAL_RCC_OscConfig+0x240>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d116      	bne.n	8004674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004646:	4b41      	ldr	r3, [pc, #260]	; (800474c <HAL_RCC_OscConfig+0x240>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_RCC_OscConfig+0x152>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d001      	beq.n	800465e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e1c7      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465e:	4b3b      	ldr	r3, [pc, #236]	; (800474c <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4937      	ldr	r1, [pc, #220]	; (800474c <HAL_RCC_OscConfig+0x240>)
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004672:	e03a      	b.n	80046ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d020      	beq.n	80046be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800467c:	4b34      	ldr	r3, [pc, #208]	; (8004750 <HAL_RCC_OscConfig+0x244>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7fd fa25 	bl	8001ad0 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800468a:	f7fd fa21 	bl	8001ad0 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e1a8      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469c:	4b2b      	ldr	r3, [pc, #172]	; (800474c <HAL_RCC_OscConfig+0x240>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a8:	4b28      	ldr	r3, [pc, #160]	; (800474c <HAL_RCC_OscConfig+0x240>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4925      	ldr	r1, [pc, #148]	; (800474c <HAL_RCC_OscConfig+0x240>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	600b      	str	r3, [r1, #0]
 80046bc:	e015      	b.n	80046ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046be:	4b24      	ldr	r3, [pc, #144]	; (8004750 <HAL_RCC_OscConfig+0x244>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fd fa04 	bl	8001ad0 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046cc:	f7fd fa00 	bl	8001ad0 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e187      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046de:	4b1b      	ldr	r3, [pc, #108]	; (800474c <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d036      	beq.n	8004764 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d016      	beq.n	800472c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046fe:	4b15      	ldr	r3, [pc, #84]	; (8004754 <HAL_RCC_OscConfig+0x248>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7fd f9e4 	bl	8001ad0 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800470c:	f7fd f9e0 	bl	8001ad0 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e167      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800471e:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_RCC_OscConfig+0x240>)
 8004720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x200>
 800472a:	e01b      	b.n	8004764 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800472c:	4b09      	ldr	r3, [pc, #36]	; (8004754 <HAL_RCC_OscConfig+0x248>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004732:	f7fd f9cd 	bl	8001ad0 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004738:	e00e      	b.n	8004758 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800473a:	f7fd f9c9 	bl	8001ad0 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d907      	bls.n	8004758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e150      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
 800474c:	40023800 	.word	0x40023800
 8004750:	42470000 	.word	0x42470000
 8004754:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004758:	4b88      	ldr	r3, [pc, #544]	; (800497c <HAL_RCC_OscConfig+0x470>)
 800475a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1ea      	bne.n	800473a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8097 	beq.w	80048a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004776:	4b81      	ldr	r3, [pc, #516]	; (800497c <HAL_RCC_OscConfig+0x470>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10f      	bne.n	80047a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	4b7d      	ldr	r3, [pc, #500]	; (800497c <HAL_RCC_OscConfig+0x470>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	4a7c      	ldr	r2, [pc, #496]	; (800497c <HAL_RCC_OscConfig+0x470>)
 800478c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004790:	6413      	str	r3, [r2, #64]	; 0x40
 8004792:	4b7a      	ldr	r3, [pc, #488]	; (800497c <HAL_RCC_OscConfig+0x470>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800479e:	2301      	movs	r3, #1
 80047a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a2:	4b77      	ldr	r3, [pc, #476]	; (8004980 <HAL_RCC_OscConfig+0x474>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d118      	bne.n	80047e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ae:	4b74      	ldr	r3, [pc, #464]	; (8004980 <HAL_RCC_OscConfig+0x474>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a73      	ldr	r2, [pc, #460]	; (8004980 <HAL_RCC_OscConfig+0x474>)
 80047b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ba:	f7fd f989 	bl	8001ad0 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c2:	f7fd f985 	bl	8001ad0 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e10c      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d4:	4b6a      	ldr	r3, [pc, #424]	; (8004980 <HAL_RCC_OscConfig+0x474>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0f0      	beq.n	80047c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d106      	bne.n	80047f6 <HAL_RCC_OscConfig+0x2ea>
 80047e8:	4b64      	ldr	r3, [pc, #400]	; (800497c <HAL_RCC_OscConfig+0x470>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	4a63      	ldr	r2, [pc, #396]	; (800497c <HAL_RCC_OscConfig+0x470>)
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	6713      	str	r3, [r2, #112]	; 0x70
 80047f4:	e01c      	b.n	8004830 <HAL_RCC_OscConfig+0x324>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b05      	cmp	r3, #5
 80047fc:	d10c      	bne.n	8004818 <HAL_RCC_OscConfig+0x30c>
 80047fe:	4b5f      	ldr	r3, [pc, #380]	; (800497c <HAL_RCC_OscConfig+0x470>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004802:	4a5e      	ldr	r2, [pc, #376]	; (800497c <HAL_RCC_OscConfig+0x470>)
 8004804:	f043 0304 	orr.w	r3, r3, #4
 8004808:	6713      	str	r3, [r2, #112]	; 0x70
 800480a:	4b5c      	ldr	r3, [pc, #368]	; (800497c <HAL_RCC_OscConfig+0x470>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	4a5b      	ldr	r2, [pc, #364]	; (800497c <HAL_RCC_OscConfig+0x470>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	6713      	str	r3, [r2, #112]	; 0x70
 8004816:	e00b      	b.n	8004830 <HAL_RCC_OscConfig+0x324>
 8004818:	4b58      	ldr	r3, [pc, #352]	; (800497c <HAL_RCC_OscConfig+0x470>)
 800481a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481c:	4a57      	ldr	r2, [pc, #348]	; (800497c <HAL_RCC_OscConfig+0x470>)
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	6713      	str	r3, [r2, #112]	; 0x70
 8004824:	4b55      	ldr	r3, [pc, #340]	; (800497c <HAL_RCC_OscConfig+0x470>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	4a54      	ldr	r2, [pc, #336]	; (800497c <HAL_RCC_OscConfig+0x470>)
 800482a:	f023 0304 	bic.w	r3, r3, #4
 800482e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d015      	beq.n	8004864 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fd f94a 	bl	8001ad0 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483e:	e00a      	b.n	8004856 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004840:	f7fd f946 	bl	8001ad0 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	; 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e0cb      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004856:	4b49      	ldr	r3, [pc, #292]	; (800497c <HAL_RCC_OscConfig+0x470>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0ee      	beq.n	8004840 <HAL_RCC_OscConfig+0x334>
 8004862:	e014      	b.n	800488e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004864:	f7fd f934 	bl	8001ad0 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fd f930 	bl	8001ad0 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	; 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e0b5      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004882:	4b3e      	ldr	r3, [pc, #248]	; (800497c <HAL_RCC_OscConfig+0x470>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1ee      	bne.n	800486c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d105      	bne.n	80048a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004894:	4b39      	ldr	r3, [pc, #228]	; (800497c <HAL_RCC_OscConfig+0x470>)
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	4a38      	ldr	r2, [pc, #224]	; (800497c <HAL_RCC_OscConfig+0x470>)
 800489a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800489e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80a1 	beq.w	80049ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048aa:	4b34      	ldr	r3, [pc, #208]	; (800497c <HAL_RCC_OscConfig+0x470>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d05c      	beq.n	8004970 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d141      	bne.n	8004942 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048be:	4b31      	ldr	r3, [pc, #196]	; (8004984 <HAL_RCC_OscConfig+0x478>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fd f904 	bl	8001ad0 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fd f900 	bl	8001ad0 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e087      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048de:	4b27      	ldr	r3, [pc, #156]	; (800497c <HAL_RCC_OscConfig+0x470>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69da      	ldr	r2, [r3, #28]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	019b      	lsls	r3, r3, #6
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	3b01      	subs	r3, #1
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	491b      	ldr	r1, [pc, #108]	; (800497c <HAL_RCC_OscConfig+0x470>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004914:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <HAL_RCC_OscConfig+0x478>)
 8004916:	2201      	movs	r2, #1
 8004918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491a:	f7fd f8d9 	bl	8001ad0 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004922:	f7fd f8d5 	bl	8001ad0 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e05c      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004934:	4b11      	ldr	r3, [pc, #68]	; (800497c <HAL_RCC_OscConfig+0x470>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x416>
 8004940:	e054      	b.n	80049ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <HAL_RCC_OscConfig+0x478>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004948:	f7fd f8c2 	bl	8001ad0 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004950:	f7fd f8be 	bl	8001ad0 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e045      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004962:	4b06      	ldr	r3, [pc, #24]	; (800497c <HAL_RCC_OscConfig+0x470>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x444>
 800496e:	e03d      	b.n	80049ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d107      	bne.n	8004988 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e038      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
 800497c:	40023800 	.word	0x40023800
 8004980:	40007000 	.word	0x40007000
 8004984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004988:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <HAL_RCC_OscConfig+0x4ec>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d028      	beq.n	80049e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d121      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d11a      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049b8:	4013      	ands	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d111      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	3b01      	subs	r3, #1
 80049d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d107      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800

080049fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0cc      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a10:	4b68      	ldr	r3, [pc, #416]	; (8004bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d90c      	bls.n	8004a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1e:	4b65      	ldr	r3, [pc, #404]	; (8004bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b63      	ldr	r3, [pc, #396]	; (8004bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0b8      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d020      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a50:	4b59      	ldr	r3, [pc, #356]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	4a58      	ldr	r2, [pc, #352]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a68:	4b53      	ldr	r3, [pc, #332]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	4a52      	ldr	r2, [pc, #328]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a74:	4b50      	ldr	r3, [pc, #320]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	494d      	ldr	r1, [pc, #308]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d044      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d107      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	4b47      	ldr	r3, [pc, #284]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d119      	bne.n	8004ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e07f      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d003      	beq.n	8004aba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d107      	bne.n	8004aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aba:	4b3f      	ldr	r3, [pc, #252]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e06f      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aca:	4b3b      	ldr	r3, [pc, #236]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e067      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ada:	4b37      	ldr	r3, [pc, #220]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f023 0203 	bic.w	r2, r3, #3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	4934      	ldr	r1, [pc, #208]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aec:	f7fc fff0 	bl	8001ad0 <HAL_GetTick>
 8004af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af2:	e00a      	b.n	8004b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af4:	f7fc ffec 	bl	8001ad0 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e04f      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0a:	4b2b      	ldr	r3, [pc, #172]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 020c 	and.w	r2, r3, #12
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d1eb      	bne.n	8004af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b1c:	4b25      	ldr	r3, [pc, #148]	; (8004bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d20c      	bcs.n	8004b44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2a:	4b22      	ldr	r3, [pc, #136]	; (8004bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b32:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e032      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b50:	4b19      	ldr	r3, [pc, #100]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4916      	ldr	r1, [pc, #88]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d009      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b6e:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	490e      	ldr	r1, [pc, #56]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b82:	f000 f821 	bl	8004bc8 <HAL_RCC_GetSysClockFreq>
 8004b86:	4602      	mov	r2, r0
 8004b88:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	490a      	ldr	r1, [pc, #40]	; (8004bbc <HAL_RCC_ClockConfig+0x1c0>)
 8004b94:	5ccb      	ldrb	r3, [r1, r3]
 8004b96:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9a:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fc ff50 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40023c00 	.word	0x40023c00
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	08007b50 	.word	0x08007b50
 8004bc0:	20000008 	.word	0x20000008
 8004bc4:	2000000c 	.word	0x2000000c

08004bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bcc:	b094      	sub	sp, #80	; 0x50
 8004bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd8:	2300      	movs	r3, #0
 8004bda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be0:	4b79      	ldr	r3, [pc, #484]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 030c 	and.w	r3, r3, #12
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d00d      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0x40>
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	f200 80e1 	bhi.w	8004db4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0x34>
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d003      	beq.n	8004c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bfa:	e0db      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bfc:	4b73      	ldr	r3, [pc, #460]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8004bfe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c00:	e0db      	b.n	8004dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c02:	4b73      	ldr	r3, [pc, #460]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c06:	e0d8      	b.n	8004dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c08:	4b6f      	ldr	r3, [pc, #444]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c12:	4b6d      	ldr	r3, [pc, #436]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d063      	beq.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1e:	4b6a      	ldr	r3, [pc, #424]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	099b      	lsrs	r3, r3, #6
 8004c24:	2200      	movs	r2, #0
 8004c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c30:	633b      	str	r3, [r7, #48]	; 0x30
 8004c32:	2300      	movs	r3, #0
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
 8004c36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	f04f 0000 	mov.w	r0, #0
 8004c42:	f04f 0100 	mov.w	r1, #0
 8004c46:	0159      	lsls	r1, r3, #5
 8004c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c4c:	0150      	lsls	r0, r2, #5
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4621      	mov	r1, r4
 8004c54:	1a51      	subs	r1, r2, r1
 8004c56:	6139      	str	r1, [r7, #16]
 8004c58:	4629      	mov	r1, r5
 8004c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c6c:	4659      	mov	r1, fp
 8004c6e:	018b      	lsls	r3, r1, #6
 8004c70:	4651      	mov	r1, sl
 8004c72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c76:	4651      	mov	r1, sl
 8004c78:	018a      	lsls	r2, r1, #6
 8004c7a:	4651      	mov	r1, sl
 8004c7c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c80:	4659      	mov	r1, fp
 8004c82:	eb63 0901 	sbc.w	r9, r3, r1
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c9a:	4690      	mov	r8, r2
 8004c9c:	4699      	mov	r9, r3
 8004c9e:	4623      	mov	r3, r4
 8004ca0:	eb18 0303 	adds.w	r3, r8, r3
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	462b      	mov	r3, r5
 8004ca8:	eb49 0303 	adc.w	r3, r9, r3
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cba:	4629      	mov	r1, r5
 8004cbc:	024b      	lsls	r3, r1, #9
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	024a      	lsls	r2, r1, #9
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cce:	2200      	movs	r2, #0
 8004cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cd8:	f7fb fae2 	bl	80002a0 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce4:	e058      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce6:	4b38      	ldr	r3, [pc, #224]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	099b      	lsrs	r3, r3, #6
 8004cec:	2200      	movs	r2, #0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cf6:	623b      	str	r3, [r7, #32]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d00:	4642      	mov	r2, r8
 8004d02:	464b      	mov	r3, r9
 8004d04:	f04f 0000 	mov.w	r0, #0
 8004d08:	f04f 0100 	mov.w	r1, #0
 8004d0c:	0159      	lsls	r1, r3, #5
 8004d0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d12:	0150      	lsls	r0, r2, #5
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4641      	mov	r1, r8
 8004d1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d1e:	4649      	mov	r1, r9
 8004d20:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d38:	ebb2 040a 	subs.w	r4, r2, sl
 8004d3c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	00eb      	lsls	r3, r5, #3
 8004d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d4e:	00e2      	lsls	r2, r4, #3
 8004d50:	4614      	mov	r4, r2
 8004d52:	461d      	mov	r5, r3
 8004d54:	4643      	mov	r3, r8
 8004d56:	18e3      	adds	r3, r4, r3
 8004d58:	603b      	str	r3, [r7, #0]
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	eb45 0303 	adc.w	r3, r5, r3
 8004d60:	607b      	str	r3, [r7, #4]
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d6e:	4629      	mov	r1, r5
 8004d70:	028b      	lsls	r3, r1, #10
 8004d72:	4621      	mov	r1, r4
 8004d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d78:	4621      	mov	r1, r4
 8004d7a:	028a      	lsls	r2, r1, #10
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d82:	2200      	movs	r2, #0
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	61fa      	str	r2, [r7, #28]
 8004d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d8c:	f7fb fa88 	bl	80002a0 <__aeabi_uldivmod>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4613      	mov	r3, r2
 8004d96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	3301      	adds	r3, #1
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004da8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004db2:	e002      	b.n	8004dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8004db6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3750      	adds	r7, #80	; 0x50
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	00f42400 	.word	0x00f42400
 8004dd0:	007a1200 	.word	0x007a1200

08004dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20000008 	.word	0x20000008

08004dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004df0:	f7ff fff0 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	0a9b      	lsrs	r3, r3, #10
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	4903      	ldr	r1, [pc, #12]	; (8004e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	08007b60 	.word	0x08007b60

08004e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e18:	f7ff ffdc 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	0b5b      	lsrs	r3, r3, #13
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4903      	ldr	r1, [pc, #12]	; (8004e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40023800 	.word	0x40023800
 8004e38:	08007b60 	.word	0x08007b60

08004e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10b      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d105      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d075      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e70:	4b91      	ldr	r3, [pc, #580]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e76:	f7fc fe2b 	bl	8001ad0 <HAL_GetTick>
 8004e7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e7e:	f7fc fe27 	bl	8001ad0 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e189      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e90:	4b8a      	ldr	r3, [pc, #552]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f0      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d009      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	019a      	lsls	r2, r3, #6
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	071b      	lsls	r3, r3, #28
 8004eb4:	4981      	ldr	r1, [pc, #516]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01f      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ec8:	4b7c      	ldr	r3, [pc, #496]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ece:	0f1b      	lsrs	r3, r3, #28
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	019a      	lsls	r2, r3, #6
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	061b      	lsls	r3, r3, #24
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	071b      	lsls	r3, r3, #28
 8004ee8:	4974      	ldr	r1, [pc, #464]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ef0:	4b72      	ldr	r3, [pc, #456]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef6:	f023 021f 	bic.w	r2, r3, #31
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	496e      	ldr	r1, [pc, #440]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00d      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	019a      	lsls	r2, r3, #6
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	061b      	lsls	r3, r3, #24
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	071b      	lsls	r3, r3, #28
 8004f28:	4964      	ldr	r1, [pc, #400]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f30:	4b61      	ldr	r3, [pc, #388]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f36:	f7fc fdcb 	bl	8001ad0 <HAL_GetTick>
 8004f3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f3e:	f7fc fdc7 	bl	8001ad0 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e129      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f50:	4b5a      	ldr	r3, [pc, #360]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0f0      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d105      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d079      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f74:	4b52      	ldr	r3, [pc, #328]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f7a:	f7fc fda9 	bl	8001ad0 <HAL_GetTick>
 8004f7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f82:	f7fc fda5 	bl	8001ad0 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e107      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f94:	4b49      	ldr	r3, [pc, #292]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa0:	d0ef      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d020      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fae:	4b43      	ldr	r3, [pc, #268]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	0f1b      	lsrs	r3, r3, #28
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	019a      	lsls	r2, r3, #6
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	061b      	lsls	r3, r3, #24
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	071b      	lsls	r3, r3, #28
 8004fce:	493b      	ldr	r1, [pc, #236]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fd6:	4b39      	ldr	r3, [pc, #228]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fdc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	4934      	ldr	r1, [pc, #208]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01e      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ffc:	4b2f      	ldr	r3, [pc, #188]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	0e1b      	lsrs	r3, r3, #24
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	019a      	lsls	r2, r3, #6
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	061b      	lsls	r3, r3, #24
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	071b      	lsls	r3, r3, #28
 800501c:	4927      	ldr	r1, [pc, #156]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005024:	4b25      	ldr	r3, [pc, #148]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800502a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	4922      	ldr	r1, [pc, #136]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800503a:	4b21      	ldr	r3, [pc, #132]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800503c:	2201      	movs	r2, #1
 800503e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005040:	f7fc fd46 	bl	8001ad0 <HAL_GetTick>
 8005044:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005048:	f7fc fd42 	bl	8001ad0 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e0a4      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800505a:	4b18      	ldr	r3, [pc, #96]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005066:	d1ef      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 808b 	beq.w	800518c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	4b10      	ldr	r3, [pc, #64]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	4a0f      	ldr	r2, [pc, #60]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005084:	6413      	str	r3, [r2, #64]	; 0x40
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005092:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a0b      	ldr	r2, [pc, #44]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800509e:	f7fc fd17 	bl	8001ad0 <HAL_GetTick>
 80050a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050a4:	e010      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050a6:	f7fc fd13 	bl	8001ad0 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d909      	bls.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e075      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80050b8:	42470068 	.word	0x42470068
 80050bc:	40023800 	.word	0x40023800
 80050c0:	42470070 	.word	0x42470070
 80050c4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050c8:	4b38      	ldr	r3, [pc, #224]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0e8      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050d4:	4b36      	ldr	r3, [pc, #216]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d02f      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d028      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050f2:	4b2f      	ldr	r3, [pc, #188]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050fc:	4b2d      	ldr	r3, [pc, #180]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005102:	4b2c      	ldr	r3, [pc, #176]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005108:	4a29      	ldr	r2, [pc, #164]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800510e:	4b28      	ldr	r3, [pc, #160]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b01      	cmp	r3, #1
 8005118:	d114      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800511a:	f7fc fcd9 	bl	8001ad0 <HAL_GetTick>
 800511e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005120:	e00a      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005122:	f7fc fcd5 	bl	8001ad0 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005130:	4293      	cmp	r3, r2
 8005132:	d901      	bls.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e035      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005138:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0ee      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005150:	d10d      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005152:	4b17      	ldr	r3, [pc, #92]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005166:	4912      	ldr	r1, [pc, #72]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005168:	4313      	orrs	r3, r2
 800516a:	608b      	str	r3, [r1, #8]
 800516c:	e005      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800516e:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	4a0f      	ldr	r2, [pc, #60]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005174:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005178:	6093      	str	r3, [r2, #8]
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800517c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005186:	490a      	ldr	r1, [pc, #40]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005188:	4313      	orrs	r3, r2
 800518a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b00      	cmp	r3, #0
 8005196:	d004      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80051a0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40007000 	.word	0x40007000
 80051b0:	40023800 	.word	0x40023800
 80051b4:	42470e40 	.word	0x42470e40
 80051b8:	424711e0 	.word	0x424711e0

080051bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e066      	b.n	80052a0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	7f5b      	ldrb	r3, [r3, #29]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fc fa30 	bl	8001648 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	22ca      	movs	r2, #202	; 0xca
 80051f4:	625a      	str	r2, [r3, #36]	; 0x24
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2253      	movs	r2, #83	; 0x53
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fc5e 	bl	8005ac0 <RTC_EnterInitMode>
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d12c      	bne.n	8005268 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800521c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005220:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6899      	ldr	r1, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	68d2      	ldr	r2, [r2, #12]
 8005248:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6919      	ldr	r1, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	041a      	lsls	r2, r3, #16
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fc65 	bl	8005b2e <RTC_ExitInitMode>
 8005264:	4603      	mov	r3, r0
 8005266:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d113      	bne.n	8005296 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800527c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	22ff      	movs	r2, #255	; 0xff
 800529c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800529e:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052a8:	b590      	push	{r4, r7, lr}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	7f1b      	ldrb	r3, [r3, #28]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_RTC_SetTime+0x1c>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e087      	b.n	80053d4 <HAL_RTC_SetTime+0x12c>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2202      	movs	r2, #2
 80052ce:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d126      	bne.n	8005324 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d102      	bne.n	80052ea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2200      	movs	r2, #0
 80052e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fc42 	bl	8005b78 <RTC_ByteToBcd2>
 80052f4:	4603      	mov	r3, r0
 80052f6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fc3b 	bl	8005b78 <RTC_ByteToBcd2>
 8005302:	4603      	mov	r3, r0
 8005304:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005306:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	789b      	ldrb	r3, [r3, #2]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fc33 	bl	8005b78 <RTC_ByteToBcd2>
 8005312:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005314:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	78db      	ldrb	r3, [r3, #3]
 800531c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	e018      	b.n	8005356 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d102      	bne.n	8005338 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2200      	movs	r2, #0
 8005336:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005344:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800534a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	78db      	ldrb	r3, [r3, #3]
 8005350:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	22ca      	movs	r2, #202	; 0xca
 800535c:	625a      	str	r2, [r3, #36]	; 0x24
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2253      	movs	r2, #83	; 0x53
 8005364:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fbaa 	bl	8005ac0 <RTC_EnterInitMode>
 800536c:	4603      	mov	r3, r0
 800536e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005370:	7cfb      	ldrb	r3, [r7, #19]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d120      	bne.n	80053b8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005380:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005384:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005394:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6899      	ldr	r1, [r3, #8]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	431a      	orrs	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 fbbd 	bl	8005b2e <RTC_ExitInitMode>
 80053b4:	4603      	mov	r3, r0
 80053b6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80053b8:	7cfb      	ldrb	r3, [r7, #19]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	22ff      	movs	r2, #255	; 0xff
 80053ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	771a      	strb	r2, [r3, #28]

  return status;
 80053d2:	7cfb      	ldrb	r3, [r7, #19]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd90      	pop	{r4, r7, pc}

080053dc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800540e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005412:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	0c1b      	lsrs	r3, r3, #16
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800541e:	b2da      	uxtb	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	0a1b      	lsrs	r3, r3, #8
 8005428:	b2db      	uxtb	r3, r3
 800542a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800542e:	b2da      	uxtb	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800543c:	b2da      	uxtb	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	0d9b      	lsrs	r3, r3, #22
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	b2da      	uxtb	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d11a      	bne.n	800548e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fba8 	bl	8005bb2 <RTC_Bcd2ToByte>
 8005462:	4603      	mov	r3, r0
 8005464:	461a      	mov	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fb9f 	bl	8005bb2 <RTC_Bcd2ToByte>
 8005474:	4603      	mov	r3, r0
 8005476:	461a      	mov	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	789b      	ldrb	r3, [r3, #2]
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fb96 	bl	8005bb2 <RTC_Bcd2ToByte>
 8005486:	4603      	mov	r3, r0
 8005488:	461a      	mov	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005498:	b590      	push	{r4, r7, lr}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	7f1b      	ldrb	r3, [r3, #28]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_RTC_SetDate+0x1c>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e071      	b.n	8005598 <HAL_RTC_SetDate+0x100>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2202      	movs	r2, #2
 80054be:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10e      	bne.n	80054e4 <HAL_RTC_SetDate+0x4c>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	785b      	ldrb	r3, [r3, #1]
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d008      	beq.n	80054e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	f023 0310 	bic.w	r3, r3, #16
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	330a      	adds	r3, #10
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d11c      	bne.n	8005524 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	78db      	ldrb	r3, [r3, #3]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fb42 	bl	8005b78 <RTC_ByteToBcd2>
 80054f4:	4603      	mov	r3, r0
 80054f6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	785b      	ldrb	r3, [r3, #1]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fb3b 	bl	8005b78 <RTC_ByteToBcd2>
 8005502:	4603      	mov	r3, r0
 8005504:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005506:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	789b      	ldrb	r3, [r3, #2]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fb33 	bl	8005b78 <RTC_ByteToBcd2>
 8005512:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005514:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e00e      	b.n	8005542 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	78db      	ldrb	r3, [r3, #3]
 8005528:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005530:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005536:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	22ca      	movs	r2, #202	; 0xca
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2253      	movs	r2, #83	; 0x53
 8005550:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fab4 	bl	8005ac0 <RTC_EnterInitMode>
 8005558:	4603      	mov	r3, r0
 800555a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800555c:	7cfb      	ldrb	r3, [r7, #19]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10c      	bne.n	800557c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800556c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005570:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 fadb 	bl	8005b2e <RTC_ExitInitMode>
 8005578:	4603      	mov	r3, r0
 800557a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800557c:	7cfb      	ldrb	r3, [r7, #19]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d102      	bne.n	8005588 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	22ff      	movs	r2, #255	; 0xff
 800558e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	771a      	strb	r2, [r3, #28]

  return status;
 8005596:	7cfb      	ldrb	r3, [r7, #19]
}
 8005598:	4618      	mov	r0, r3
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	bd90      	pop	{r4, r7, pc}

080055a0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80055be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	0c1b      	lsrs	r3, r3, #16
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	0b5b      	lsrs	r3, r3, #13
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d11a      	bne.n	8005634 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	78db      	ldrb	r3, [r3, #3]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fad5 	bl	8005bb2 <RTC_Bcd2ToByte>
 8005608:	4603      	mov	r3, r0
 800560a:	461a      	mov	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	785b      	ldrb	r3, [r3, #1]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 facc 	bl	8005bb2 <RTC_Bcd2ToByte>
 800561a:	4603      	mov	r3, r0
 800561c:	461a      	mov	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	789b      	ldrb	r3, [r3, #2]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fac3 	bl	8005bb2 <RTC_Bcd2ToByte>
 800562c:	4603      	mov	r3, r0
 800562e:	461a      	mov	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005640:	b590      	push	{r4, r7, lr}
 8005642:	b089      	sub	sp, #36	; 0x24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800564c:	4b9a      	ldr	r3, [pc, #616]	; (80058b8 <HAL_RTC_SetAlarm_IT+0x278>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a9a      	ldr	r2, [pc, #616]	; (80058bc <HAL_RTC_SetAlarm_IT+0x27c>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	0adb      	lsrs	r3, r3, #11
 8005658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800565c:	fb02 f303 	mul.w	r3, r2, r3
 8005660:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	7f1b      	ldrb	r3, [r3, #28]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_RTC_SetAlarm_IT+0x36>
 8005672:	2302      	movs	r3, #2
 8005674:	e11c      	b.n	80058b0 <HAL_RTC_SetAlarm_IT+0x270>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2202      	movs	r2, #2
 8005680:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d137      	bne.n	80056f8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d102      	bne.n	800569c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2200      	movs	r2, #0
 800569a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fa69 	bl	8005b78 <RTC_ByteToBcd2>
 80056a6:	4603      	mov	r3, r0
 80056a8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	785b      	ldrb	r3, [r3, #1]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fa62 	bl	8005b78 <RTC_ByteToBcd2>
 80056b4:	4603      	mov	r3, r0
 80056b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80056b8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	789b      	ldrb	r3, [r3, #2]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fa5a 	bl	8005b78 <RTC_ByteToBcd2>
 80056c4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80056c6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	78db      	ldrb	r3, [r3, #3]
 80056ce:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80056d0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fa4c 	bl	8005b78 <RTC_ByteToBcd2>
 80056e0:	4603      	mov	r3, r0
 80056e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80056e4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80056ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80056f2:	4313      	orrs	r3, r2
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	e023      	b.n	8005740 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	d102      	bne.n	800570c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2200      	movs	r2, #0
 800570a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005718:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800571e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	78db      	ldrb	r3, [r3, #3]
 8005724:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005726:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800572e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005730:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005736:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800573c:	4313      	orrs	r3, r2
 800573e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005748:	4313      	orrs	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	22ca      	movs	r2, #202	; 0xca
 8005752:	625a      	str	r2, [r3, #36]	; 0x24
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2253      	movs	r2, #83	; 0x53
 800575a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005764:	d141      	bne.n	80057ea <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005774:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005786:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	1e5a      	subs	r2, r3, #1
 800578c:	617a      	str	r2, [r7, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10b      	bne.n	80057aa <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	22ff      	movs	r2, #255	; 0xff
 8005798:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2203      	movs	r2, #3
 800579e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e082      	b.n	80058b0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0e7      	beq.n	8005788 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057e6:	609a      	str	r2, [r3, #8]
 80057e8:	e04b      	b.n	8005882 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057f8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	b2da      	uxtb	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f462 7220 	orn	r2, r2, #640	; 0x280
 800580a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800580c:	4b2a      	ldr	r3, [pc, #168]	; (80058b8 <HAL_RTC_SetAlarm_IT+0x278>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a2a      	ldr	r2, [pc, #168]	; (80058bc <HAL_RTC_SetAlarm_IT+0x27c>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	0adb      	lsrs	r3, r3, #11
 8005818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800581c:	fb02 f303 	mul.w	r3, r2, r3
 8005820:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	1e5a      	subs	r2, r3, #1
 8005826:	617a      	str	r2, [r7, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10b      	bne.n	8005844 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	22ff      	movs	r2, #255	; 0xff
 8005832:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2203      	movs	r2, #3
 8005838:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e035      	b.n	80058b0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0e7      	beq.n	8005822 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005870:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005880:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005882:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a0e      	ldr	r2, [pc, #56]	; (80058c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8005888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800588c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800588e:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	4a0b      	ldr	r2, [pc, #44]	; (80058c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8005894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005898:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	22ff      	movs	r2, #255	; 0xff
 80058a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3724      	adds	r7, #36	; 0x24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd90      	pop	{r4, r7, pc}
 80058b8:	20000008 	.word	0x20000008
 80058bc:	10624dd3 	.word	0x10624dd3
 80058c0:	40013c00 	.word	0x40013c00

080058c4 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e0:	d10e      	bne.n	8005900 <HAL_RTC_GetAlarm+0x3c>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058e8:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	e00d      	b.n	800591c <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005906:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005916:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800591a:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	b2db      	uxtb	r3, r3
 8005922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005926:	b2da      	uxtb	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	b2db      	uxtb	r3, r3
 8005932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005936:	b2da      	uxtb	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	0d9b      	lsrs	r3, r3, #22
 800594e:	b2db      	uxtb	r3, r3
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	b2da      	uxtb	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	0e1b      	lsrs	r3, r3, #24
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800596a:	b2da      	uxtb	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d125      	bne.n	80059d8 <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f90e 	bl	8005bb2 <RTC_Bcd2ToByte>
 8005996:	4603      	mov	r3, r0
 8005998:	461a      	mov	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f905 	bl	8005bb2 <RTC_Bcd2ToByte>
 80059a8:	4603      	mov	r3, r0
 80059aa:	461a      	mov	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	789b      	ldrb	r3, [r3, #2]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 f8fc 	bl	8005bb2 <RTC_Bcd2ToByte>
 80059ba:	4603      	mov	r3, r0
 80059bc:	461a      	mov	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 f8f2 	bl	8005bb2 <RTC_Bcd2ToByte>
 80059ce:	4603      	mov	r3, r0
 80059d0:	461a      	mov	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d012      	beq.n	8005a20 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00b      	beq.n	8005a20 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7fb fc5b 	bl	80012c4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005a1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d012      	beq.n	8005a54 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00b      	beq.n	8005a54 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f8d4 	bl	8005bea <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005a52:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005a54:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <HAL_RTC_AlarmIRQHandler+0x88>)
 8005a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a5a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	775a      	strb	r2, [r3, #29]
}
 8005a62:	bf00      	nop
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40013c00 	.word	0x40013c00

08005a70 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a8a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a8c:	f7fc f820 	bl	8001ad0 <HAL_GetTick>
 8005a90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a92:	e009      	b.n	8005aa8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a94:	f7fc f81c 	bl	8001ad0 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e007      	b.n	8005ab8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0ee      	beq.n	8005a94 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d122      	bne.n	8005b24 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005aec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aee:	f7fb ffef 	bl	8001ad0 <HAL_GetTick>
 8005af2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005af4:	e00c      	b.n	8005b10 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005af6:	f7fb ffeb 	bl	8001ad0 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b04:	d904      	bls.n	8005b10 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2204      	movs	r2, #4
 8005b0a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d102      	bne.n	8005b24 <RTC_EnterInitMode+0x64>
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d1e8      	bne.n	8005af6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b48:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff ff89 	bl	8005a70 <HAL_RTC_WaitForSynchro>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2204      	movs	r2, #4
 8005b68:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005b86:	e005      	b.n	8005b94 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	3b0a      	subs	r3, #10
 8005b92:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	2b09      	cmp	r3, #9
 8005b98:	d8f6      	bhi.n	8005b88 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	b2db      	uxtb	r3, r3
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	4603      	mov	r3, r0
 8005bba:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005bc0:	79fb      	ldrb	r3, [r7, #7]
 8005bc2:	091b      	lsrs	r3, r3, #4
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	0092      	lsls	r2, r2, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	4413      	add	r3, r2
 8005bdc:	b2db      	uxtb	r3, r3
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e03f      	b.n	8005c90 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d106      	bne.n	8005c2a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7fb fd41 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2224      	movs	r2, #36	; 0x24
 8005c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c40:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f928 	bl	8005e98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695a      	ldr	r2, [r3, #20]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c66:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c76:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	; 0x28
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	d17c      	bne.n	8005db2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_UART_Transmit+0x2c>
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e075      	b.n	8005db4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HAL_UART_Transmit+0x3e>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e06e      	b.n	8005db4 <HAL_UART_Transmit+0x11c>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2221      	movs	r2, #33	; 0x21
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cec:	f7fb fef0 	bl	8001ad0 <HAL_GetTick>
 8005cf0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	88fa      	ldrh	r2, [r7, #6]
 8005cf6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	88fa      	ldrh	r2, [r7, #6]
 8005cfc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d06:	d108      	bne.n	8005d1a <HAL_UART_Transmit+0x82>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	61bb      	str	r3, [r7, #24]
 8005d18:	e003      	b.n	8005d22 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d2a:	e02a      	b.n	8005d82 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2200      	movs	r2, #0
 8005d34:	2180      	movs	r1, #128	; 0x80
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f840 	bl	8005dbc <UART_WaitOnFlagUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e036      	b.n	8005db4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d5a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	3302      	adds	r3, #2
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	e007      	b.n	8005d74 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	781a      	ldrb	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	3301      	adds	r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1cf      	bne.n	8005d2c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2200      	movs	r2, #0
 8005d94:	2140      	movs	r1, #64	; 0x40
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f810 	bl	8005dbc <UART_WaitOnFlagUntilTimeout>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e006      	b.n	8005db4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e000      	b.n	8005db4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005db2:	2302      	movs	r3, #2
  }
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3720      	adds	r7, #32
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b090      	sub	sp, #64	; 0x40
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	603b      	str	r3, [r7, #0]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dcc:	e050      	b.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd4:	d04c      	beq.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <UART_WaitOnFlagUntilTimeout+0x30>
 8005ddc:	f7fb fe78 	bl	8001ad0 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d241      	bcs.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e0c:	637a      	str	r2, [r7, #52]	; 0x34
 8005e0e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e5      	bne.n	8005dec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3314      	adds	r3, #20
 8005e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f023 0301 	bic.w	r3, r3, #1
 8005e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3314      	adds	r3, #20
 8005e3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e40:	623a      	str	r2, [r7, #32]
 8005e42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	69f9      	ldr	r1, [r7, #28]
 8005e46:	6a3a      	ldr	r2, [r7, #32]
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e5      	bne.n	8005e20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e00f      	b.n	8005e90 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d09f      	beq.n	8005dce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3740      	adds	r7, #64	; 0x40
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e9c:	b0c0      	sub	sp, #256	; 0x100
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	68d9      	ldr	r1, [r3, #12]
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	ea40 0301 	orr.w	r3, r0, r1
 8005ec0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ef0:	f021 010c 	bic.w	r1, r1, #12
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005efe:	430b      	orrs	r3, r1
 8005f00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f12:	6999      	ldr	r1, [r3, #24]
 8005f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	ea40 0301 	orr.w	r3, r0, r1
 8005f1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	4b8f      	ldr	r3, [pc, #572]	; (8006164 <UART_SetConfig+0x2cc>)
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d005      	beq.n	8005f38 <UART_SetConfig+0xa0>
 8005f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4b8d      	ldr	r3, [pc, #564]	; (8006168 <UART_SetConfig+0x2d0>)
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d104      	bne.n	8005f42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f38:	f7fe ff6c 	bl	8004e14 <HAL_RCC_GetPCLK2Freq>
 8005f3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f40:	e003      	b.n	8005f4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f42:	f7fe ff53 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 8005f46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f54:	f040 810c 	bne.w	8006170 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f6a:	4622      	mov	r2, r4
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	1891      	adds	r1, r2, r2
 8005f70:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f72:	415b      	adcs	r3, r3
 8005f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	eb12 0801 	adds.w	r8, r2, r1
 8005f80:	4629      	mov	r1, r5
 8005f82:	eb43 0901 	adc.w	r9, r3, r1
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f9a:	4690      	mov	r8, r2
 8005f9c:	4699      	mov	r9, r3
 8005f9e:	4623      	mov	r3, r4
 8005fa0:	eb18 0303 	adds.w	r3, r8, r3
 8005fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fa8:	462b      	mov	r3, r5
 8005faa:	eb49 0303 	adc.w	r3, r9, r3
 8005fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	18db      	adds	r3, r3, r3
 8005fca:	653b      	str	r3, [r7, #80]	; 0x50
 8005fcc:	4613      	mov	r3, r2
 8005fce:	eb42 0303 	adc.w	r3, r2, r3
 8005fd2:	657b      	str	r3, [r7, #84]	; 0x54
 8005fd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fdc:	f7fa f960 	bl	80002a0 <__aeabi_uldivmod>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4b61      	ldr	r3, [pc, #388]	; (800616c <UART_SetConfig+0x2d4>)
 8005fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	011c      	lsls	r4, r3, #4
 8005fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ff8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ffc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006000:	4642      	mov	r2, r8
 8006002:	464b      	mov	r3, r9
 8006004:	1891      	adds	r1, r2, r2
 8006006:	64b9      	str	r1, [r7, #72]	; 0x48
 8006008:	415b      	adcs	r3, r3
 800600a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800600c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006010:	4641      	mov	r1, r8
 8006012:	eb12 0a01 	adds.w	sl, r2, r1
 8006016:	4649      	mov	r1, r9
 8006018:	eb43 0b01 	adc.w	fp, r3, r1
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006028:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800602c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006030:	4692      	mov	sl, r2
 8006032:	469b      	mov	fp, r3
 8006034:	4643      	mov	r3, r8
 8006036:	eb1a 0303 	adds.w	r3, sl, r3
 800603a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800603e:	464b      	mov	r3, r9
 8006040:	eb4b 0303 	adc.w	r3, fp, r3
 8006044:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006054:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006058:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800605c:	460b      	mov	r3, r1
 800605e:	18db      	adds	r3, r3, r3
 8006060:	643b      	str	r3, [r7, #64]	; 0x40
 8006062:	4613      	mov	r3, r2
 8006064:	eb42 0303 	adc.w	r3, r2, r3
 8006068:	647b      	str	r3, [r7, #68]	; 0x44
 800606a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800606e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006072:	f7fa f915 	bl	80002a0 <__aeabi_uldivmod>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4611      	mov	r1, r2
 800607c:	4b3b      	ldr	r3, [pc, #236]	; (800616c <UART_SetConfig+0x2d4>)
 800607e:	fba3 2301 	umull	r2, r3, r3, r1
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	2264      	movs	r2, #100	; 0x64
 8006086:	fb02 f303 	mul.w	r3, r2, r3
 800608a:	1acb      	subs	r3, r1, r3
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006092:	4b36      	ldr	r3, [pc, #216]	; (800616c <UART_SetConfig+0x2d4>)
 8006094:	fba3 2302 	umull	r2, r3, r3, r2
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060a0:	441c      	add	r4, r3
 80060a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060b4:	4642      	mov	r2, r8
 80060b6:	464b      	mov	r3, r9
 80060b8:	1891      	adds	r1, r2, r2
 80060ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80060bc:	415b      	adcs	r3, r3
 80060be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060c4:	4641      	mov	r1, r8
 80060c6:	1851      	adds	r1, r2, r1
 80060c8:	6339      	str	r1, [r7, #48]	; 0x30
 80060ca:	4649      	mov	r1, r9
 80060cc:	414b      	adcs	r3, r1
 80060ce:	637b      	str	r3, [r7, #52]	; 0x34
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060dc:	4659      	mov	r1, fp
 80060de:	00cb      	lsls	r3, r1, #3
 80060e0:	4651      	mov	r1, sl
 80060e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060e6:	4651      	mov	r1, sl
 80060e8:	00ca      	lsls	r2, r1, #3
 80060ea:	4610      	mov	r0, r2
 80060ec:	4619      	mov	r1, r3
 80060ee:	4603      	mov	r3, r0
 80060f0:	4642      	mov	r2, r8
 80060f2:	189b      	adds	r3, r3, r2
 80060f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060f8:	464b      	mov	r3, r9
 80060fa:	460a      	mov	r2, r1
 80060fc:	eb42 0303 	adc.w	r3, r2, r3
 8006100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006110:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006114:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006118:	460b      	mov	r3, r1
 800611a:	18db      	adds	r3, r3, r3
 800611c:	62bb      	str	r3, [r7, #40]	; 0x28
 800611e:	4613      	mov	r3, r2
 8006120:	eb42 0303 	adc.w	r3, r2, r3
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800612a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800612e:	f7fa f8b7 	bl	80002a0 <__aeabi_uldivmod>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4b0d      	ldr	r3, [pc, #52]	; (800616c <UART_SetConfig+0x2d4>)
 8006138:	fba3 1302 	umull	r1, r3, r3, r2
 800613c:	095b      	lsrs	r3, r3, #5
 800613e:	2164      	movs	r1, #100	; 0x64
 8006140:	fb01 f303 	mul.w	r3, r1, r3
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	3332      	adds	r3, #50	; 0x32
 800614a:	4a08      	ldr	r2, [pc, #32]	; (800616c <UART_SetConfig+0x2d4>)
 800614c:	fba2 2303 	umull	r2, r3, r2, r3
 8006150:	095b      	lsrs	r3, r3, #5
 8006152:	f003 0207 	and.w	r2, r3, #7
 8006156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4422      	add	r2, r4
 800615e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006160:	e106      	b.n	8006370 <UART_SetConfig+0x4d8>
 8006162:	bf00      	nop
 8006164:	40011000 	.word	0x40011000
 8006168:	40011400 	.word	0x40011400
 800616c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006174:	2200      	movs	r2, #0
 8006176:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800617a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800617e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006182:	4642      	mov	r2, r8
 8006184:	464b      	mov	r3, r9
 8006186:	1891      	adds	r1, r2, r2
 8006188:	6239      	str	r1, [r7, #32]
 800618a:	415b      	adcs	r3, r3
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
 800618e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006192:	4641      	mov	r1, r8
 8006194:	1854      	adds	r4, r2, r1
 8006196:	4649      	mov	r1, r9
 8006198:	eb43 0501 	adc.w	r5, r3, r1
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	00eb      	lsls	r3, r5, #3
 80061a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061aa:	00e2      	lsls	r2, r4, #3
 80061ac:	4614      	mov	r4, r2
 80061ae:	461d      	mov	r5, r3
 80061b0:	4643      	mov	r3, r8
 80061b2:	18e3      	adds	r3, r4, r3
 80061b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061b8:	464b      	mov	r3, r9
 80061ba:	eb45 0303 	adc.w	r3, r5, r3
 80061be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061de:	4629      	mov	r1, r5
 80061e0:	008b      	lsls	r3, r1, #2
 80061e2:	4621      	mov	r1, r4
 80061e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061e8:	4621      	mov	r1, r4
 80061ea:	008a      	lsls	r2, r1, #2
 80061ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061f0:	f7fa f856 	bl	80002a0 <__aeabi_uldivmod>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4b60      	ldr	r3, [pc, #384]	; (800637c <UART_SetConfig+0x4e4>)
 80061fa:	fba3 2302 	umull	r2, r3, r3, r2
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	011c      	lsls	r4, r3, #4
 8006202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006206:	2200      	movs	r2, #0
 8006208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800620c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006210:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	1891      	adds	r1, r2, r2
 800621a:	61b9      	str	r1, [r7, #24]
 800621c:	415b      	adcs	r3, r3
 800621e:	61fb      	str	r3, [r7, #28]
 8006220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006224:	4641      	mov	r1, r8
 8006226:	1851      	adds	r1, r2, r1
 8006228:	6139      	str	r1, [r7, #16]
 800622a:	4649      	mov	r1, r9
 800622c:	414b      	adcs	r3, r1
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800623c:	4659      	mov	r1, fp
 800623e:	00cb      	lsls	r3, r1, #3
 8006240:	4651      	mov	r1, sl
 8006242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006246:	4651      	mov	r1, sl
 8006248:	00ca      	lsls	r2, r1, #3
 800624a:	4610      	mov	r0, r2
 800624c:	4619      	mov	r1, r3
 800624e:	4603      	mov	r3, r0
 8006250:	4642      	mov	r2, r8
 8006252:	189b      	adds	r3, r3, r2
 8006254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006258:	464b      	mov	r3, r9
 800625a:	460a      	mov	r2, r1
 800625c:	eb42 0303 	adc.w	r3, r2, r3
 8006260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	67bb      	str	r3, [r7, #120]	; 0x78
 800626e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800627c:	4649      	mov	r1, r9
 800627e:	008b      	lsls	r3, r1, #2
 8006280:	4641      	mov	r1, r8
 8006282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006286:	4641      	mov	r1, r8
 8006288:	008a      	lsls	r2, r1, #2
 800628a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800628e:	f7fa f807 	bl	80002a0 <__aeabi_uldivmod>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4611      	mov	r1, r2
 8006298:	4b38      	ldr	r3, [pc, #224]	; (800637c <UART_SetConfig+0x4e4>)
 800629a:	fba3 2301 	umull	r2, r3, r3, r1
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	2264      	movs	r2, #100	; 0x64
 80062a2:	fb02 f303 	mul.w	r3, r2, r3
 80062a6:	1acb      	subs	r3, r1, r3
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	3332      	adds	r3, #50	; 0x32
 80062ac:	4a33      	ldr	r2, [pc, #204]	; (800637c <UART_SetConfig+0x4e4>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062b8:	441c      	add	r4, r3
 80062ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062be:	2200      	movs	r2, #0
 80062c0:	673b      	str	r3, [r7, #112]	; 0x70
 80062c2:	677a      	str	r2, [r7, #116]	; 0x74
 80062c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062c8:	4642      	mov	r2, r8
 80062ca:	464b      	mov	r3, r9
 80062cc:	1891      	adds	r1, r2, r2
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	415b      	adcs	r3, r3
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062d8:	4641      	mov	r1, r8
 80062da:	1851      	adds	r1, r2, r1
 80062dc:	6039      	str	r1, [r7, #0]
 80062de:	4649      	mov	r1, r9
 80062e0:	414b      	adcs	r3, r1
 80062e2:	607b      	str	r3, [r7, #4]
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062f0:	4659      	mov	r1, fp
 80062f2:	00cb      	lsls	r3, r1, #3
 80062f4:	4651      	mov	r1, sl
 80062f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062fa:	4651      	mov	r1, sl
 80062fc:	00ca      	lsls	r2, r1, #3
 80062fe:	4610      	mov	r0, r2
 8006300:	4619      	mov	r1, r3
 8006302:	4603      	mov	r3, r0
 8006304:	4642      	mov	r2, r8
 8006306:	189b      	adds	r3, r3, r2
 8006308:	66bb      	str	r3, [r7, #104]	; 0x68
 800630a:	464b      	mov	r3, r9
 800630c:	460a      	mov	r2, r1
 800630e:	eb42 0303 	adc.w	r3, r2, r3
 8006312:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	663b      	str	r3, [r7, #96]	; 0x60
 800631e:	667a      	str	r2, [r7, #100]	; 0x64
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800632c:	4649      	mov	r1, r9
 800632e:	008b      	lsls	r3, r1, #2
 8006330:	4641      	mov	r1, r8
 8006332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006336:	4641      	mov	r1, r8
 8006338:	008a      	lsls	r2, r1, #2
 800633a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800633e:	f7f9 ffaf 	bl	80002a0 <__aeabi_uldivmod>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <UART_SetConfig+0x4e4>)
 8006348:	fba3 1302 	umull	r1, r3, r3, r2
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	2164      	movs	r1, #100	; 0x64
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	3332      	adds	r3, #50	; 0x32
 800635a:	4a08      	ldr	r2, [pc, #32]	; (800637c <UART_SetConfig+0x4e4>)
 800635c:	fba2 2303 	umull	r2, r3, r2, r3
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	f003 020f 	and.w	r2, r3, #15
 8006366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4422      	add	r2, r4
 800636e:	609a      	str	r2, [r3, #8]
}
 8006370:	bf00      	nop
 8006372:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006376:	46bd      	mov	sp, r7
 8006378:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800637c:	51eb851f 	.word	0x51eb851f

08006380 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006380:	b084      	sub	sp, #16
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	f107 001c 	add.w	r0, r7, #28
 800638e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	2b01      	cmp	r3, #1
 8006396:	d122      	bne.n	80063de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d105      	bne.n	80063d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 faa2 	bl	800691c <USB_CoreReset>
 80063d8:	4603      	mov	r3, r0
 80063da:	73fb      	strb	r3, [r7, #15]
 80063dc:	e01a      	b.n	8006414 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa96 	bl	800691c <USB_CoreReset>
 80063f0:	4603      	mov	r3, r0
 80063f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	639a      	str	r2, [r3, #56]	; 0x38
 8006406:	e005      	b.n	8006414 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	2b01      	cmp	r3, #1
 8006418:	d10b      	bne.n	8006432 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f043 0206 	orr.w	r2, r3, #6
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f043 0220 	orr.w	r2, r3, #32
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800643e:	b004      	add	sp, #16
 8006440:	4770      	bx	lr

08006442 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f023 0201 	bic.w	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d115      	bne.n	80064b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006492:	2001      	movs	r0, #1
 8006494:	f7fb fb28 	bl	8001ae8 <HAL_Delay>
      ms++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa2e 	bl	8006900 <USB_GetMode>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d01e      	beq.n	80064e8 <USB_SetCurrentMode+0x84>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b31      	cmp	r3, #49	; 0x31
 80064ae:	d9f0      	bls.n	8006492 <USB_SetCurrentMode+0x2e>
 80064b0:	e01a      	b.n	80064e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d115      	bne.n	80064e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064c4:	2001      	movs	r0, #1
 80064c6:	f7fb fb0f 	bl	8001ae8 <HAL_Delay>
      ms++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3301      	adds	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fa15 	bl	8006900 <USB_GetMode>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <USB_SetCurrentMode+0x84>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b31      	cmp	r3, #49	; 0x31
 80064e0:	d9f0      	bls.n	80064c4 <USB_SetCurrentMode+0x60>
 80064e2:	e001      	b.n	80064e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e005      	b.n	80064f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b32      	cmp	r3, #50	; 0x32
 80064ec:	d101      	bne.n	80064f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064fc:	b084      	sub	sp, #16
 80064fe:	b580      	push	{r7, lr}
 8006500:	b086      	sub	sp, #24
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800650a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006516:	2300      	movs	r3, #0
 8006518:	613b      	str	r3, [r7, #16]
 800651a:	e009      	b.n	8006530 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	3340      	adds	r3, #64	; 0x40
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	2200      	movs	r2, #0
 8006528:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	3301      	adds	r3, #1
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b0e      	cmp	r3, #14
 8006534:	d9f2      	bls.n	800651c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d11c      	bne.n	8006576 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800654a:	f043 0302 	orr.w	r3, r3, #2
 800654e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	639a      	str	r2, [r3, #56]	; 0x38
 8006574:	e00b      	b.n	800658e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006594:	461a      	mov	r2, r3
 8006596:	2300      	movs	r3, #0
 8006598:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a0:	4619      	mov	r1, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a8:	461a      	mov	r2, r3
 80065aa:	680b      	ldr	r3, [r1, #0]
 80065ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d10c      	bne.n	80065ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d104      	bne.n	80065c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065ba:	2100      	movs	r1, #0
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f965 	bl	800688c <USB_SetDevSpeed>
 80065c2:	e008      	b.n	80065d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065c4:	2101      	movs	r1, #1
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f960 	bl	800688c <USB_SetDevSpeed>
 80065cc:	e003      	b.n	80065d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065ce:	2103      	movs	r1, #3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f95b 	bl	800688c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065d6:	2110      	movs	r1, #16
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f8f3 	bl	80067c4 <USB_FlushTxFifo>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f91f 	bl	800682c <USB_FlushRxFifo>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	461a      	mov	r2, r3
 8006600:	2300      	movs	r3, #0
 8006602:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	461a      	mov	r2, r3
 800660c:	2300      	movs	r3, #0
 800660e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006616:	461a      	mov	r2, r3
 8006618:	2300      	movs	r3, #0
 800661a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800661c:	2300      	movs	r3, #0
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	e043      	b.n	80066aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006638:	d118      	bne.n	800666c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	461a      	mov	r2, r3
 800664e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	e013      	b.n	800667e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006662:	461a      	mov	r2, r3
 8006664:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	e008      	b.n	800667e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	461a      	mov	r2, r3
 800667a:	2300      	movs	r3, #0
 800667c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668a:	461a      	mov	r2, r3
 800668c:	2300      	movs	r3, #0
 800668e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669c:	461a      	mov	r2, r3
 800669e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	3301      	adds	r3, #1
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d3b7      	bcc.n	8006622 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066b2:	2300      	movs	r3, #0
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	e043      	b.n	8006740 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ce:	d118      	bne.n	8006702 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e2:	461a      	mov	r2, r3
 80066e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e013      	b.n	8006714 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f8:	461a      	mov	r2, r3
 80066fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	e008      	b.n	8006714 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670e:	461a      	mov	r2, r3
 8006710:	2300      	movs	r3, #0
 8006712:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	461a      	mov	r2, r3
 8006722:	2300      	movs	r3, #0
 8006724:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006732:	461a      	mov	r2, r3
 8006734:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006738:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	3301      	adds	r3, #1
 800673e:	613b      	str	r3, [r7, #16]
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	429a      	cmp	r2, r3
 8006746:	d3b7      	bcc.n	80066b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800675a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006768:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	2b00      	cmp	r3, #0
 800676e:	d105      	bne.n	800677c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f043 0210 	orr.w	r2, r3, #16
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	699a      	ldr	r2, [r3, #24]
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <USB_DevInit+0x2c4>)
 8006782:	4313      	orrs	r3, r2
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	f043 0208 	orr.w	r2, r3, #8
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800679a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679c:	2b01      	cmp	r3, #1
 800679e:	d107      	bne.n	80067b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067a8:	f043 0304 	orr.w	r3, r3, #4
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067bc:	b004      	add	sp, #16
 80067be:	4770      	bx	lr
 80067c0:	803c3800 	.word	0x803c3800

080067c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4a13      	ldr	r2, [pc, #76]	; (8006828 <USB_FlushTxFifo+0x64>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d901      	bls.n	80067e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e01b      	b.n	800681c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	daf2      	bge.n	80067d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	019b      	lsls	r3, r3, #6
 80067f4:	f043 0220 	orr.w	r2, r3, #32
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4a08      	ldr	r2, [pc, #32]	; (8006828 <USB_FlushTxFifo+0x64>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d901      	bls.n	800680e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e006      	b.n	800681c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b20      	cmp	r3, #32
 8006818:	d0f0      	beq.n	80067fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	00030d40 	.word	0x00030d40

0800682c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4a11      	ldr	r2, [pc, #68]	; (8006888 <USB_FlushRxFifo+0x5c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e018      	b.n	800687c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	daf2      	bge.n	8006838 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2210      	movs	r2, #16
 800685a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4a08      	ldr	r2, [pc, #32]	; (8006888 <USB_FlushRxFifo+0x5c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d901      	bls.n	800686e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e006      	b.n	800687c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0310 	and.w	r3, r3, #16
 8006876:	2b10      	cmp	r3, #16
 8006878:	d0f0      	beq.n	800685c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	00030d40 	.word	0x00030d40

0800688c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	68f9      	ldr	r1, [r7, #12]
 80068a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ac:	4313      	orrs	r3, r2
 80068ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068be:	b480      	push	{r7}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068d8:	f023 0303 	bic.w	r3, r3, #3
 80068dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ec:	f043 0302 	orr.w	r3, r3, #2
 80068f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	f003 0301 	and.w	r3, r3, #1
}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3301      	adds	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a13      	ldr	r2, [pc, #76]	; (8006980 <USB_CoreReset+0x64>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d901      	bls.n	800693a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e01b      	b.n	8006972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	daf2      	bge.n	8006928 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f043 0201 	orr.w	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3301      	adds	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4a09      	ldr	r2, [pc, #36]	; (8006980 <USB_CoreReset+0x64>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d901      	bls.n	8006964 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e006      	b.n	8006972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b01      	cmp	r3, #1
 800696e:	d0f0      	beq.n	8006952 <USB_CoreReset+0x36>

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	00030d40 	.word	0x00030d40

08006984 <std>:
 8006984:	2300      	movs	r3, #0
 8006986:	b510      	push	{r4, lr}
 8006988:	4604      	mov	r4, r0
 800698a:	e9c0 3300 	strd	r3, r3, [r0]
 800698e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006992:	6083      	str	r3, [r0, #8]
 8006994:	8181      	strh	r1, [r0, #12]
 8006996:	6643      	str	r3, [r0, #100]	; 0x64
 8006998:	81c2      	strh	r2, [r0, #14]
 800699a:	6183      	str	r3, [r0, #24]
 800699c:	4619      	mov	r1, r3
 800699e:	2208      	movs	r2, #8
 80069a0:	305c      	adds	r0, #92	; 0x5c
 80069a2:	f000 fa39 	bl	8006e18 <memset>
 80069a6:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <std+0x58>)
 80069a8:	6263      	str	r3, [r4, #36]	; 0x24
 80069aa:	4b0d      	ldr	r3, [pc, #52]	; (80069e0 <std+0x5c>)
 80069ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80069ae:	4b0d      	ldr	r3, [pc, #52]	; (80069e4 <std+0x60>)
 80069b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069b2:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <std+0x64>)
 80069b4:	6323      	str	r3, [r4, #48]	; 0x30
 80069b6:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <std+0x68>)
 80069b8:	6224      	str	r4, [r4, #32]
 80069ba:	429c      	cmp	r4, r3
 80069bc:	d006      	beq.n	80069cc <std+0x48>
 80069be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80069c2:	4294      	cmp	r4, r2
 80069c4:	d002      	beq.n	80069cc <std+0x48>
 80069c6:	33d0      	adds	r3, #208	; 0xd0
 80069c8:	429c      	cmp	r4, r3
 80069ca:	d105      	bne.n	80069d8 <std+0x54>
 80069cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069d4:	f000 ba98 	b.w	8006f08 <__retarget_lock_init_recursive>
 80069d8:	bd10      	pop	{r4, pc}
 80069da:	bf00      	nop
 80069dc:	08006c69 	.word	0x08006c69
 80069e0:	08006c8b 	.word	0x08006c8b
 80069e4:	08006cc3 	.word	0x08006cc3
 80069e8:	08006ce7 	.word	0x08006ce7
 80069ec:	200009f8 	.word	0x200009f8

080069f0 <stdio_exit_handler>:
 80069f0:	4a02      	ldr	r2, [pc, #8]	; (80069fc <stdio_exit_handler+0xc>)
 80069f2:	4903      	ldr	r1, [pc, #12]	; (8006a00 <stdio_exit_handler+0x10>)
 80069f4:	4803      	ldr	r0, [pc, #12]	; (8006a04 <stdio_exit_handler+0x14>)
 80069f6:	f000 b869 	b.w	8006acc <_fwalk_sglue>
 80069fa:	bf00      	nop
 80069fc:	20000014 	.word	0x20000014
 8006a00:	080077dd 	.word	0x080077dd
 8006a04:	20000020 	.word	0x20000020

08006a08 <cleanup_stdio>:
 8006a08:	6841      	ldr	r1, [r0, #4]
 8006a0a:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <cleanup_stdio+0x34>)
 8006a0c:	4299      	cmp	r1, r3
 8006a0e:	b510      	push	{r4, lr}
 8006a10:	4604      	mov	r4, r0
 8006a12:	d001      	beq.n	8006a18 <cleanup_stdio+0x10>
 8006a14:	f000 fee2 	bl	80077dc <_fflush_r>
 8006a18:	68a1      	ldr	r1, [r4, #8]
 8006a1a:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <cleanup_stdio+0x38>)
 8006a1c:	4299      	cmp	r1, r3
 8006a1e:	d002      	beq.n	8006a26 <cleanup_stdio+0x1e>
 8006a20:	4620      	mov	r0, r4
 8006a22:	f000 fedb 	bl	80077dc <_fflush_r>
 8006a26:	68e1      	ldr	r1, [r4, #12]
 8006a28:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <cleanup_stdio+0x3c>)
 8006a2a:	4299      	cmp	r1, r3
 8006a2c:	d004      	beq.n	8006a38 <cleanup_stdio+0x30>
 8006a2e:	4620      	mov	r0, r4
 8006a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a34:	f000 bed2 	b.w	80077dc <_fflush_r>
 8006a38:	bd10      	pop	{r4, pc}
 8006a3a:	bf00      	nop
 8006a3c:	200009f8 	.word	0x200009f8
 8006a40:	20000a60 	.word	0x20000a60
 8006a44:	20000ac8 	.word	0x20000ac8

08006a48 <global_stdio_init.part.0>:
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <global_stdio_init.part.0+0x30>)
 8006a4c:	4c0b      	ldr	r4, [pc, #44]	; (8006a7c <global_stdio_init.part.0+0x34>)
 8006a4e:	4a0c      	ldr	r2, [pc, #48]	; (8006a80 <global_stdio_init.part.0+0x38>)
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	4620      	mov	r0, r4
 8006a54:	2200      	movs	r2, #0
 8006a56:	2104      	movs	r1, #4
 8006a58:	f7ff ff94 	bl	8006984 <std>
 8006a5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006a60:	2201      	movs	r2, #1
 8006a62:	2109      	movs	r1, #9
 8006a64:	f7ff ff8e 	bl	8006984 <std>
 8006a68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a72:	2112      	movs	r1, #18
 8006a74:	f7ff bf86 	b.w	8006984 <std>
 8006a78:	20000b30 	.word	0x20000b30
 8006a7c:	200009f8 	.word	0x200009f8
 8006a80:	080069f1 	.word	0x080069f1

08006a84 <__sfp_lock_acquire>:
 8006a84:	4801      	ldr	r0, [pc, #4]	; (8006a8c <__sfp_lock_acquire+0x8>)
 8006a86:	f000 ba40 	b.w	8006f0a <__retarget_lock_acquire_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	20000b39 	.word	0x20000b39

08006a90 <__sfp_lock_release>:
 8006a90:	4801      	ldr	r0, [pc, #4]	; (8006a98 <__sfp_lock_release+0x8>)
 8006a92:	f000 ba3b 	b.w	8006f0c <__retarget_lock_release_recursive>
 8006a96:	bf00      	nop
 8006a98:	20000b39 	.word	0x20000b39

08006a9c <__sinit>:
 8006a9c:	b510      	push	{r4, lr}
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	f7ff fff0 	bl	8006a84 <__sfp_lock_acquire>
 8006aa4:	6a23      	ldr	r3, [r4, #32]
 8006aa6:	b11b      	cbz	r3, 8006ab0 <__sinit+0x14>
 8006aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aac:	f7ff bff0 	b.w	8006a90 <__sfp_lock_release>
 8006ab0:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <__sinit+0x28>)
 8006ab2:	6223      	str	r3, [r4, #32]
 8006ab4:	4b04      	ldr	r3, [pc, #16]	; (8006ac8 <__sinit+0x2c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f5      	bne.n	8006aa8 <__sinit+0xc>
 8006abc:	f7ff ffc4 	bl	8006a48 <global_stdio_init.part.0>
 8006ac0:	e7f2      	b.n	8006aa8 <__sinit+0xc>
 8006ac2:	bf00      	nop
 8006ac4:	08006a09 	.word	0x08006a09
 8006ac8:	20000b30 	.word	0x20000b30

08006acc <_fwalk_sglue>:
 8006acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad0:	4607      	mov	r7, r0
 8006ad2:	4688      	mov	r8, r1
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	2600      	movs	r6, #0
 8006ad8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006adc:	f1b9 0901 	subs.w	r9, r9, #1
 8006ae0:	d505      	bpl.n	8006aee <_fwalk_sglue+0x22>
 8006ae2:	6824      	ldr	r4, [r4, #0]
 8006ae4:	2c00      	cmp	r4, #0
 8006ae6:	d1f7      	bne.n	8006ad8 <_fwalk_sglue+0xc>
 8006ae8:	4630      	mov	r0, r6
 8006aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aee:	89ab      	ldrh	r3, [r5, #12]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d907      	bls.n	8006b04 <_fwalk_sglue+0x38>
 8006af4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006af8:	3301      	adds	r3, #1
 8006afa:	d003      	beq.n	8006b04 <_fwalk_sglue+0x38>
 8006afc:	4629      	mov	r1, r5
 8006afe:	4638      	mov	r0, r7
 8006b00:	47c0      	blx	r8
 8006b02:	4306      	orrs	r6, r0
 8006b04:	3568      	adds	r5, #104	; 0x68
 8006b06:	e7e9      	b.n	8006adc <_fwalk_sglue+0x10>

08006b08 <_puts_r>:
 8006b08:	6a03      	ldr	r3, [r0, #32]
 8006b0a:	b570      	push	{r4, r5, r6, lr}
 8006b0c:	6884      	ldr	r4, [r0, #8]
 8006b0e:	4605      	mov	r5, r0
 8006b10:	460e      	mov	r6, r1
 8006b12:	b90b      	cbnz	r3, 8006b18 <_puts_r+0x10>
 8006b14:	f7ff ffc2 	bl	8006a9c <__sinit>
 8006b18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b1a:	07db      	lsls	r3, r3, #31
 8006b1c:	d405      	bmi.n	8006b2a <_puts_r+0x22>
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	0598      	lsls	r0, r3, #22
 8006b22:	d402      	bmi.n	8006b2a <_puts_r+0x22>
 8006b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b26:	f000 f9f0 	bl	8006f0a <__retarget_lock_acquire_recursive>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	0719      	lsls	r1, r3, #28
 8006b2e:	d513      	bpl.n	8006b58 <_puts_r+0x50>
 8006b30:	6923      	ldr	r3, [r4, #16]
 8006b32:	b18b      	cbz	r3, 8006b58 <_puts_r+0x50>
 8006b34:	3e01      	subs	r6, #1
 8006b36:	68a3      	ldr	r3, [r4, #8]
 8006b38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	60a3      	str	r3, [r4, #8]
 8006b40:	b9e9      	cbnz	r1, 8006b7e <_puts_r+0x76>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	da2e      	bge.n	8006ba4 <_puts_r+0x9c>
 8006b46:	4622      	mov	r2, r4
 8006b48:	210a      	movs	r1, #10
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f000 f8cf 	bl	8006cee <__swbuf_r>
 8006b50:	3001      	adds	r0, #1
 8006b52:	d007      	beq.n	8006b64 <_puts_r+0x5c>
 8006b54:	250a      	movs	r5, #10
 8006b56:	e007      	b.n	8006b68 <_puts_r+0x60>
 8006b58:	4621      	mov	r1, r4
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f000 f904 	bl	8006d68 <__swsetup_r>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d0e7      	beq.n	8006b34 <_puts_r+0x2c>
 8006b64:	f04f 35ff 	mov.w	r5, #4294967295
 8006b68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b6a:	07da      	lsls	r2, r3, #31
 8006b6c:	d405      	bmi.n	8006b7a <_puts_r+0x72>
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	059b      	lsls	r3, r3, #22
 8006b72:	d402      	bmi.n	8006b7a <_puts_r+0x72>
 8006b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b76:	f000 f9c9 	bl	8006f0c <__retarget_lock_release_recursive>
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	bd70      	pop	{r4, r5, r6, pc}
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	da04      	bge.n	8006b8c <_puts_r+0x84>
 8006b82:	69a2      	ldr	r2, [r4, #24]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	dc06      	bgt.n	8006b96 <_puts_r+0x8e>
 8006b88:	290a      	cmp	r1, #10
 8006b8a:	d004      	beq.n	8006b96 <_puts_r+0x8e>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	6022      	str	r2, [r4, #0]
 8006b92:	7019      	strb	r1, [r3, #0]
 8006b94:	e7cf      	b.n	8006b36 <_puts_r+0x2e>
 8006b96:	4622      	mov	r2, r4
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f000 f8a8 	bl	8006cee <__swbuf_r>
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d1c9      	bne.n	8006b36 <_puts_r+0x2e>
 8006ba2:	e7df      	b.n	8006b64 <_puts_r+0x5c>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	250a      	movs	r5, #10
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	6022      	str	r2, [r4, #0]
 8006bac:	701d      	strb	r5, [r3, #0]
 8006bae:	e7db      	b.n	8006b68 <_puts_r+0x60>

08006bb0 <puts>:
 8006bb0:	4b02      	ldr	r3, [pc, #8]	; (8006bbc <puts+0xc>)
 8006bb2:	4601      	mov	r1, r0
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	f7ff bfa7 	b.w	8006b08 <_puts_r>
 8006bba:	bf00      	nop
 8006bbc:	2000006c 	.word	0x2000006c

08006bc0 <sniprintf>:
 8006bc0:	b40c      	push	{r2, r3}
 8006bc2:	b530      	push	{r4, r5, lr}
 8006bc4:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <sniprintf+0x64>)
 8006bc6:	1e0c      	subs	r4, r1, #0
 8006bc8:	681d      	ldr	r5, [r3, #0]
 8006bca:	b09d      	sub	sp, #116	; 0x74
 8006bcc:	da08      	bge.n	8006be0 <sniprintf+0x20>
 8006bce:	238b      	movs	r3, #139	; 0x8b
 8006bd0:	602b      	str	r3, [r5, #0]
 8006bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd6:	b01d      	add	sp, #116	; 0x74
 8006bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bdc:	b002      	add	sp, #8
 8006bde:	4770      	bx	lr
 8006be0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006be4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006be8:	bf14      	ite	ne
 8006bea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006bee:	4623      	moveq	r3, r4
 8006bf0:	9304      	str	r3, [sp, #16]
 8006bf2:	9307      	str	r3, [sp, #28]
 8006bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006bf8:	9002      	str	r0, [sp, #8]
 8006bfa:	9006      	str	r0, [sp, #24]
 8006bfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c02:	ab21      	add	r3, sp, #132	; 0x84
 8006c04:	a902      	add	r1, sp, #8
 8006c06:	4628      	mov	r0, r5
 8006c08:	9301      	str	r3, [sp, #4]
 8006c0a:	f000 fad3 	bl	80071b4 <_svfiprintf_r>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	bfbc      	itt	lt
 8006c12:	238b      	movlt	r3, #139	; 0x8b
 8006c14:	602b      	strlt	r3, [r5, #0]
 8006c16:	2c00      	cmp	r4, #0
 8006c18:	d0dd      	beq.n	8006bd6 <sniprintf+0x16>
 8006c1a:	9b02      	ldr	r3, [sp, #8]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e7d9      	b.n	8006bd6 <sniprintf+0x16>
 8006c22:	bf00      	nop
 8006c24:	2000006c 	.word	0x2000006c

08006c28 <siprintf>:
 8006c28:	b40e      	push	{r1, r2, r3}
 8006c2a:	b500      	push	{lr}
 8006c2c:	b09c      	sub	sp, #112	; 0x70
 8006c2e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c30:	9002      	str	r0, [sp, #8]
 8006c32:	9006      	str	r0, [sp, #24]
 8006c34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c38:	4809      	ldr	r0, [pc, #36]	; (8006c60 <siprintf+0x38>)
 8006c3a:	9107      	str	r1, [sp, #28]
 8006c3c:	9104      	str	r1, [sp, #16]
 8006c3e:	4909      	ldr	r1, [pc, #36]	; (8006c64 <siprintf+0x3c>)
 8006c40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c44:	9105      	str	r1, [sp, #20]
 8006c46:	6800      	ldr	r0, [r0, #0]
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	a902      	add	r1, sp, #8
 8006c4c:	f000 fab2 	bl	80071b4 <_svfiprintf_r>
 8006c50:	9b02      	ldr	r3, [sp, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	b01c      	add	sp, #112	; 0x70
 8006c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c5c:	b003      	add	sp, #12
 8006c5e:	4770      	bx	lr
 8006c60:	2000006c 	.word	0x2000006c
 8006c64:	ffff0208 	.word	0xffff0208

08006c68 <__sread>:
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c70:	f000 f8fc 	bl	8006e6c <_read_r>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	bfab      	itete	ge
 8006c78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8006c7c:	181b      	addge	r3, r3, r0
 8006c7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c82:	bfac      	ite	ge
 8006c84:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c86:	81a3      	strhlt	r3, [r4, #12]
 8006c88:	bd10      	pop	{r4, pc}

08006c8a <__swrite>:
 8006c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c8e:	461f      	mov	r7, r3
 8006c90:	898b      	ldrh	r3, [r1, #12]
 8006c92:	05db      	lsls	r3, r3, #23
 8006c94:	4605      	mov	r5, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	4616      	mov	r6, r2
 8006c9a:	d505      	bpl.n	8006ca8 <__swrite+0x1e>
 8006c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f000 f8d0 	bl	8006e48 <_lseek_r>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cb2:	81a3      	strh	r3, [r4, #12]
 8006cb4:	4632      	mov	r2, r6
 8006cb6:	463b      	mov	r3, r7
 8006cb8:	4628      	mov	r0, r5
 8006cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cbe:	f000 b8e7 	b.w	8006e90 <_write_r>

08006cc2 <__sseek>:
 8006cc2:	b510      	push	{r4, lr}
 8006cc4:	460c      	mov	r4, r1
 8006cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cca:	f000 f8bd 	bl	8006e48 <_lseek_r>
 8006cce:	1c43      	adds	r3, r0, #1
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	bf15      	itete	ne
 8006cd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cde:	81a3      	strheq	r3, [r4, #12]
 8006ce0:	bf18      	it	ne
 8006ce2:	81a3      	strhne	r3, [r4, #12]
 8006ce4:	bd10      	pop	{r4, pc}

08006ce6 <__sclose>:
 8006ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cea:	f000 b89d 	b.w	8006e28 <_close_r>

08006cee <__swbuf_r>:
 8006cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf0:	460e      	mov	r6, r1
 8006cf2:	4614      	mov	r4, r2
 8006cf4:	4605      	mov	r5, r0
 8006cf6:	b118      	cbz	r0, 8006d00 <__swbuf_r+0x12>
 8006cf8:	6a03      	ldr	r3, [r0, #32]
 8006cfa:	b90b      	cbnz	r3, 8006d00 <__swbuf_r+0x12>
 8006cfc:	f7ff fece 	bl	8006a9c <__sinit>
 8006d00:	69a3      	ldr	r3, [r4, #24]
 8006d02:	60a3      	str	r3, [r4, #8]
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	071a      	lsls	r2, r3, #28
 8006d08:	d525      	bpl.n	8006d56 <__swbuf_r+0x68>
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	b31b      	cbz	r3, 8006d56 <__swbuf_r+0x68>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	6922      	ldr	r2, [r4, #16]
 8006d12:	1a98      	subs	r0, r3, r2
 8006d14:	6963      	ldr	r3, [r4, #20]
 8006d16:	b2f6      	uxtb	r6, r6
 8006d18:	4283      	cmp	r3, r0
 8006d1a:	4637      	mov	r7, r6
 8006d1c:	dc04      	bgt.n	8006d28 <__swbuf_r+0x3a>
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 fd5b 	bl	80077dc <_fflush_r>
 8006d26:	b9e0      	cbnz	r0, 8006d62 <__swbuf_r+0x74>
 8006d28:	68a3      	ldr	r3, [r4, #8]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	60a3      	str	r3, [r4, #8]
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	6022      	str	r2, [r4, #0]
 8006d34:	701e      	strb	r6, [r3, #0]
 8006d36:	6962      	ldr	r2, [r4, #20]
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d004      	beq.n	8006d48 <__swbuf_r+0x5a>
 8006d3e:	89a3      	ldrh	r3, [r4, #12]
 8006d40:	07db      	lsls	r3, r3, #31
 8006d42:	d506      	bpl.n	8006d52 <__swbuf_r+0x64>
 8006d44:	2e0a      	cmp	r6, #10
 8006d46:	d104      	bne.n	8006d52 <__swbuf_r+0x64>
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f000 fd46 	bl	80077dc <_fflush_r>
 8006d50:	b938      	cbnz	r0, 8006d62 <__swbuf_r+0x74>
 8006d52:	4638      	mov	r0, r7
 8006d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d56:	4621      	mov	r1, r4
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f000 f805 	bl	8006d68 <__swsetup_r>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d0d5      	beq.n	8006d0e <__swbuf_r+0x20>
 8006d62:	f04f 37ff 	mov.w	r7, #4294967295
 8006d66:	e7f4      	b.n	8006d52 <__swbuf_r+0x64>

08006d68 <__swsetup_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4b2a      	ldr	r3, [pc, #168]	; (8006e14 <__swsetup_r+0xac>)
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	460c      	mov	r4, r1
 8006d72:	b118      	cbz	r0, 8006d7c <__swsetup_r+0x14>
 8006d74:	6a03      	ldr	r3, [r0, #32]
 8006d76:	b90b      	cbnz	r3, 8006d7c <__swsetup_r+0x14>
 8006d78:	f7ff fe90 	bl	8006a9c <__sinit>
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d82:	0718      	lsls	r0, r3, #28
 8006d84:	d422      	bmi.n	8006dcc <__swsetup_r+0x64>
 8006d86:	06d9      	lsls	r1, r3, #27
 8006d88:	d407      	bmi.n	8006d9a <__swsetup_r+0x32>
 8006d8a:	2309      	movs	r3, #9
 8006d8c:	602b      	str	r3, [r5, #0]
 8006d8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d92:	81a3      	strh	r3, [r4, #12]
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295
 8006d98:	e034      	b.n	8006e04 <__swsetup_r+0x9c>
 8006d9a:	0758      	lsls	r0, r3, #29
 8006d9c:	d512      	bpl.n	8006dc4 <__swsetup_r+0x5c>
 8006d9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006da0:	b141      	cbz	r1, 8006db4 <__swsetup_r+0x4c>
 8006da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006da6:	4299      	cmp	r1, r3
 8006da8:	d002      	beq.n	8006db0 <__swsetup_r+0x48>
 8006daa:	4628      	mov	r0, r5
 8006dac:	f000 f8b0 	bl	8006f10 <_free_r>
 8006db0:	2300      	movs	r3, #0
 8006db2:	6363      	str	r3, [r4, #52]	; 0x34
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dba:	81a3      	strh	r3, [r4, #12]
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	6063      	str	r3, [r4, #4]
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	6023      	str	r3, [r4, #0]
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	f043 0308 	orr.w	r3, r3, #8
 8006dca:	81a3      	strh	r3, [r4, #12]
 8006dcc:	6923      	ldr	r3, [r4, #16]
 8006dce:	b94b      	cbnz	r3, 8006de4 <__swsetup_r+0x7c>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dda:	d003      	beq.n	8006de4 <__swsetup_r+0x7c>
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4628      	mov	r0, r5
 8006de0:	f000 fd4a 	bl	8007878 <__smakebuf_r>
 8006de4:	89a0      	ldrh	r0, [r4, #12]
 8006de6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dea:	f010 0301 	ands.w	r3, r0, #1
 8006dee:	d00a      	beq.n	8006e06 <__swsetup_r+0x9e>
 8006df0:	2300      	movs	r3, #0
 8006df2:	60a3      	str	r3, [r4, #8]
 8006df4:	6963      	ldr	r3, [r4, #20]
 8006df6:	425b      	negs	r3, r3
 8006df8:	61a3      	str	r3, [r4, #24]
 8006dfa:	6923      	ldr	r3, [r4, #16]
 8006dfc:	b943      	cbnz	r3, 8006e10 <__swsetup_r+0xa8>
 8006dfe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e02:	d1c4      	bne.n	8006d8e <__swsetup_r+0x26>
 8006e04:	bd38      	pop	{r3, r4, r5, pc}
 8006e06:	0781      	lsls	r1, r0, #30
 8006e08:	bf58      	it	pl
 8006e0a:	6963      	ldrpl	r3, [r4, #20]
 8006e0c:	60a3      	str	r3, [r4, #8]
 8006e0e:	e7f4      	b.n	8006dfa <__swsetup_r+0x92>
 8006e10:	2000      	movs	r0, #0
 8006e12:	e7f7      	b.n	8006e04 <__swsetup_r+0x9c>
 8006e14:	2000006c 	.word	0x2000006c

08006e18 <memset>:
 8006e18:	4402      	add	r2, r0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d100      	bne.n	8006e22 <memset+0xa>
 8006e20:	4770      	bx	lr
 8006e22:	f803 1b01 	strb.w	r1, [r3], #1
 8006e26:	e7f9      	b.n	8006e1c <memset+0x4>

08006e28 <_close_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4d06      	ldr	r5, [pc, #24]	; (8006e44 <_close_r+0x1c>)
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	4604      	mov	r4, r0
 8006e30:	4608      	mov	r0, r1
 8006e32:	602b      	str	r3, [r5, #0]
 8006e34:	f7fa fd3f 	bl	80018b6 <_close>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_close_r+0x1a>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_close_r+0x1a>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	20000b34 	.word	0x20000b34

08006e48 <_lseek_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4d07      	ldr	r5, [pc, #28]	; (8006e68 <_lseek_r+0x20>)
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	4608      	mov	r0, r1
 8006e50:	4611      	mov	r1, r2
 8006e52:	2200      	movs	r2, #0
 8006e54:	602a      	str	r2, [r5, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f7fa fd54 	bl	8001904 <_lseek>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_lseek_r+0x1e>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_lseek_r+0x1e>
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	20000b34 	.word	0x20000b34

08006e6c <_read_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4d07      	ldr	r5, [pc, #28]	; (8006e8c <_read_r+0x20>)
 8006e70:	4604      	mov	r4, r0
 8006e72:	4608      	mov	r0, r1
 8006e74:	4611      	mov	r1, r2
 8006e76:	2200      	movs	r2, #0
 8006e78:	602a      	str	r2, [r5, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f7fa fcfe 	bl	800187c <_read>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_read_r+0x1e>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_read_r+0x1e>
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	20000b34 	.word	0x20000b34

08006e90 <_write_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4d07      	ldr	r5, [pc, #28]	; (8006eb0 <_write_r+0x20>)
 8006e94:	4604      	mov	r4, r0
 8006e96:	4608      	mov	r0, r1
 8006e98:	4611      	mov	r1, r2
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	602a      	str	r2, [r5, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f7f9 fc9a 	bl	80007d8 <_write>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_write_r+0x1e>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_write_r+0x1e>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	20000b34 	.word	0x20000b34

08006eb4 <__errno>:
 8006eb4:	4b01      	ldr	r3, [pc, #4]	; (8006ebc <__errno+0x8>)
 8006eb6:	6818      	ldr	r0, [r3, #0]
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	2000006c 	.word	0x2000006c

08006ec0 <__libc_init_array>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	4d0d      	ldr	r5, [pc, #52]	; (8006ef8 <__libc_init_array+0x38>)
 8006ec4:	4c0d      	ldr	r4, [pc, #52]	; (8006efc <__libc_init_array+0x3c>)
 8006ec6:	1b64      	subs	r4, r4, r5
 8006ec8:	10a4      	asrs	r4, r4, #2
 8006eca:	2600      	movs	r6, #0
 8006ecc:	42a6      	cmp	r6, r4
 8006ece:	d109      	bne.n	8006ee4 <__libc_init_array+0x24>
 8006ed0:	4d0b      	ldr	r5, [pc, #44]	; (8006f00 <__libc_init_array+0x40>)
 8006ed2:	4c0c      	ldr	r4, [pc, #48]	; (8006f04 <__libc_init_array+0x44>)
 8006ed4:	f000 fd9e 	bl	8007a14 <_init>
 8006ed8:	1b64      	subs	r4, r4, r5
 8006eda:	10a4      	asrs	r4, r4, #2
 8006edc:	2600      	movs	r6, #0
 8006ede:	42a6      	cmp	r6, r4
 8006ee0:	d105      	bne.n	8006eee <__libc_init_array+0x2e>
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
 8006ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee8:	4798      	blx	r3
 8006eea:	3601      	adds	r6, #1
 8006eec:	e7ee      	b.n	8006ecc <__libc_init_array+0xc>
 8006eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef2:	4798      	blx	r3
 8006ef4:	3601      	adds	r6, #1
 8006ef6:	e7f2      	b.n	8006ede <__libc_init_array+0x1e>
 8006ef8:	08007bac 	.word	0x08007bac
 8006efc:	08007bac 	.word	0x08007bac
 8006f00:	08007bac 	.word	0x08007bac
 8006f04:	08007bb0 	.word	0x08007bb0

08006f08 <__retarget_lock_init_recursive>:
 8006f08:	4770      	bx	lr

08006f0a <__retarget_lock_acquire_recursive>:
 8006f0a:	4770      	bx	lr

08006f0c <__retarget_lock_release_recursive>:
 8006f0c:	4770      	bx	lr
	...

08006f10 <_free_r>:
 8006f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f12:	2900      	cmp	r1, #0
 8006f14:	d044      	beq.n	8006fa0 <_free_r+0x90>
 8006f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f1a:	9001      	str	r0, [sp, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f22:	bfb8      	it	lt
 8006f24:	18e4      	addlt	r4, r4, r3
 8006f26:	f000 f8df 	bl	80070e8 <__malloc_lock>
 8006f2a:	4a1e      	ldr	r2, [pc, #120]	; (8006fa4 <_free_r+0x94>)
 8006f2c:	9801      	ldr	r0, [sp, #4]
 8006f2e:	6813      	ldr	r3, [r2, #0]
 8006f30:	b933      	cbnz	r3, 8006f40 <_free_r+0x30>
 8006f32:	6063      	str	r3, [r4, #4]
 8006f34:	6014      	str	r4, [r2, #0]
 8006f36:	b003      	add	sp, #12
 8006f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f3c:	f000 b8da 	b.w	80070f4 <__malloc_unlock>
 8006f40:	42a3      	cmp	r3, r4
 8006f42:	d908      	bls.n	8006f56 <_free_r+0x46>
 8006f44:	6825      	ldr	r5, [r4, #0]
 8006f46:	1961      	adds	r1, r4, r5
 8006f48:	428b      	cmp	r3, r1
 8006f4a:	bf01      	itttt	eq
 8006f4c:	6819      	ldreq	r1, [r3, #0]
 8006f4e:	685b      	ldreq	r3, [r3, #4]
 8006f50:	1949      	addeq	r1, r1, r5
 8006f52:	6021      	streq	r1, [r4, #0]
 8006f54:	e7ed      	b.n	8006f32 <_free_r+0x22>
 8006f56:	461a      	mov	r2, r3
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	b10b      	cbz	r3, 8006f60 <_free_r+0x50>
 8006f5c:	42a3      	cmp	r3, r4
 8006f5e:	d9fa      	bls.n	8006f56 <_free_r+0x46>
 8006f60:	6811      	ldr	r1, [r2, #0]
 8006f62:	1855      	adds	r5, r2, r1
 8006f64:	42a5      	cmp	r5, r4
 8006f66:	d10b      	bne.n	8006f80 <_free_r+0x70>
 8006f68:	6824      	ldr	r4, [r4, #0]
 8006f6a:	4421      	add	r1, r4
 8006f6c:	1854      	adds	r4, r2, r1
 8006f6e:	42a3      	cmp	r3, r4
 8006f70:	6011      	str	r1, [r2, #0]
 8006f72:	d1e0      	bne.n	8006f36 <_free_r+0x26>
 8006f74:	681c      	ldr	r4, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	6053      	str	r3, [r2, #4]
 8006f7a:	440c      	add	r4, r1
 8006f7c:	6014      	str	r4, [r2, #0]
 8006f7e:	e7da      	b.n	8006f36 <_free_r+0x26>
 8006f80:	d902      	bls.n	8006f88 <_free_r+0x78>
 8006f82:	230c      	movs	r3, #12
 8006f84:	6003      	str	r3, [r0, #0]
 8006f86:	e7d6      	b.n	8006f36 <_free_r+0x26>
 8006f88:	6825      	ldr	r5, [r4, #0]
 8006f8a:	1961      	adds	r1, r4, r5
 8006f8c:	428b      	cmp	r3, r1
 8006f8e:	bf04      	itt	eq
 8006f90:	6819      	ldreq	r1, [r3, #0]
 8006f92:	685b      	ldreq	r3, [r3, #4]
 8006f94:	6063      	str	r3, [r4, #4]
 8006f96:	bf04      	itt	eq
 8006f98:	1949      	addeq	r1, r1, r5
 8006f9a:	6021      	streq	r1, [r4, #0]
 8006f9c:	6054      	str	r4, [r2, #4]
 8006f9e:	e7ca      	b.n	8006f36 <_free_r+0x26>
 8006fa0:	b003      	add	sp, #12
 8006fa2:	bd30      	pop	{r4, r5, pc}
 8006fa4:	20000b3c 	.word	0x20000b3c

08006fa8 <sbrk_aligned>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	4e0e      	ldr	r6, [pc, #56]	; (8006fe4 <sbrk_aligned+0x3c>)
 8006fac:	460c      	mov	r4, r1
 8006fae:	6831      	ldr	r1, [r6, #0]
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	b911      	cbnz	r1, 8006fba <sbrk_aligned+0x12>
 8006fb4:	f000 fcd8 	bl	8007968 <_sbrk_r>
 8006fb8:	6030      	str	r0, [r6, #0]
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f000 fcd3 	bl	8007968 <_sbrk_r>
 8006fc2:	1c43      	adds	r3, r0, #1
 8006fc4:	d00a      	beq.n	8006fdc <sbrk_aligned+0x34>
 8006fc6:	1cc4      	adds	r4, r0, #3
 8006fc8:	f024 0403 	bic.w	r4, r4, #3
 8006fcc:	42a0      	cmp	r0, r4
 8006fce:	d007      	beq.n	8006fe0 <sbrk_aligned+0x38>
 8006fd0:	1a21      	subs	r1, r4, r0
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f000 fcc8 	bl	8007968 <_sbrk_r>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d101      	bne.n	8006fe0 <sbrk_aligned+0x38>
 8006fdc:	f04f 34ff 	mov.w	r4, #4294967295
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	20000b40 	.word	0x20000b40

08006fe8 <_malloc_r>:
 8006fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fec:	1ccd      	adds	r5, r1, #3
 8006fee:	f025 0503 	bic.w	r5, r5, #3
 8006ff2:	3508      	adds	r5, #8
 8006ff4:	2d0c      	cmp	r5, #12
 8006ff6:	bf38      	it	cc
 8006ff8:	250c      	movcc	r5, #12
 8006ffa:	2d00      	cmp	r5, #0
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	db01      	blt.n	8007004 <_malloc_r+0x1c>
 8007000:	42a9      	cmp	r1, r5
 8007002:	d905      	bls.n	8007010 <_malloc_r+0x28>
 8007004:	230c      	movs	r3, #12
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	2600      	movs	r6, #0
 800700a:	4630      	mov	r0, r6
 800700c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007010:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80070e4 <_malloc_r+0xfc>
 8007014:	f000 f868 	bl	80070e8 <__malloc_lock>
 8007018:	f8d8 3000 	ldr.w	r3, [r8]
 800701c:	461c      	mov	r4, r3
 800701e:	bb5c      	cbnz	r4, 8007078 <_malloc_r+0x90>
 8007020:	4629      	mov	r1, r5
 8007022:	4638      	mov	r0, r7
 8007024:	f7ff ffc0 	bl	8006fa8 <sbrk_aligned>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	4604      	mov	r4, r0
 800702c:	d155      	bne.n	80070da <_malloc_r+0xf2>
 800702e:	f8d8 4000 	ldr.w	r4, [r8]
 8007032:	4626      	mov	r6, r4
 8007034:	2e00      	cmp	r6, #0
 8007036:	d145      	bne.n	80070c4 <_malloc_r+0xdc>
 8007038:	2c00      	cmp	r4, #0
 800703a:	d048      	beq.n	80070ce <_malloc_r+0xe6>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	4631      	mov	r1, r6
 8007040:	4638      	mov	r0, r7
 8007042:	eb04 0903 	add.w	r9, r4, r3
 8007046:	f000 fc8f 	bl	8007968 <_sbrk_r>
 800704a:	4581      	cmp	r9, r0
 800704c:	d13f      	bne.n	80070ce <_malloc_r+0xe6>
 800704e:	6821      	ldr	r1, [r4, #0]
 8007050:	1a6d      	subs	r5, r5, r1
 8007052:	4629      	mov	r1, r5
 8007054:	4638      	mov	r0, r7
 8007056:	f7ff ffa7 	bl	8006fa8 <sbrk_aligned>
 800705a:	3001      	adds	r0, #1
 800705c:	d037      	beq.n	80070ce <_malloc_r+0xe6>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	442b      	add	r3, r5
 8007062:	6023      	str	r3, [r4, #0]
 8007064:	f8d8 3000 	ldr.w	r3, [r8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d038      	beq.n	80070de <_malloc_r+0xf6>
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	42a2      	cmp	r2, r4
 8007070:	d12b      	bne.n	80070ca <_malloc_r+0xe2>
 8007072:	2200      	movs	r2, #0
 8007074:	605a      	str	r2, [r3, #4]
 8007076:	e00f      	b.n	8007098 <_malloc_r+0xb0>
 8007078:	6822      	ldr	r2, [r4, #0]
 800707a:	1b52      	subs	r2, r2, r5
 800707c:	d41f      	bmi.n	80070be <_malloc_r+0xd6>
 800707e:	2a0b      	cmp	r2, #11
 8007080:	d917      	bls.n	80070b2 <_malloc_r+0xca>
 8007082:	1961      	adds	r1, r4, r5
 8007084:	42a3      	cmp	r3, r4
 8007086:	6025      	str	r5, [r4, #0]
 8007088:	bf18      	it	ne
 800708a:	6059      	strne	r1, [r3, #4]
 800708c:	6863      	ldr	r3, [r4, #4]
 800708e:	bf08      	it	eq
 8007090:	f8c8 1000 	streq.w	r1, [r8]
 8007094:	5162      	str	r2, [r4, r5]
 8007096:	604b      	str	r3, [r1, #4]
 8007098:	4638      	mov	r0, r7
 800709a:	f104 060b 	add.w	r6, r4, #11
 800709e:	f000 f829 	bl	80070f4 <__malloc_unlock>
 80070a2:	f026 0607 	bic.w	r6, r6, #7
 80070a6:	1d23      	adds	r3, r4, #4
 80070a8:	1af2      	subs	r2, r6, r3
 80070aa:	d0ae      	beq.n	800700a <_malloc_r+0x22>
 80070ac:	1b9b      	subs	r3, r3, r6
 80070ae:	50a3      	str	r3, [r4, r2]
 80070b0:	e7ab      	b.n	800700a <_malloc_r+0x22>
 80070b2:	42a3      	cmp	r3, r4
 80070b4:	6862      	ldr	r2, [r4, #4]
 80070b6:	d1dd      	bne.n	8007074 <_malloc_r+0x8c>
 80070b8:	f8c8 2000 	str.w	r2, [r8]
 80070bc:	e7ec      	b.n	8007098 <_malloc_r+0xb0>
 80070be:	4623      	mov	r3, r4
 80070c0:	6864      	ldr	r4, [r4, #4]
 80070c2:	e7ac      	b.n	800701e <_malloc_r+0x36>
 80070c4:	4634      	mov	r4, r6
 80070c6:	6876      	ldr	r6, [r6, #4]
 80070c8:	e7b4      	b.n	8007034 <_malloc_r+0x4c>
 80070ca:	4613      	mov	r3, r2
 80070cc:	e7cc      	b.n	8007068 <_malloc_r+0x80>
 80070ce:	230c      	movs	r3, #12
 80070d0:	603b      	str	r3, [r7, #0]
 80070d2:	4638      	mov	r0, r7
 80070d4:	f000 f80e 	bl	80070f4 <__malloc_unlock>
 80070d8:	e797      	b.n	800700a <_malloc_r+0x22>
 80070da:	6025      	str	r5, [r4, #0]
 80070dc:	e7dc      	b.n	8007098 <_malloc_r+0xb0>
 80070de:	605b      	str	r3, [r3, #4]
 80070e0:	deff      	udf	#255	; 0xff
 80070e2:	bf00      	nop
 80070e4:	20000b3c 	.word	0x20000b3c

080070e8 <__malloc_lock>:
 80070e8:	4801      	ldr	r0, [pc, #4]	; (80070f0 <__malloc_lock+0x8>)
 80070ea:	f7ff bf0e 	b.w	8006f0a <__retarget_lock_acquire_recursive>
 80070ee:	bf00      	nop
 80070f0:	20000b38 	.word	0x20000b38

080070f4 <__malloc_unlock>:
 80070f4:	4801      	ldr	r0, [pc, #4]	; (80070fc <__malloc_unlock+0x8>)
 80070f6:	f7ff bf09 	b.w	8006f0c <__retarget_lock_release_recursive>
 80070fa:	bf00      	nop
 80070fc:	20000b38 	.word	0x20000b38

08007100 <__ssputs_r>:
 8007100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007104:	688e      	ldr	r6, [r1, #8]
 8007106:	461f      	mov	r7, r3
 8007108:	42be      	cmp	r6, r7
 800710a:	680b      	ldr	r3, [r1, #0]
 800710c:	4682      	mov	sl, r0
 800710e:	460c      	mov	r4, r1
 8007110:	4690      	mov	r8, r2
 8007112:	d82c      	bhi.n	800716e <__ssputs_r+0x6e>
 8007114:	898a      	ldrh	r2, [r1, #12]
 8007116:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800711a:	d026      	beq.n	800716a <__ssputs_r+0x6a>
 800711c:	6965      	ldr	r5, [r4, #20]
 800711e:	6909      	ldr	r1, [r1, #16]
 8007120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007124:	eba3 0901 	sub.w	r9, r3, r1
 8007128:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800712c:	1c7b      	adds	r3, r7, #1
 800712e:	444b      	add	r3, r9
 8007130:	106d      	asrs	r5, r5, #1
 8007132:	429d      	cmp	r5, r3
 8007134:	bf38      	it	cc
 8007136:	461d      	movcc	r5, r3
 8007138:	0553      	lsls	r3, r2, #21
 800713a:	d527      	bpl.n	800718c <__ssputs_r+0x8c>
 800713c:	4629      	mov	r1, r5
 800713e:	f7ff ff53 	bl	8006fe8 <_malloc_r>
 8007142:	4606      	mov	r6, r0
 8007144:	b360      	cbz	r0, 80071a0 <__ssputs_r+0xa0>
 8007146:	6921      	ldr	r1, [r4, #16]
 8007148:	464a      	mov	r2, r9
 800714a:	f000 fc1d 	bl	8007988 <memcpy>
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007158:	81a3      	strh	r3, [r4, #12]
 800715a:	6126      	str	r6, [r4, #16]
 800715c:	6165      	str	r5, [r4, #20]
 800715e:	444e      	add	r6, r9
 8007160:	eba5 0509 	sub.w	r5, r5, r9
 8007164:	6026      	str	r6, [r4, #0]
 8007166:	60a5      	str	r5, [r4, #8]
 8007168:	463e      	mov	r6, r7
 800716a:	42be      	cmp	r6, r7
 800716c:	d900      	bls.n	8007170 <__ssputs_r+0x70>
 800716e:	463e      	mov	r6, r7
 8007170:	6820      	ldr	r0, [r4, #0]
 8007172:	4632      	mov	r2, r6
 8007174:	4641      	mov	r1, r8
 8007176:	f000 fbbb 	bl	80078f0 <memmove>
 800717a:	68a3      	ldr	r3, [r4, #8]
 800717c:	1b9b      	subs	r3, r3, r6
 800717e:	60a3      	str	r3, [r4, #8]
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	4433      	add	r3, r6
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	2000      	movs	r0, #0
 8007188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718c:	462a      	mov	r2, r5
 800718e:	f000 fc09 	bl	80079a4 <_realloc_r>
 8007192:	4606      	mov	r6, r0
 8007194:	2800      	cmp	r0, #0
 8007196:	d1e0      	bne.n	800715a <__ssputs_r+0x5a>
 8007198:	6921      	ldr	r1, [r4, #16]
 800719a:	4650      	mov	r0, sl
 800719c:	f7ff feb8 	bl	8006f10 <_free_r>
 80071a0:	230c      	movs	r3, #12
 80071a2:	f8ca 3000 	str.w	r3, [sl]
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ac:	81a3      	strh	r3, [r4, #12]
 80071ae:	f04f 30ff 	mov.w	r0, #4294967295
 80071b2:	e7e9      	b.n	8007188 <__ssputs_r+0x88>

080071b4 <_svfiprintf_r>:
 80071b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b8:	4698      	mov	r8, r3
 80071ba:	898b      	ldrh	r3, [r1, #12]
 80071bc:	061b      	lsls	r3, r3, #24
 80071be:	b09d      	sub	sp, #116	; 0x74
 80071c0:	4607      	mov	r7, r0
 80071c2:	460d      	mov	r5, r1
 80071c4:	4614      	mov	r4, r2
 80071c6:	d50e      	bpl.n	80071e6 <_svfiprintf_r+0x32>
 80071c8:	690b      	ldr	r3, [r1, #16]
 80071ca:	b963      	cbnz	r3, 80071e6 <_svfiprintf_r+0x32>
 80071cc:	2140      	movs	r1, #64	; 0x40
 80071ce:	f7ff ff0b 	bl	8006fe8 <_malloc_r>
 80071d2:	6028      	str	r0, [r5, #0]
 80071d4:	6128      	str	r0, [r5, #16]
 80071d6:	b920      	cbnz	r0, 80071e2 <_svfiprintf_r+0x2e>
 80071d8:	230c      	movs	r3, #12
 80071da:	603b      	str	r3, [r7, #0]
 80071dc:	f04f 30ff 	mov.w	r0, #4294967295
 80071e0:	e0d0      	b.n	8007384 <_svfiprintf_r+0x1d0>
 80071e2:	2340      	movs	r3, #64	; 0x40
 80071e4:	616b      	str	r3, [r5, #20]
 80071e6:	2300      	movs	r3, #0
 80071e8:	9309      	str	r3, [sp, #36]	; 0x24
 80071ea:	2320      	movs	r3, #32
 80071ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80071f4:	2330      	movs	r3, #48	; 0x30
 80071f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800739c <_svfiprintf_r+0x1e8>
 80071fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071fe:	f04f 0901 	mov.w	r9, #1
 8007202:	4623      	mov	r3, r4
 8007204:	469a      	mov	sl, r3
 8007206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800720a:	b10a      	cbz	r2, 8007210 <_svfiprintf_r+0x5c>
 800720c:	2a25      	cmp	r2, #37	; 0x25
 800720e:	d1f9      	bne.n	8007204 <_svfiprintf_r+0x50>
 8007210:	ebba 0b04 	subs.w	fp, sl, r4
 8007214:	d00b      	beq.n	800722e <_svfiprintf_r+0x7a>
 8007216:	465b      	mov	r3, fp
 8007218:	4622      	mov	r2, r4
 800721a:	4629      	mov	r1, r5
 800721c:	4638      	mov	r0, r7
 800721e:	f7ff ff6f 	bl	8007100 <__ssputs_r>
 8007222:	3001      	adds	r0, #1
 8007224:	f000 80a9 	beq.w	800737a <_svfiprintf_r+0x1c6>
 8007228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800722a:	445a      	add	r2, fp
 800722c:	9209      	str	r2, [sp, #36]	; 0x24
 800722e:	f89a 3000 	ldrb.w	r3, [sl]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 80a1 	beq.w	800737a <_svfiprintf_r+0x1c6>
 8007238:	2300      	movs	r3, #0
 800723a:	f04f 32ff 	mov.w	r2, #4294967295
 800723e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007242:	f10a 0a01 	add.w	sl, sl, #1
 8007246:	9304      	str	r3, [sp, #16]
 8007248:	9307      	str	r3, [sp, #28]
 800724a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800724e:	931a      	str	r3, [sp, #104]	; 0x68
 8007250:	4654      	mov	r4, sl
 8007252:	2205      	movs	r2, #5
 8007254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007258:	4850      	ldr	r0, [pc, #320]	; (800739c <_svfiprintf_r+0x1e8>)
 800725a:	f7f8 ffd1 	bl	8000200 <memchr>
 800725e:	9a04      	ldr	r2, [sp, #16]
 8007260:	b9d8      	cbnz	r0, 800729a <_svfiprintf_r+0xe6>
 8007262:	06d0      	lsls	r0, r2, #27
 8007264:	bf44      	itt	mi
 8007266:	2320      	movmi	r3, #32
 8007268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800726c:	0711      	lsls	r1, r2, #28
 800726e:	bf44      	itt	mi
 8007270:	232b      	movmi	r3, #43	; 0x2b
 8007272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007276:	f89a 3000 	ldrb.w	r3, [sl]
 800727a:	2b2a      	cmp	r3, #42	; 0x2a
 800727c:	d015      	beq.n	80072aa <_svfiprintf_r+0xf6>
 800727e:	9a07      	ldr	r2, [sp, #28]
 8007280:	4654      	mov	r4, sl
 8007282:	2000      	movs	r0, #0
 8007284:	f04f 0c0a 	mov.w	ip, #10
 8007288:	4621      	mov	r1, r4
 800728a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800728e:	3b30      	subs	r3, #48	; 0x30
 8007290:	2b09      	cmp	r3, #9
 8007292:	d94d      	bls.n	8007330 <_svfiprintf_r+0x17c>
 8007294:	b1b0      	cbz	r0, 80072c4 <_svfiprintf_r+0x110>
 8007296:	9207      	str	r2, [sp, #28]
 8007298:	e014      	b.n	80072c4 <_svfiprintf_r+0x110>
 800729a:	eba0 0308 	sub.w	r3, r0, r8
 800729e:	fa09 f303 	lsl.w	r3, r9, r3
 80072a2:	4313      	orrs	r3, r2
 80072a4:	9304      	str	r3, [sp, #16]
 80072a6:	46a2      	mov	sl, r4
 80072a8:	e7d2      	b.n	8007250 <_svfiprintf_r+0x9c>
 80072aa:	9b03      	ldr	r3, [sp, #12]
 80072ac:	1d19      	adds	r1, r3, #4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	9103      	str	r1, [sp, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	bfbb      	ittet	lt
 80072b6:	425b      	neglt	r3, r3
 80072b8:	f042 0202 	orrlt.w	r2, r2, #2
 80072bc:	9307      	strge	r3, [sp, #28]
 80072be:	9307      	strlt	r3, [sp, #28]
 80072c0:	bfb8      	it	lt
 80072c2:	9204      	strlt	r2, [sp, #16]
 80072c4:	7823      	ldrb	r3, [r4, #0]
 80072c6:	2b2e      	cmp	r3, #46	; 0x2e
 80072c8:	d10c      	bne.n	80072e4 <_svfiprintf_r+0x130>
 80072ca:	7863      	ldrb	r3, [r4, #1]
 80072cc:	2b2a      	cmp	r3, #42	; 0x2a
 80072ce:	d134      	bne.n	800733a <_svfiprintf_r+0x186>
 80072d0:	9b03      	ldr	r3, [sp, #12]
 80072d2:	1d1a      	adds	r2, r3, #4
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	9203      	str	r2, [sp, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	bfb8      	it	lt
 80072dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80072e0:	3402      	adds	r4, #2
 80072e2:	9305      	str	r3, [sp, #20]
 80072e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80073ac <_svfiprintf_r+0x1f8>
 80072e8:	7821      	ldrb	r1, [r4, #0]
 80072ea:	2203      	movs	r2, #3
 80072ec:	4650      	mov	r0, sl
 80072ee:	f7f8 ff87 	bl	8000200 <memchr>
 80072f2:	b138      	cbz	r0, 8007304 <_svfiprintf_r+0x150>
 80072f4:	9b04      	ldr	r3, [sp, #16]
 80072f6:	eba0 000a 	sub.w	r0, r0, sl
 80072fa:	2240      	movs	r2, #64	; 0x40
 80072fc:	4082      	lsls	r2, r0
 80072fe:	4313      	orrs	r3, r2
 8007300:	3401      	adds	r4, #1
 8007302:	9304      	str	r3, [sp, #16]
 8007304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007308:	4825      	ldr	r0, [pc, #148]	; (80073a0 <_svfiprintf_r+0x1ec>)
 800730a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800730e:	2206      	movs	r2, #6
 8007310:	f7f8 ff76 	bl	8000200 <memchr>
 8007314:	2800      	cmp	r0, #0
 8007316:	d038      	beq.n	800738a <_svfiprintf_r+0x1d6>
 8007318:	4b22      	ldr	r3, [pc, #136]	; (80073a4 <_svfiprintf_r+0x1f0>)
 800731a:	bb1b      	cbnz	r3, 8007364 <_svfiprintf_r+0x1b0>
 800731c:	9b03      	ldr	r3, [sp, #12]
 800731e:	3307      	adds	r3, #7
 8007320:	f023 0307 	bic.w	r3, r3, #7
 8007324:	3308      	adds	r3, #8
 8007326:	9303      	str	r3, [sp, #12]
 8007328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732a:	4433      	add	r3, r6
 800732c:	9309      	str	r3, [sp, #36]	; 0x24
 800732e:	e768      	b.n	8007202 <_svfiprintf_r+0x4e>
 8007330:	fb0c 3202 	mla	r2, ip, r2, r3
 8007334:	460c      	mov	r4, r1
 8007336:	2001      	movs	r0, #1
 8007338:	e7a6      	b.n	8007288 <_svfiprintf_r+0xd4>
 800733a:	2300      	movs	r3, #0
 800733c:	3401      	adds	r4, #1
 800733e:	9305      	str	r3, [sp, #20]
 8007340:	4619      	mov	r1, r3
 8007342:	f04f 0c0a 	mov.w	ip, #10
 8007346:	4620      	mov	r0, r4
 8007348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800734c:	3a30      	subs	r2, #48	; 0x30
 800734e:	2a09      	cmp	r2, #9
 8007350:	d903      	bls.n	800735a <_svfiprintf_r+0x1a6>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0c6      	beq.n	80072e4 <_svfiprintf_r+0x130>
 8007356:	9105      	str	r1, [sp, #20]
 8007358:	e7c4      	b.n	80072e4 <_svfiprintf_r+0x130>
 800735a:	fb0c 2101 	mla	r1, ip, r1, r2
 800735e:	4604      	mov	r4, r0
 8007360:	2301      	movs	r3, #1
 8007362:	e7f0      	b.n	8007346 <_svfiprintf_r+0x192>
 8007364:	ab03      	add	r3, sp, #12
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	462a      	mov	r2, r5
 800736a:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <_svfiprintf_r+0x1f4>)
 800736c:	a904      	add	r1, sp, #16
 800736e:	4638      	mov	r0, r7
 8007370:	f3af 8000 	nop.w
 8007374:	1c42      	adds	r2, r0, #1
 8007376:	4606      	mov	r6, r0
 8007378:	d1d6      	bne.n	8007328 <_svfiprintf_r+0x174>
 800737a:	89ab      	ldrh	r3, [r5, #12]
 800737c:	065b      	lsls	r3, r3, #25
 800737e:	f53f af2d 	bmi.w	80071dc <_svfiprintf_r+0x28>
 8007382:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007384:	b01d      	add	sp, #116	; 0x74
 8007386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738a:	ab03      	add	r3, sp, #12
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	462a      	mov	r2, r5
 8007390:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <_svfiprintf_r+0x1f4>)
 8007392:	a904      	add	r1, sp, #16
 8007394:	4638      	mov	r0, r7
 8007396:	f000 f879 	bl	800748c <_printf_i>
 800739a:	e7eb      	b.n	8007374 <_svfiprintf_r+0x1c0>
 800739c:	08007b70 	.word	0x08007b70
 80073a0:	08007b7a 	.word	0x08007b7a
 80073a4:	00000000 	.word	0x00000000
 80073a8:	08007101 	.word	0x08007101
 80073ac:	08007b76 	.word	0x08007b76

080073b0 <_printf_common>:
 80073b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b4:	4616      	mov	r6, r2
 80073b6:	4699      	mov	r9, r3
 80073b8:	688a      	ldr	r2, [r1, #8]
 80073ba:	690b      	ldr	r3, [r1, #16]
 80073bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073c0:	4293      	cmp	r3, r2
 80073c2:	bfb8      	it	lt
 80073c4:	4613      	movlt	r3, r2
 80073c6:	6033      	str	r3, [r6, #0]
 80073c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073cc:	4607      	mov	r7, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	b10a      	cbz	r2, 80073d6 <_printf_common+0x26>
 80073d2:	3301      	adds	r3, #1
 80073d4:	6033      	str	r3, [r6, #0]
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	0699      	lsls	r1, r3, #26
 80073da:	bf42      	ittt	mi
 80073dc:	6833      	ldrmi	r3, [r6, #0]
 80073de:	3302      	addmi	r3, #2
 80073e0:	6033      	strmi	r3, [r6, #0]
 80073e2:	6825      	ldr	r5, [r4, #0]
 80073e4:	f015 0506 	ands.w	r5, r5, #6
 80073e8:	d106      	bne.n	80073f8 <_printf_common+0x48>
 80073ea:	f104 0a19 	add.w	sl, r4, #25
 80073ee:	68e3      	ldr	r3, [r4, #12]
 80073f0:	6832      	ldr	r2, [r6, #0]
 80073f2:	1a9b      	subs	r3, r3, r2
 80073f4:	42ab      	cmp	r3, r5
 80073f6:	dc26      	bgt.n	8007446 <_printf_common+0x96>
 80073f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073fc:	1e13      	subs	r3, r2, #0
 80073fe:	6822      	ldr	r2, [r4, #0]
 8007400:	bf18      	it	ne
 8007402:	2301      	movne	r3, #1
 8007404:	0692      	lsls	r2, r2, #26
 8007406:	d42b      	bmi.n	8007460 <_printf_common+0xb0>
 8007408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800740c:	4649      	mov	r1, r9
 800740e:	4638      	mov	r0, r7
 8007410:	47c0      	blx	r8
 8007412:	3001      	adds	r0, #1
 8007414:	d01e      	beq.n	8007454 <_printf_common+0xa4>
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	6922      	ldr	r2, [r4, #16]
 800741a:	f003 0306 	and.w	r3, r3, #6
 800741e:	2b04      	cmp	r3, #4
 8007420:	bf02      	ittt	eq
 8007422:	68e5      	ldreq	r5, [r4, #12]
 8007424:	6833      	ldreq	r3, [r6, #0]
 8007426:	1aed      	subeq	r5, r5, r3
 8007428:	68a3      	ldr	r3, [r4, #8]
 800742a:	bf0c      	ite	eq
 800742c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007430:	2500      	movne	r5, #0
 8007432:	4293      	cmp	r3, r2
 8007434:	bfc4      	itt	gt
 8007436:	1a9b      	subgt	r3, r3, r2
 8007438:	18ed      	addgt	r5, r5, r3
 800743a:	2600      	movs	r6, #0
 800743c:	341a      	adds	r4, #26
 800743e:	42b5      	cmp	r5, r6
 8007440:	d11a      	bne.n	8007478 <_printf_common+0xc8>
 8007442:	2000      	movs	r0, #0
 8007444:	e008      	b.n	8007458 <_printf_common+0xa8>
 8007446:	2301      	movs	r3, #1
 8007448:	4652      	mov	r2, sl
 800744a:	4649      	mov	r1, r9
 800744c:	4638      	mov	r0, r7
 800744e:	47c0      	blx	r8
 8007450:	3001      	adds	r0, #1
 8007452:	d103      	bne.n	800745c <_printf_common+0xac>
 8007454:	f04f 30ff 	mov.w	r0, #4294967295
 8007458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745c:	3501      	adds	r5, #1
 800745e:	e7c6      	b.n	80073ee <_printf_common+0x3e>
 8007460:	18e1      	adds	r1, r4, r3
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	2030      	movs	r0, #48	; 0x30
 8007466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800746a:	4422      	add	r2, r4
 800746c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007474:	3302      	adds	r3, #2
 8007476:	e7c7      	b.n	8007408 <_printf_common+0x58>
 8007478:	2301      	movs	r3, #1
 800747a:	4622      	mov	r2, r4
 800747c:	4649      	mov	r1, r9
 800747e:	4638      	mov	r0, r7
 8007480:	47c0      	blx	r8
 8007482:	3001      	adds	r0, #1
 8007484:	d0e6      	beq.n	8007454 <_printf_common+0xa4>
 8007486:	3601      	adds	r6, #1
 8007488:	e7d9      	b.n	800743e <_printf_common+0x8e>
	...

0800748c <_printf_i>:
 800748c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007490:	7e0f      	ldrb	r7, [r1, #24]
 8007492:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007494:	2f78      	cmp	r7, #120	; 0x78
 8007496:	4691      	mov	r9, r2
 8007498:	4680      	mov	r8, r0
 800749a:	460c      	mov	r4, r1
 800749c:	469a      	mov	sl, r3
 800749e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074a2:	d807      	bhi.n	80074b4 <_printf_i+0x28>
 80074a4:	2f62      	cmp	r7, #98	; 0x62
 80074a6:	d80a      	bhi.n	80074be <_printf_i+0x32>
 80074a8:	2f00      	cmp	r7, #0
 80074aa:	f000 80d4 	beq.w	8007656 <_printf_i+0x1ca>
 80074ae:	2f58      	cmp	r7, #88	; 0x58
 80074b0:	f000 80c0 	beq.w	8007634 <_printf_i+0x1a8>
 80074b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074bc:	e03a      	b.n	8007534 <_printf_i+0xa8>
 80074be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074c2:	2b15      	cmp	r3, #21
 80074c4:	d8f6      	bhi.n	80074b4 <_printf_i+0x28>
 80074c6:	a101      	add	r1, pc, #4	; (adr r1, 80074cc <_printf_i+0x40>)
 80074c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074cc:	08007525 	.word	0x08007525
 80074d0:	08007539 	.word	0x08007539
 80074d4:	080074b5 	.word	0x080074b5
 80074d8:	080074b5 	.word	0x080074b5
 80074dc:	080074b5 	.word	0x080074b5
 80074e0:	080074b5 	.word	0x080074b5
 80074e4:	08007539 	.word	0x08007539
 80074e8:	080074b5 	.word	0x080074b5
 80074ec:	080074b5 	.word	0x080074b5
 80074f0:	080074b5 	.word	0x080074b5
 80074f4:	080074b5 	.word	0x080074b5
 80074f8:	0800763d 	.word	0x0800763d
 80074fc:	08007565 	.word	0x08007565
 8007500:	080075f7 	.word	0x080075f7
 8007504:	080074b5 	.word	0x080074b5
 8007508:	080074b5 	.word	0x080074b5
 800750c:	0800765f 	.word	0x0800765f
 8007510:	080074b5 	.word	0x080074b5
 8007514:	08007565 	.word	0x08007565
 8007518:	080074b5 	.word	0x080074b5
 800751c:	080074b5 	.word	0x080074b5
 8007520:	080075ff 	.word	0x080075ff
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	1d1a      	adds	r2, r3, #4
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	602a      	str	r2, [r5, #0]
 800752c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007534:	2301      	movs	r3, #1
 8007536:	e09f      	b.n	8007678 <_printf_i+0x1ec>
 8007538:	6820      	ldr	r0, [r4, #0]
 800753a:	682b      	ldr	r3, [r5, #0]
 800753c:	0607      	lsls	r7, r0, #24
 800753e:	f103 0104 	add.w	r1, r3, #4
 8007542:	6029      	str	r1, [r5, #0]
 8007544:	d501      	bpl.n	800754a <_printf_i+0xbe>
 8007546:	681e      	ldr	r6, [r3, #0]
 8007548:	e003      	b.n	8007552 <_printf_i+0xc6>
 800754a:	0646      	lsls	r6, r0, #25
 800754c:	d5fb      	bpl.n	8007546 <_printf_i+0xba>
 800754e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007552:	2e00      	cmp	r6, #0
 8007554:	da03      	bge.n	800755e <_printf_i+0xd2>
 8007556:	232d      	movs	r3, #45	; 0x2d
 8007558:	4276      	negs	r6, r6
 800755a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800755e:	485a      	ldr	r0, [pc, #360]	; (80076c8 <_printf_i+0x23c>)
 8007560:	230a      	movs	r3, #10
 8007562:	e012      	b.n	800758a <_printf_i+0xfe>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	6820      	ldr	r0, [r4, #0]
 8007568:	1d19      	adds	r1, r3, #4
 800756a:	6029      	str	r1, [r5, #0]
 800756c:	0605      	lsls	r5, r0, #24
 800756e:	d501      	bpl.n	8007574 <_printf_i+0xe8>
 8007570:	681e      	ldr	r6, [r3, #0]
 8007572:	e002      	b.n	800757a <_printf_i+0xee>
 8007574:	0641      	lsls	r1, r0, #25
 8007576:	d5fb      	bpl.n	8007570 <_printf_i+0xe4>
 8007578:	881e      	ldrh	r6, [r3, #0]
 800757a:	4853      	ldr	r0, [pc, #332]	; (80076c8 <_printf_i+0x23c>)
 800757c:	2f6f      	cmp	r7, #111	; 0x6f
 800757e:	bf0c      	ite	eq
 8007580:	2308      	moveq	r3, #8
 8007582:	230a      	movne	r3, #10
 8007584:	2100      	movs	r1, #0
 8007586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800758a:	6865      	ldr	r5, [r4, #4]
 800758c:	60a5      	str	r5, [r4, #8]
 800758e:	2d00      	cmp	r5, #0
 8007590:	bfa2      	ittt	ge
 8007592:	6821      	ldrge	r1, [r4, #0]
 8007594:	f021 0104 	bicge.w	r1, r1, #4
 8007598:	6021      	strge	r1, [r4, #0]
 800759a:	b90e      	cbnz	r6, 80075a0 <_printf_i+0x114>
 800759c:	2d00      	cmp	r5, #0
 800759e:	d04b      	beq.n	8007638 <_printf_i+0x1ac>
 80075a0:	4615      	mov	r5, r2
 80075a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80075a6:	fb03 6711 	mls	r7, r3, r1, r6
 80075aa:	5dc7      	ldrb	r7, [r0, r7]
 80075ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075b0:	4637      	mov	r7, r6
 80075b2:	42bb      	cmp	r3, r7
 80075b4:	460e      	mov	r6, r1
 80075b6:	d9f4      	bls.n	80075a2 <_printf_i+0x116>
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d10b      	bne.n	80075d4 <_printf_i+0x148>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	07de      	lsls	r6, r3, #31
 80075c0:	d508      	bpl.n	80075d4 <_printf_i+0x148>
 80075c2:	6923      	ldr	r3, [r4, #16]
 80075c4:	6861      	ldr	r1, [r4, #4]
 80075c6:	4299      	cmp	r1, r3
 80075c8:	bfde      	ittt	le
 80075ca:	2330      	movle	r3, #48	; 0x30
 80075cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075d4:	1b52      	subs	r2, r2, r5
 80075d6:	6122      	str	r2, [r4, #16]
 80075d8:	f8cd a000 	str.w	sl, [sp]
 80075dc:	464b      	mov	r3, r9
 80075de:	aa03      	add	r2, sp, #12
 80075e0:	4621      	mov	r1, r4
 80075e2:	4640      	mov	r0, r8
 80075e4:	f7ff fee4 	bl	80073b0 <_printf_common>
 80075e8:	3001      	adds	r0, #1
 80075ea:	d14a      	bne.n	8007682 <_printf_i+0x1f6>
 80075ec:	f04f 30ff 	mov.w	r0, #4294967295
 80075f0:	b004      	add	sp, #16
 80075f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	f043 0320 	orr.w	r3, r3, #32
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	4833      	ldr	r0, [pc, #204]	; (80076cc <_printf_i+0x240>)
 8007600:	2778      	movs	r7, #120	; 0x78
 8007602:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	6829      	ldr	r1, [r5, #0]
 800760a:	061f      	lsls	r7, r3, #24
 800760c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007610:	d402      	bmi.n	8007618 <_printf_i+0x18c>
 8007612:	065f      	lsls	r7, r3, #25
 8007614:	bf48      	it	mi
 8007616:	b2b6      	uxthmi	r6, r6
 8007618:	07df      	lsls	r7, r3, #31
 800761a:	bf48      	it	mi
 800761c:	f043 0320 	orrmi.w	r3, r3, #32
 8007620:	6029      	str	r1, [r5, #0]
 8007622:	bf48      	it	mi
 8007624:	6023      	strmi	r3, [r4, #0]
 8007626:	b91e      	cbnz	r6, 8007630 <_printf_i+0x1a4>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	f023 0320 	bic.w	r3, r3, #32
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	2310      	movs	r3, #16
 8007632:	e7a7      	b.n	8007584 <_printf_i+0xf8>
 8007634:	4824      	ldr	r0, [pc, #144]	; (80076c8 <_printf_i+0x23c>)
 8007636:	e7e4      	b.n	8007602 <_printf_i+0x176>
 8007638:	4615      	mov	r5, r2
 800763a:	e7bd      	b.n	80075b8 <_printf_i+0x12c>
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	6826      	ldr	r6, [r4, #0]
 8007640:	6961      	ldr	r1, [r4, #20]
 8007642:	1d18      	adds	r0, r3, #4
 8007644:	6028      	str	r0, [r5, #0]
 8007646:	0635      	lsls	r5, r6, #24
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	d501      	bpl.n	8007650 <_printf_i+0x1c4>
 800764c:	6019      	str	r1, [r3, #0]
 800764e:	e002      	b.n	8007656 <_printf_i+0x1ca>
 8007650:	0670      	lsls	r0, r6, #25
 8007652:	d5fb      	bpl.n	800764c <_printf_i+0x1c0>
 8007654:	8019      	strh	r1, [r3, #0]
 8007656:	2300      	movs	r3, #0
 8007658:	6123      	str	r3, [r4, #16]
 800765a:	4615      	mov	r5, r2
 800765c:	e7bc      	b.n	80075d8 <_printf_i+0x14c>
 800765e:	682b      	ldr	r3, [r5, #0]
 8007660:	1d1a      	adds	r2, r3, #4
 8007662:	602a      	str	r2, [r5, #0]
 8007664:	681d      	ldr	r5, [r3, #0]
 8007666:	6862      	ldr	r2, [r4, #4]
 8007668:	2100      	movs	r1, #0
 800766a:	4628      	mov	r0, r5
 800766c:	f7f8 fdc8 	bl	8000200 <memchr>
 8007670:	b108      	cbz	r0, 8007676 <_printf_i+0x1ea>
 8007672:	1b40      	subs	r0, r0, r5
 8007674:	6060      	str	r0, [r4, #4]
 8007676:	6863      	ldr	r3, [r4, #4]
 8007678:	6123      	str	r3, [r4, #16]
 800767a:	2300      	movs	r3, #0
 800767c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007680:	e7aa      	b.n	80075d8 <_printf_i+0x14c>
 8007682:	6923      	ldr	r3, [r4, #16]
 8007684:	462a      	mov	r2, r5
 8007686:	4649      	mov	r1, r9
 8007688:	4640      	mov	r0, r8
 800768a:	47d0      	blx	sl
 800768c:	3001      	adds	r0, #1
 800768e:	d0ad      	beq.n	80075ec <_printf_i+0x160>
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	079b      	lsls	r3, r3, #30
 8007694:	d413      	bmi.n	80076be <_printf_i+0x232>
 8007696:	68e0      	ldr	r0, [r4, #12]
 8007698:	9b03      	ldr	r3, [sp, #12]
 800769a:	4298      	cmp	r0, r3
 800769c:	bfb8      	it	lt
 800769e:	4618      	movlt	r0, r3
 80076a0:	e7a6      	b.n	80075f0 <_printf_i+0x164>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4632      	mov	r2, r6
 80076a6:	4649      	mov	r1, r9
 80076a8:	4640      	mov	r0, r8
 80076aa:	47d0      	blx	sl
 80076ac:	3001      	adds	r0, #1
 80076ae:	d09d      	beq.n	80075ec <_printf_i+0x160>
 80076b0:	3501      	adds	r5, #1
 80076b2:	68e3      	ldr	r3, [r4, #12]
 80076b4:	9903      	ldr	r1, [sp, #12]
 80076b6:	1a5b      	subs	r3, r3, r1
 80076b8:	42ab      	cmp	r3, r5
 80076ba:	dcf2      	bgt.n	80076a2 <_printf_i+0x216>
 80076bc:	e7eb      	b.n	8007696 <_printf_i+0x20a>
 80076be:	2500      	movs	r5, #0
 80076c0:	f104 0619 	add.w	r6, r4, #25
 80076c4:	e7f5      	b.n	80076b2 <_printf_i+0x226>
 80076c6:	bf00      	nop
 80076c8:	08007b81 	.word	0x08007b81
 80076cc:	08007b92 	.word	0x08007b92

080076d0 <__sflush_r>:
 80076d0:	898a      	ldrh	r2, [r1, #12]
 80076d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d6:	4605      	mov	r5, r0
 80076d8:	0710      	lsls	r0, r2, #28
 80076da:	460c      	mov	r4, r1
 80076dc:	d458      	bmi.n	8007790 <__sflush_r+0xc0>
 80076de:	684b      	ldr	r3, [r1, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	dc05      	bgt.n	80076f0 <__sflush_r+0x20>
 80076e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	dc02      	bgt.n	80076f0 <__sflush_r+0x20>
 80076ea:	2000      	movs	r0, #0
 80076ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076f2:	2e00      	cmp	r6, #0
 80076f4:	d0f9      	beq.n	80076ea <__sflush_r+0x1a>
 80076f6:	2300      	movs	r3, #0
 80076f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076fc:	682f      	ldr	r7, [r5, #0]
 80076fe:	6a21      	ldr	r1, [r4, #32]
 8007700:	602b      	str	r3, [r5, #0]
 8007702:	d032      	beq.n	800776a <__sflush_r+0x9a>
 8007704:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	075a      	lsls	r2, r3, #29
 800770a:	d505      	bpl.n	8007718 <__sflush_r+0x48>
 800770c:	6863      	ldr	r3, [r4, #4]
 800770e:	1ac0      	subs	r0, r0, r3
 8007710:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007712:	b10b      	cbz	r3, 8007718 <__sflush_r+0x48>
 8007714:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007716:	1ac0      	subs	r0, r0, r3
 8007718:	2300      	movs	r3, #0
 800771a:	4602      	mov	r2, r0
 800771c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800771e:	6a21      	ldr	r1, [r4, #32]
 8007720:	4628      	mov	r0, r5
 8007722:	47b0      	blx	r6
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	d106      	bne.n	8007738 <__sflush_r+0x68>
 800772a:	6829      	ldr	r1, [r5, #0]
 800772c:	291d      	cmp	r1, #29
 800772e:	d82b      	bhi.n	8007788 <__sflush_r+0xb8>
 8007730:	4a29      	ldr	r2, [pc, #164]	; (80077d8 <__sflush_r+0x108>)
 8007732:	410a      	asrs	r2, r1
 8007734:	07d6      	lsls	r6, r2, #31
 8007736:	d427      	bmi.n	8007788 <__sflush_r+0xb8>
 8007738:	2200      	movs	r2, #0
 800773a:	6062      	str	r2, [r4, #4]
 800773c:	04d9      	lsls	r1, r3, #19
 800773e:	6922      	ldr	r2, [r4, #16]
 8007740:	6022      	str	r2, [r4, #0]
 8007742:	d504      	bpl.n	800774e <__sflush_r+0x7e>
 8007744:	1c42      	adds	r2, r0, #1
 8007746:	d101      	bne.n	800774c <__sflush_r+0x7c>
 8007748:	682b      	ldr	r3, [r5, #0]
 800774a:	b903      	cbnz	r3, 800774e <__sflush_r+0x7e>
 800774c:	6560      	str	r0, [r4, #84]	; 0x54
 800774e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007750:	602f      	str	r7, [r5, #0]
 8007752:	2900      	cmp	r1, #0
 8007754:	d0c9      	beq.n	80076ea <__sflush_r+0x1a>
 8007756:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800775a:	4299      	cmp	r1, r3
 800775c:	d002      	beq.n	8007764 <__sflush_r+0x94>
 800775e:	4628      	mov	r0, r5
 8007760:	f7ff fbd6 	bl	8006f10 <_free_r>
 8007764:	2000      	movs	r0, #0
 8007766:	6360      	str	r0, [r4, #52]	; 0x34
 8007768:	e7c0      	b.n	80076ec <__sflush_r+0x1c>
 800776a:	2301      	movs	r3, #1
 800776c:	4628      	mov	r0, r5
 800776e:	47b0      	blx	r6
 8007770:	1c41      	adds	r1, r0, #1
 8007772:	d1c8      	bne.n	8007706 <__sflush_r+0x36>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0c5      	beq.n	8007706 <__sflush_r+0x36>
 800777a:	2b1d      	cmp	r3, #29
 800777c:	d001      	beq.n	8007782 <__sflush_r+0xb2>
 800777e:	2b16      	cmp	r3, #22
 8007780:	d101      	bne.n	8007786 <__sflush_r+0xb6>
 8007782:	602f      	str	r7, [r5, #0]
 8007784:	e7b1      	b.n	80076ea <__sflush_r+0x1a>
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800778c:	81a3      	strh	r3, [r4, #12]
 800778e:	e7ad      	b.n	80076ec <__sflush_r+0x1c>
 8007790:	690f      	ldr	r7, [r1, #16]
 8007792:	2f00      	cmp	r7, #0
 8007794:	d0a9      	beq.n	80076ea <__sflush_r+0x1a>
 8007796:	0793      	lsls	r3, r2, #30
 8007798:	680e      	ldr	r6, [r1, #0]
 800779a:	bf08      	it	eq
 800779c:	694b      	ldreq	r3, [r1, #20]
 800779e:	600f      	str	r7, [r1, #0]
 80077a0:	bf18      	it	ne
 80077a2:	2300      	movne	r3, #0
 80077a4:	eba6 0807 	sub.w	r8, r6, r7
 80077a8:	608b      	str	r3, [r1, #8]
 80077aa:	f1b8 0f00 	cmp.w	r8, #0
 80077ae:	dd9c      	ble.n	80076ea <__sflush_r+0x1a>
 80077b0:	6a21      	ldr	r1, [r4, #32]
 80077b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077b4:	4643      	mov	r3, r8
 80077b6:	463a      	mov	r2, r7
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b0      	blx	r6
 80077bc:	2800      	cmp	r0, #0
 80077be:	dc06      	bgt.n	80077ce <__sflush_r+0xfe>
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077c6:	81a3      	strh	r3, [r4, #12]
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	e78e      	b.n	80076ec <__sflush_r+0x1c>
 80077ce:	4407      	add	r7, r0
 80077d0:	eba8 0800 	sub.w	r8, r8, r0
 80077d4:	e7e9      	b.n	80077aa <__sflush_r+0xda>
 80077d6:	bf00      	nop
 80077d8:	dfbffffe 	.word	0xdfbffffe

080077dc <_fflush_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	690b      	ldr	r3, [r1, #16]
 80077e0:	4605      	mov	r5, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	b913      	cbnz	r3, 80077ec <_fflush_r+0x10>
 80077e6:	2500      	movs	r5, #0
 80077e8:	4628      	mov	r0, r5
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	b118      	cbz	r0, 80077f6 <_fflush_r+0x1a>
 80077ee:	6a03      	ldr	r3, [r0, #32]
 80077f0:	b90b      	cbnz	r3, 80077f6 <_fflush_r+0x1a>
 80077f2:	f7ff f953 	bl	8006a9c <__sinit>
 80077f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0f3      	beq.n	80077e6 <_fflush_r+0xa>
 80077fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007800:	07d0      	lsls	r0, r2, #31
 8007802:	d404      	bmi.n	800780e <_fflush_r+0x32>
 8007804:	0599      	lsls	r1, r3, #22
 8007806:	d402      	bmi.n	800780e <_fflush_r+0x32>
 8007808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800780a:	f7ff fb7e 	bl	8006f0a <__retarget_lock_acquire_recursive>
 800780e:	4628      	mov	r0, r5
 8007810:	4621      	mov	r1, r4
 8007812:	f7ff ff5d 	bl	80076d0 <__sflush_r>
 8007816:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007818:	07da      	lsls	r2, r3, #31
 800781a:	4605      	mov	r5, r0
 800781c:	d4e4      	bmi.n	80077e8 <_fflush_r+0xc>
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	059b      	lsls	r3, r3, #22
 8007822:	d4e1      	bmi.n	80077e8 <_fflush_r+0xc>
 8007824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007826:	f7ff fb71 	bl	8006f0c <__retarget_lock_release_recursive>
 800782a:	e7dd      	b.n	80077e8 <_fflush_r+0xc>

0800782c <__swhatbuf_r>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	460c      	mov	r4, r1
 8007830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007834:	2900      	cmp	r1, #0
 8007836:	b096      	sub	sp, #88	; 0x58
 8007838:	4615      	mov	r5, r2
 800783a:	461e      	mov	r6, r3
 800783c:	da0d      	bge.n	800785a <__swhatbuf_r+0x2e>
 800783e:	89a3      	ldrh	r3, [r4, #12]
 8007840:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007844:	f04f 0100 	mov.w	r1, #0
 8007848:	bf0c      	ite	eq
 800784a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800784e:	2340      	movne	r3, #64	; 0x40
 8007850:	2000      	movs	r0, #0
 8007852:	6031      	str	r1, [r6, #0]
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	b016      	add	sp, #88	; 0x58
 8007858:	bd70      	pop	{r4, r5, r6, pc}
 800785a:	466a      	mov	r2, sp
 800785c:	f000 f862 	bl	8007924 <_fstat_r>
 8007860:	2800      	cmp	r0, #0
 8007862:	dbec      	blt.n	800783e <__swhatbuf_r+0x12>
 8007864:	9901      	ldr	r1, [sp, #4]
 8007866:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800786a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800786e:	4259      	negs	r1, r3
 8007870:	4159      	adcs	r1, r3
 8007872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007876:	e7eb      	b.n	8007850 <__swhatbuf_r+0x24>

08007878 <__smakebuf_r>:
 8007878:	898b      	ldrh	r3, [r1, #12]
 800787a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800787c:	079d      	lsls	r5, r3, #30
 800787e:	4606      	mov	r6, r0
 8007880:	460c      	mov	r4, r1
 8007882:	d507      	bpl.n	8007894 <__smakebuf_r+0x1c>
 8007884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	6123      	str	r3, [r4, #16]
 800788c:	2301      	movs	r3, #1
 800788e:	6163      	str	r3, [r4, #20]
 8007890:	b002      	add	sp, #8
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	ab01      	add	r3, sp, #4
 8007896:	466a      	mov	r2, sp
 8007898:	f7ff ffc8 	bl	800782c <__swhatbuf_r>
 800789c:	9900      	ldr	r1, [sp, #0]
 800789e:	4605      	mov	r5, r0
 80078a0:	4630      	mov	r0, r6
 80078a2:	f7ff fba1 	bl	8006fe8 <_malloc_r>
 80078a6:	b948      	cbnz	r0, 80078bc <__smakebuf_r+0x44>
 80078a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ac:	059a      	lsls	r2, r3, #22
 80078ae:	d4ef      	bmi.n	8007890 <__smakebuf_r+0x18>
 80078b0:	f023 0303 	bic.w	r3, r3, #3
 80078b4:	f043 0302 	orr.w	r3, r3, #2
 80078b8:	81a3      	strh	r3, [r4, #12]
 80078ba:	e7e3      	b.n	8007884 <__smakebuf_r+0xc>
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	6020      	str	r0, [r4, #0]
 80078c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c4:	81a3      	strh	r3, [r4, #12]
 80078c6:	9b00      	ldr	r3, [sp, #0]
 80078c8:	6163      	str	r3, [r4, #20]
 80078ca:	9b01      	ldr	r3, [sp, #4]
 80078cc:	6120      	str	r0, [r4, #16]
 80078ce:	b15b      	cbz	r3, 80078e8 <__smakebuf_r+0x70>
 80078d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078d4:	4630      	mov	r0, r6
 80078d6:	f000 f837 	bl	8007948 <_isatty_r>
 80078da:	b128      	cbz	r0, 80078e8 <__smakebuf_r+0x70>
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	f023 0303 	bic.w	r3, r3, #3
 80078e2:	f043 0301 	orr.w	r3, r3, #1
 80078e6:	81a3      	strh	r3, [r4, #12]
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	431d      	orrs	r5, r3
 80078ec:	81a5      	strh	r5, [r4, #12]
 80078ee:	e7cf      	b.n	8007890 <__smakebuf_r+0x18>

080078f0 <memmove>:
 80078f0:	4288      	cmp	r0, r1
 80078f2:	b510      	push	{r4, lr}
 80078f4:	eb01 0402 	add.w	r4, r1, r2
 80078f8:	d902      	bls.n	8007900 <memmove+0x10>
 80078fa:	4284      	cmp	r4, r0
 80078fc:	4623      	mov	r3, r4
 80078fe:	d807      	bhi.n	8007910 <memmove+0x20>
 8007900:	1e43      	subs	r3, r0, #1
 8007902:	42a1      	cmp	r1, r4
 8007904:	d008      	beq.n	8007918 <memmove+0x28>
 8007906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800790a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800790e:	e7f8      	b.n	8007902 <memmove+0x12>
 8007910:	4402      	add	r2, r0
 8007912:	4601      	mov	r1, r0
 8007914:	428a      	cmp	r2, r1
 8007916:	d100      	bne.n	800791a <memmove+0x2a>
 8007918:	bd10      	pop	{r4, pc}
 800791a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800791e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007922:	e7f7      	b.n	8007914 <memmove+0x24>

08007924 <_fstat_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4d07      	ldr	r5, [pc, #28]	; (8007944 <_fstat_r+0x20>)
 8007928:	2300      	movs	r3, #0
 800792a:	4604      	mov	r4, r0
 800792c:	4608      	mov	r0, r1
 800792e:	4611      	mov	r1, r2
 8007930:	602b      	str	r3, [r5, #0]
 8007932:	f7f9 ffcc 	bl	80018ce <_fstat>
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	d102      	bne.n	8007940 <_fstat_r+0x1c>
 800793a:	682b      	ldr	r3, [r5, #0]
 800793c:	b103      	cbz	r3, 8007940 <_fstat_r+0x1c>
 800793e:	6023      	str	r3, [r4, #0]
 8007940:	bd38      	pop	{r3, r4, r5, pc}
 8007942:	bf00      	nop
 8007944:	20000b34 	.word	0x20000b34

08007948 <_isatty_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4d06      	ldr	r5, [pc, #24]	; (8007964 <_isatty_r+0x1c>)
 800794c:	2300      	movs	r3, #0
 800794e:	4604      	mov	r4, r0
 8007950:	4608      	mov	r0, r1
 8007952:	602b      	str	r3, [r5, #0]
 8007954:	f7f9 ffcb 	bl	80018ee <_isatty>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d102      	bne.n	8007962 <_isatty_r+0x1a>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	b103      	cbz	r3, 8007962 <_isatty_r+0x1a>
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	20000b34 	.word	0x20000b34

08007968 <_sbrk_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4d06      	ldr	r5, [pc, #24]	; (8007984 <_sbrk_r+0x1c>)
 800796c:	2300      	movs	r3, #0
 800796e:	4604      	mov	r4, r0
 8007970:	4608      	mov	r0, r1
 8007972:	602b      	str	r3, [r5, #0]
 8007974:	f7f9 ffd4 	bl	8001920 <_sbrk>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d102      	bne.n	8007982 <_sbrk_r+0x1a>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	b103      	cbz	r3, 8007982 <_sbrk_r+0x1a>
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	20000b34 	.word	0x20000b34

08007988 <memcpy>:
 8007988:	440a      	add	r2, r1
 800798a:	4291      	cmp	r1, r2
 800798c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007990:	d100      	bne.n	8007994 <memcpy+0xc>
 8007992:	4770      	bx	lr
 8007994:	b510      	push	{r4, lr}
 8007996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800799a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800799e:	4291      	cmp	r1, r2
 80079a0:	d1f9      	bne.n	8007996 <memcpy+0xe>
 80079a2:	bd10      	pop	{r4, pc}

080079a4 <_realloc_r>:
 80079a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a8:	4680      	mov	r8, r0
 80079aa:	4614      	mov	r4, r2
 80079ac:	460e      	mov	r6, r1
 80079ae:	b921      	cbnz	r1, 80079ba <_realloc_r+0x16>
 80079b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079b4:	4611      	mov	r1, r2
 80079b6:	f7ff bb17 	b.w	8006fe8 <_malloc_r>
 80079ba:	b92a      	cbnz	r2, 80079c8 <_realloc_r+0x24>
 80079bc:	f7ff faa8 	bl	8006f10 <_free_r>
 80079c0:	4625      	mov	r5, r4
 80079c2:	4628      	mov	r0, r5
 80079c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c8:	f000 f81b 	bl	8007a02 <_malloc_usable_size_r>
 80079cc:	4284      	cmp	r4, r0
 80079ce:	4607      	mov	r7, r0
 80079d0:	d802      	bhi.n	80079d8 <_realloc_r+0x34>
 80079d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079d6:	d812      	bhi.n	80079fe <_realloc_r+0x5a>
 80079d8:	4621      	mov	r1, r4
 80079da:	4640      	mov	r0, r8
 80079dc:	f7ff fb04 	bl	8006fe8 <_malloc_r>
 80079e0:	4605      	mov	r5, r0
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d0ed      	beq.n	80079c2 <_realloc_r+0x1e>
 80079e6:	42bc      	cmp	r4, r7
 80079e8:	4622      	mov	r2, r4
 80079ea:	4631      	mov	r1, r6
 80079ec:	bf28      	it	cs
 80079ee:	463a      	movcs	r2, r7
 80079f0:	f7ff ffca 	bl	8007988 <memcpy>
 80079f4:	4631      	mov	r1, r6
 80079f6:	4640      	mov	r0, r8
 80079f8:	f7ff fa8a 	bl	8006f10 <_free_r>
 80079fc:	e7e1      	b.n	80079c2 <_realloc_r+0x1e>
 80079fe:	4635      	mov	r5, r6
 8007a00:	e7df      	b.n	80079c2 <_realloc_r+0x1e>

08007a02 <_malloc_usable_size_r>:
 8007a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a06:	1f18      	subs	r0, r3, #4
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	bfbc      	itt	lt
 8007a0c:	580b      	ldrlt	r3, [r1, r0]
 8007a0e:	18c0      	addlt	r0, r0, r3
 8007a10:	4770      	bx	lr
	...

08007a14 <_init>:
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	bf00      	nop
 8007a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1a:	bc08      	pop	{r3}
 8007a1c:	469e      	mov	lr, r3
 8007a1e:	4770      	bx	lr

08007a20 <_fini>:
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	bf00      	nop
 8007a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a26:	bc08      	pop	{r3}
 8007a28:	469e      	mov	lr, r3
 8007a2a:	4770      	bx	lr
