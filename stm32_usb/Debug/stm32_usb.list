
stm32_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08008980  08008980  00018980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a1c  08008a1c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a1c  08008a1c  00018a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a24  08008a24  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a24  08008a24  00018a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a28  08008a28  00018a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08008a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00002010  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000215c  2000215c  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000145d7  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003243  00000000  00000000  00034796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f78  00000000  00000000  000379e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bbe  00000000  00000000  00038958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000268f4  00000000  00000000  00039516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001409b  00000000  00000000  0005fe0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc188  00000000  00000000  00073ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004498  00000000  00000000  00150030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001544c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000014c 	.word	0x2000014c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008968 	.word	0x08008968

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000150 	.word	0x20000150
 80001ec:	08008968 	.word	0x08008968

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fb9c 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f828 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f908 	bl	80007ac <MX_GPIO_Init>
  MX_ETH_Init();
 800059c:	f000 f88e 	bl	80006bc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005a0:	f000 f8da 	bl	8000758 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80005a4:	f007 f814 	bl	80075d0 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(usb_buf, "USB CDC TEST %d\r\n", count);
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <main+0x50>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	490c      	ldr	r1, [pc, #48]	; (80005e0 <main+0x54>)
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <main+0x58>)
 80005b2:	f007 fd35 	bl	8008020 <siprintf>
	  	  CDC_Transmit_FS(usb_buf, BUF_SIZE);
 80005b6:	211e      	movs	r1, #30
 80005b8:	480a      	ldr	r0, [pc, #40]	; (80005e4 <main+0x58>)
 80005ba:	f007 f8c7 	bl	800774c <CDC_Transmit_FS>
	  	  HAL_Delay(1000);
 80005be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c2:	f000 fbf5 	bl	8000db0 <HAL_Delay>
	  	  memset(usb_buf,0,BUF_SIZE);
 80005c6:	221e      	movs	r2, #30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <main+0x58>)
 80005cc:	f007 fd48 	bl	8008060 <memset>
	  	  count++;
 80005d0:	4b02      	ldr	r3, [pc, #8]	; (80005dc <main+0x50>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a01      	ldr	r2, [pc, #4]	; (80005dc <main+0x50>)
 80005d8:	6013      	str	r3, [r2, #0]
  {
 80005da:	e7e5      	b.n	80005a8 <main+0x1c>
 80005dc:	200003f4 	.word	0x200003f4
 80005e0:	08008980 	.word	0x08008980
 80005e4:	200003d4 	.word	0x200003d4

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f007 fd32 	bl	8008060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000648:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800065c:	23a8      	movs	r3, #168	; 0xa8
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fc3f 	bl	8002ef0 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 f946 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000688:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2105      	movs	r1, #5
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fea0 	bl	80033e0 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a6:	f000 f92f 	bl	8000908 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <MX_ETH_Init+0x84>)
 80006c2:	4a20      	ldr	r2, [pc, #128]	; (8000744 <MX_ETH_Init+0x88>)
 80006c4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_ETH_Init+0x8c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_ETH_Init+0x8c>)
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_ETH_Init+0x8c>)
 80006d4:	22e1      	movs	r2, #225	; 0xe1
 80006d6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_ETH_Init+0x8c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_ETH_Init+0x8c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_ETH_Init+0x8c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_ETH_Init+0x84>)
 80006ec:	4a16      	ldr	r2, [pc, #88]	; (8000748 <MX_ETH_Init+0x8c>)
 80006ee:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_ETH_Init+0x84>)
 80006f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006f6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_ETH_Init+0x84>)
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <MX_ETH_Init+0x90>)
 80006fc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_ETH_Init+0x84>)
 8000700:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_ETH_Init+0x94>)
 8000702:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_ETH_Init+0x84>)
 8000706:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800070a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_ETH_Init+0x84>)
 800070e:	f000 fc85 	bl	800101c <HAL_ETH_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f8f6 	bl	8000908 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800071c:	2238      	movs	r2, #56	; 0x38
 800071e:	2100      	movs	r1, #0
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <MX_ETH_Init+0x98>)
 8000722:	f007 fc9d 	bl	8008060 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_ETH_Init+0x98>)
 8000728:	2221      	movs	r2, #33	; 0x21
 800072a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_ETH_Init+0x98>)
 800072e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000732:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_ETH_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200002e0 	.word	0x200002e0
 8000744:	40028000 	.word	0x40028000
 8000748:	200003f8 	.word	0x200003f8
 800074c:	20000240 	.word	0x20000240
 8000750:	200001a0 	.word	0x200001a0
 8000754:	20000168 	.word	0x20000168

08000758 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_USART3_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART3_UART_Init+0x4c>)
 8000790:	f003 f846 	bl	8003820 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 f8b5 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000390 	.word	0x20000390
 80007a8:	40004800 	.word	0x40004800

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a4b      	ldr	r2, [pc, #300]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b49      	ldr	r3, [pc, #292]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	4b45      	ldr	r3, [pc, #276]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a44      	ldr	r2, [pc, #272]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b42      	ldr	r3, [pc, #264]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a3d      	ldr	r2, [pc, #244]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <MX_GPIO_Init+0x14c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a36      	ldr	r2, [pc, #216]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a2f      	ldr	r2, [pc, #188]	; (80008f8 <MX_GPIO_Init+0x14c>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000870:	4822      	ldr	r0, [pc, #136]	; (80008fc <MX_GPIO_Init+0x150>)
 8000872:	f001 f8a7 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2140      	movs	r1, #64	; 0x40
 800087a:	4821      	ldr	r0, [pc, #132]	; (8000900 <MX_GPIO_Init+0x154>)
 800087c:	f001 f8a2 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000886:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	481b      	ldr	r0, [pc, #108]	; (8000904 <MX_GPIO_Init+0x158>)
 8000898:	f000 fee8 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800089c:	f244 0381 	movw	r3, #16513	; 0x4081
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4811      	ldr	r0, [pc, #68]	; (80008fc <MX_GPIO_Init+0x150>)
 80008b6:	f000 fed9 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <MX_GPIO_Init+0x154>)
 80008d2:	f000 fecb 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_GPIO_Init+0x154>)
 80008ea:	f000 febf 	bl	800166c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	; 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020400 	.word	0x40020400
 8000900:	40021800 	.word	0x40021800
 8000904:	40020800 	.word	0x40020800

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <HAL_MspInit+0x4c>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x4c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08e      	sub	sp, #56	; 0x38
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a55      	ldr	r2, [pc, #340]	; (8000ad8 <HAL_ETH_MspInit+0x174>)
 8000982:	4293      	cmp	r3, r2
 8000984:	f040 80a4 	bne.w	8000ad0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	4b53      	ldr	r3, [pc, #332]	; (8000adc <HAL_ETH_MspInit+0x178>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	4a52      	ldr	r2, [pc, #328]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000996:	6313      	str	r3, [r2, #48]	; 0x30
 8000998:	4b50      	ldr	r3, [pc, #320]	; (8000adc <HAL_ETH_MspInit+0x178>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a0:	623b      	str	r3, [r7, #32]
 80009a2:	6a3b      	ldr	r3, [r7, #32]
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
 80009a8:	4b4c      	ldr	r3, [pc, #304]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	4a4b      	ldr	r2, [pc, #300]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009b2:	6313      	str	r3, [r2, #48]	; 0x30
 80009b4:	4b49      	ldr	r3, [pc, #292]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009bc:	61fb      	str	r3, [r7, #28]
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	4b45      	ldr	r3, [pc, #276]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a44      	ldr	r2, [pc, #272]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
 80009d0:	4b42      	ldr	r3, [pc, #264]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	4a3d      	ldr	r2, [pc, #244]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6313      	str	r3, [r2, #48]	; 0x30
 80009ec:	4b3b      	ldr	r3, [pc, #236]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	4b37      	ldr	r3, [pc, #220]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	4a36      	ldr	r2, [pc, #216]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6313      	str	r3, [r2, #48]	; 0x30
 8000a08:	4b34      	ldr	r3, [pc, #208]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	4b30      	ldr	r3, [pc, #192]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	6313      	str	r3, [r2, #48]	; 0x30
 8000a24:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a28      	ldr	r2, [pc, #160]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a4c:	2332      	movs	r3, #50	; 0x32
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5c:	230b      	movs	r3, #11
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	481e      	ldr	r0, [pc, #120]	; (8000ae0 <HAL_ETH_MspInit+0x17c>)
 8000a68:	f000 fe00 	bl	800166c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a6c:	2386      	movs	r3, #134	; 0x86
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7c:	230b      	movs	r3, #11
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <HAL_ETH_MspInit+0x180>)
 8000a88:	f000 fdf0 	bl	800166c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9e:	230b      	movs	r3, #11
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <HAL_ETH_MspInit+0x184>)
 8000aaa:	f000 fddf 	bl	800166c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4808      	ldr	r0, [pc, #32]	; (8000aec <HAL_ETH_MspInit+0x188>)
 8000acc:	f000 fdce 	bl	800166c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3738      	adds	r7, #56	; 0x38
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40028000 	.word	0x40028000
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	40021800 	.word	0x40021800

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_UART_MspInit+0x84>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d12c      	bne.n	8000b6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <HAL_UART_MspInit+0x8c>)
 8000b68:	f000 fd80 	bl	800166c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	; 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40004800 	.word	0x40004800
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020c00 	.word	0x40020c00

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f8d0 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <OTG_FS_IRQHandler+0x10>)
 8000bda:	f001 f85c 	bl	8001c96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200018e8 	.word	0x200018e8

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f007 fa2a 	bl	8008070 <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20030000 	.word	0x20030000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	20000400 	.word	0x20000400
 8000c50:	20002160 	.word	0x20002160

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c7e:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c94:	4c0b      	ldr	r4, [pc, #44]	; (8000cc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca2:	f7ff ffd7 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f007 f9e9 	bl	800807c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fc6f 	bl	800058c <main>
  bx  lr    
 8000cae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cb0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000cbc:	08008a2c 	.word	0x08008a2c
  ldr r2, =_sbss
 8000cc0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000cc4:	2000215c 	.word	0x2000215c

08000cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <HAL_Init+0x40>)
 8000cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_Init+0x40>)
 8000ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_Init+0x40>)
 8000cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f94f 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f808 	bl	8000d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff fe08 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x54>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x58>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f967 	bl	8001002 <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00e      	b.n	8000d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d80a      	bhi.n	8000d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f000 f92f 	bl	8000fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_InitTick+0x5c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000404 	.word	0x20000404

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000404 	.word	0x20000404

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff ffee 	bl	8000d98 <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_Delay+0x44>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffde 	bl	8000d98 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff29 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff3e 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff8e 	bl	8000eec <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5d 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff31 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa2 	bl	8000f54 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e06c      	b.n	8001108 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001034:	2b00      	cmp	r3, #0
 8001036:	d106      	bne.n	8001046 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2223      	movs	r2, #35	; 0x23
 800103c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fc8f 	bl	8000964 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <HAL_ETH_Init+0xf4>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a30      	ldr	r2, [pc, #192]	; (8001110 <HAL_ETH_Init+0xf4>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <HAL_ETH_Init+0xf4>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001062:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <HAL_ETH_Init+0xf8>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4a2b      	ldr	r2, [pc, #172]	; (8001114 <HAL_ETH_Init+0xf8>)
 8001068:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800106c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <HAL_ETH_Init+0xf8>)
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	4927      	ldr	r1, [pc, #156]	; (8001114 <HAL_ETH_Init+0xf8>)
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <HAL_ETH_Init+0xf8>)
 800107e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001096:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001098:	f7ff fe7e 	bl	8000d98 <HAL_GetTick>
 800109c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800109e:	e011      	b.n	80010c4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010a0:	f7ff fe7a 	bl	8000d98 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010ae:	d909      	bls.n	80010c4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2204      	movs	r2, #4
 80010b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	22e0      	movs	r2, #224	; 0xe0
 80010bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e021      	b.n	8001108 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1e4      	bne.n	80010a0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f958 	bl	800138c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f9ff 	bl	80014e0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fa55 	bl	8001592 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	461a      	mov	r2, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f9bd 	bl	8001470 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2210      	movs	r2, #16
 8001102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	40013800 	.word	0x40013800

08001118 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4b51      	ldr	r3, [pc, #324]	; (8001274 <ETH_SetMACConfig+0x15c>)
 800112e:	4013      	ands	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	7c1b      	ldrb	r3, [r3, #16]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d102      	bne.n	8001140 <ETH_SetMACConfig+0x28>
 800113a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800113e:	e000      	b.n	8001142 <ETH_SetMACConfig+0x2a>
 8001140:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	7c5b      	ldrb	r3, [r3, #17]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <ETH_SetMACConfig+0x38>
 800114a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800114e:	e000      	b.n	8001152 <ETH_SetMACConfig+0x3a>
 8001150:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001152:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001158:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	7fdb      	ldrb	r3, [r3, #31]
 800115e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001160:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001166:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	7f92      	ldrb	r2, [r2, #30]
 800116c:	2a00      	cmp	r2, #0
 800116e:	d102      	bne.n	8001176 <ETH_SetMACConfig+0x5e>
 8001170:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001174:	e000      	b.n	8001178 <ETH_SetMACConfig+0x60>
 8001176:	2200      	movs	r2, #0
                        macconf->Speed |
 8001178:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	7f1b      	ldrb	r3, [r3, #28]
 800117e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001180:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001186:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	791b      	ldrb	r3, [r3, #4]
 800118c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800118e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001196:	2a00      	cmp	r2, #0
 8001198:	d102      	bne.n	80011a0 <ETH_SetMACConfig+0x88>
 800119a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119e:	e000      	b.n	80011a2 <ETH_SetMACConfig+0x8a>
 80011a0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80011a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	7bdb      	ldrb	r3, [r3, #15]
 80011a8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80011aa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80011b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80011b8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011ba:	4313      	orrs	r3, r2
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff fdec 	bl	8000db0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	f64f 7341 	movw	r3, #65345	; 0xff41
 80011ee:	4013      	ands	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80011fe:	2a00      	cmp	r2, #0
 8001200:	d101      	bne.n	8001206 <ETH_SetMACConfig+0xee>
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	e000      	b.n	8001208 <ETH_SetMACConfig+0xf0>
 8001206:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001208:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800120e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001216:	2a01      	cmp	r2, #1
 8001218:	d101      	bne.n	800121e <ETH_SetMACConfig+0x106>
 800121a:	2208      	movs	r2, #8
 800121c:	e000      	b.n	8001220 <ETH_SetMACConfig+0x108>
 800121e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001220:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001228:	2a01      	cmp	r2, #1
 800122a:	d101      	bne.n	8001230 <ETH_SetMACConfig+0x118>
 800122c:	2204      	movs	r2, #4
 800122e:	e000      	b.n	8001232 <ETH_SetMACConfig+0x11a>
 8001230:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001232:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800123a:	2a01      	cmp	r2, #1
 800123c:	d101      	bne.n	8001242 <ETH_SetMACConfig+0x12a>
 800123e:	2202      	movs	r2, #2
 8001240:	e000      	b.n	8001244 <ETH_SetMACConfig+0x12c>
 8001242:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001244:	4313      	orrs	r3, r2
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800125c:	2001      	movs	r0, #1
 800125e:	f7ff fda7 	bl	8000db0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	619a      	str	r2, [r3, #24]
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	ff20810f 	.word	0xff20810f

08001278 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <ETH_SetDMAConfig+0x110>)
 8001292:	4013      	ands	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	7b1b      	ldrb	r3, [r3, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <ETH_SetDMAConfig+0x2c>
 800129e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012a2:	e000      	b.n	80012a6 <ETH_SetDMAConfig+0x2e>
 80012a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	7b5b      	ldrb	r3, [r3, #13]
 80012aa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012ac:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	7f52      	ldrb	r2, [r2, #29]
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	d102      	bne.n	80012bc <ETH_SetDMAConfig+0x44>
 80012b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012ba:	e000      	b.n	80012be <ETH_SetDMAConfig+0x46>
 80012bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80012be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	7b9b      	ldrb	r3, [r3, #14]
 80012c4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80012c6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80012cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	7f1b      	ldrb	r3, [r3, #28]
 80012d2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80012d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	7f9b      	ldrb	r3, [r3, #30]
 80012da:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80012dc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80012e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012ea:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012ec:	4313      	orrs	r3, r2
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012fc:	461a      	mov	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800130e:	2001      	movs	r0, #1
 8001310:	f7ff fd4e 	bl	8000db0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800131c:	461a      	mov	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	791b      	ldrb	r3, [r3, #4]
 8001326:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800132c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001332:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001338:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001340:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001342:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800134a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001350:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800135a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800135e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff fd1f 	bl	8000db0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	f8de3f23 	.word	0xf8de3f23

0800138c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0a6      	sub	sp, #152	; 0x98
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001394:	2301      	movs	r3, #1
 8001396:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800139a:	2301      	movs	r3, #1
 800139c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80013aa:	2301      	movs	r3, #1
 80013ac:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80013b6:	2301      	movs	r3, #1
 80013b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80013c8:	2300      	movs	r3, #0
 80013ca:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80013ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80013f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001400:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001404:	4619      	mov	r1, r3
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fe86 	bl	8001118 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800140c:	2301      	movs	r3, #1
 800140e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001410:	2301      	movs	r3, #1
 8001412:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001414:	2301      	movs	r3, #1
 8001416:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800141a:	2301      	movs	r3, #1
 800141c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001432:	2301      	movs	r3, #1
 8001434:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001438:	2301      	movs	r3, #1
 800143a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800143c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001440:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001442:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001446:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800144e:	2301      	movs	r3, #1
 8001450:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001454:	2300      	movs	r3, #0
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	4619      	mov	r1, r3
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff08 	bl	8001278 <ETH_SetDMAConfig>
}
 8001468:	bf00      	nop
 800146a:	3798      	adds	r7, #152	; 0x98
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3305      	adds	r3, #5
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	3204      	adds	r2, #4
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	4313      	orrs	r3, r2
 800148c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <ETH_MACAddressConfig+0x68>)
 8001492:	4413      	add	r3, r2
 8001494:	461a      	mov	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3303      	adds	r3, #3
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	061a      	lsls	r2, r3, #24
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3302      	adds	r3, #2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	041b      	lsls	r3, r3, #16
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3301      	adds	r3, #1
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	4313      	orrs	r3, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <ETH_MACAddressConfig+0x6c>)
 80014c2:	4413      	add	r3, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	6013      	str	r3, [r2, #0]
}
 80014ca:	bf00      	nop
 80014cc:	371c      	adds	r7, #28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40028040 	.word	0x40028040
 80014dc:	40028044 	.word	0x40028044

080014e0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	e03e      	b.n	800156c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68d9      	ldr	r1, [r3, #12]
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	3206      	adds	r2, #6
 8001520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d80c      	bhi.n	8001550 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68d9      	ldr	r1, [r3, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	461a      	mov	r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	e004      	b.n	800155a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	461a      	mov	r2, r3
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3301      	adds	r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d9bd      	bls.n	80014ee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001584:	611a      	str	r2, [r3, #16]
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	e046      	b.n	800162e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6919      	ldr	r1, [r3, #16]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	440b      	add	r3, r1
 80015b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2200      	movs	r2, #0
 80015bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015dc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80015e4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	3212      	adds	r2, #18
 80015fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d80c      	bhi.n	800161e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6919      	ldr	r1, [r3, #16]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	461a      	mov	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	e004      	b.n	8001628 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	461a      	mov	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3301      	adds	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d9b5      	bls.n	80015a0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691a      	ldr	r2, [r3, #16]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165e:	60da      	str	r2, [r3, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	e177      	b.n	8001978 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001688:	2201      	movs	r2, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 8166 	bne.w	8001972 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d005      	beq.n	80016be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d130      	bne.n	8001720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 0201 	and.w	r2, r3, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b03      	cmp	r3, #3
 800172a:	d017      	beq.n	800175c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d123      	bne.n	80017b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3208      	adds	r2, #8
 80017aa:	69b9      	ldr	r1, [r7, #24]
 80017ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80c0 	beq.w	8001972 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b66      	ldr	r3, [pc, #408]	; (8001990 <HAL_GPIO_Init+0x324>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a65      	ldr	r2, [pc, #404]	; (8001990 <HAL_GPIO_Init+0x324>)
 80017fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_GPIO_Init+0x324>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800180e:	4a61      	ldr	r2, [pc, #388]	; (8001994 <HAL_GPIO_Init+0x328>)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3302      	adds	r3, #2
 8001816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a58      	ldr	r2, [pc, #352]	; (8001998 <HAL_GPIO_Init+0x32c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d037      	beq.n	80018aa <HAL_GPIO_Init+0x23e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a57      	ldr	r2, [pc, #348]	; (800199c <HAL_GPIO_Init+0x330>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d031      	beq.n	80018a6 <HAL_GPIO_Init+0x23a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a56      	ldr	r2, [pc, #344]	; (80019a0 <HAL_GPIO_Init+0x334>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d02b      	beq.n	80018a2 <HAL_GPIO_Init+0x236>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a55      	ldr	r2, [pc, #340]	; (80019a4 <HAL_GPIO_Init+0x338>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d025      	beq.n	800189e <HAL_GPIO_Init+0x232>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a54      	ldr	r2, [pc, #336]	; (80019a8 <HAL_GPIO_Init+0x33c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01f      	beq.n	800189a <HAL_GPIO_Init+0x22e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a53      	ldr	r2, [pc, #332]	; (80019ac <HAL_GPIO_Init+0x340>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d019      	beq.n	8001896 <HAL_GPIO_Init+0x22a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <HAL_GPIO_Init+0x344>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0x226>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a51      	ldr	r2, [pc, #324]	; (80019b4 <HAL_GPIO_Init+0x348>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00d      	beq.n	800188e <HAL_GPIO_Init+0x222>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a50      	ldr	r2, [pc, #320]	; (80019b8 <HAL_GPIO_Init+0x34c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x21e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4f      	ldr	r2, [pc, #316]	; (80019bc <HAL_GPIO_Init+0x350>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_GPIO_Init+0x21a>
 8001882:	2309      	movs	r3, #9
 8001884:	e012      	b.n	80018ac <HAL_GPIO_Init+0x240>
 8001886:	230a      	movs	r3, #10
 8001888:	e010      	b.n	80018ac <HAL_GPIO_Init+0x240>
 800188a:	2308      	movs	r3, #8
 800188c:	e00e      	b.n	80018ac <HAL_GPIO_Init+0x240>
 800188e:	2307      	movs	r3, #7
 8001890:	e00c      	b.n	80018ac <HAL_GPIO_Init+0x240>
 8001892:	2306      	movs	r3, #6
 8001894:	e00a      	b.n	80018ac <HAL_GPIO_Init+0x240>
 8001896:	2305      	movs	r3, #5
 8001898:	e008      	b.n	80018ac <HAL_GPIO_Init+0x240>
 800189a:	2304      	movs	r3, #4
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x240>
 800189e:	2303      	movs	r3, #3
 80018a0:	e004      	b.n	80018ac <HAL_GPIO_Init+0x240>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_Init+0x240>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x240>
 80018aa:	2300      	movs	r3, #0
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f002 0203 	and.w	r2, r2, #3
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4093      	lsls	r3, r2
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018bc:	4935      	ldr	r1, [pc, #212]	; (8001994 <HAL_GPIO_Init+0x328>)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_GPIO_Init+0x354>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ee:	4a34      	ldr	r2, [pc, #208]	; (80019c0 <HAL_GPIO_Init+0x354>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f4:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <HAL_GPIO_Init+0x354>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001918:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <HAL_GPIO_Init+0x354>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800191e:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <HAL_GPIO_Init+0x354>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001942:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <HAL_GPIO_Init+0x354>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001948:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <HAL_GPIO_Init+0x354>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <HAL_GPIO_Init+0x354>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3301      	adds	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b0f      	cmp	r3, #15
 800197c:	f67f ae84 	bls.w	8001688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40013800 	.word	0x40013800
 8001998:	40020000 	.word	0x40020000
 800199c:	40020400 	.word	0x40020400
 80019a0:	40020800 	.word	0x40020800
 80019a4:	40020c00 	.word	0x40020c00
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40021400 	.word	0x40021400
 80019b0:	40021800 	.word	0x40021800
 80019b4:	40021c00 	.word	0x40021c00
 80019b8:	40022000 	.word	0x40022000
 80019bc:	40022400 	.word	0x40022400
 80019c0:	40013c00 	.word	0x40013c00

080019c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
 80019d0:	4613      	mov	r3, r2
 80019d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d4:	787b      	ldrb	r3, [r7, #1]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019e0:	e003      	b.n	80019ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019e2:	887b      	ldrh	r3, [r7, #2]
 80019e4:	041a      	lsls	r2, r3, #16
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	619a      	str	r2, [r3, #24]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f8:	b08f      	sub	sp, #60	; 0x3c
 80019fa:	af0a      	add	r7, sp, #40	; 0x28
 80019fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e10f      	b.n	8001c28 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f005 ffda 	bl	80079dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 fac1 	bl	8003fce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	687e      	ldr	r6, [r7, #4]
 8001a54:	466d      	mov	r5, sp
 8001a56:	f106 0410 	add.w	r4, r6, #16
 8001a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a66:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a6a:	1d33      	adds	r3, r6, #4
 8001a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a6e:	6838      	ldr	r0, [r7, #0]
 8001a70:	f002 f998 	bl	8003da4 <USB_CoreInit>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0d0      	b.n	8001c28 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 faaf 	bl	8003ff0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
 8001a96:	e04a      	b.n	8001b2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	333d      	adds	r3, #61	; 0x3d
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	333c      	adds	r3, #60	; 0x3c
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	b298      	uxth	r0, r3
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3344      	adds	r3, #68	; 0x44
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3340      	adds	r3, #64	; 0x40
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	3348      	adds	r3, #72	; 0x48
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	334c      	adds	r3, #76	; 0x4c
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	3354      	adds	r3, #84	; 0x54
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d3af      	bcc.n	8001a98 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e044      	b.n	8001bc8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b6a:	7bfa      	ldrb	r2, [r7, #15]
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bac:	7bfa      	ldrb	r2, [r7, #15]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d3b5      	bcc.n	8001b3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	687e      	ldr	r6, [r7, #4]
 8001bda:	466d      	mov	r5, sp
 8001bdc:	f106 0410 	add.w	r4, r6, #16
 8001be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bec:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bf0:	1d33      	adds	r3, r6, #4
 8001bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bf4:	6838      	ldr	r0, [r7, #0]
 8001bf6:	f002 fa47 	bl	8004088 <USB_DevInit>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e00d      	b.n	8001c28 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fb96 	bl	8005352 <USB_DevDisconnect>

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c30 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_PCD_Start+0x1c>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e020      	b.n	8001c8e <HAL_PCD_Start+0x5e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d109      	bne.n	8001c70 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d005      	beq.n	8001c70 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 f999 	bl	8003fac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 fb46 	bl	8005310 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c96:	b590      	push	{r4, r7, lr}
 8001c98:	b08d      	sub	sp, #52	; 0x34
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 fc04 	bl	80054ba <USB_GetMode>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f040 848a 	bne.w	80025ce <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 fb68 	bl	8005394 <USB_ReadInterrupts>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8480 	beq.w	80025cc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 fb55 	bl	8005394 <USB_ReadInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d107      	bne.n	8001d04 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f002 0202 	and.w	r2, r2, #2
 8001d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fb43 	bl	8005394 <USB_ReadInterrupts>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b10      	cmp	r3, #16
 8001d16:	d161      	bne.n	8001ddc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0210 	bic.w	r2, r2, #16
 8001d26:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f003 020f 	and.w	r2, r3, #15
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	3304      	adds	r3, #4
 8001d46:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	0c5b      	lsrs	r3, r3, #17
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d124      	bne.n	8001d9e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d035      	beq.n	8001dcc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	6a38      	ldr	r0, [r7, #32]
 8001d74:	f003 f97a 	bl	800506c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d84:	441a      	add	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	6a1a      	ldr	r2, [r3, #32]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d96:	441a      	add	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	621a      	str	r2, [r3, #32]
 8001d9c:	e016      	b.n	8001dcc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	0c5b      	lsrs	r3, r3, #17
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d110      	bne.n	8001dcc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001db0:	2208      	movs	r2, #8
 8001db2:	4619      	mov	r1, r3
 8001db4:	6a38      	ldr	r0, [r7, #32]
 8001db6:	f003 f959 	bl	800506c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	6a1a      	ldr	r2, [r3, #32]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dc6:	441a      	add	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0210 	orr.w	r2, r2, #16
 8001dda:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 fad7 	bl	8005394 <USB_ReadInterrupts>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001df0:	f040 80a7 	bne.w	8001f42 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fadc 	bl	80053ba <USB_ReadDevAllOutEpInterrupt>
 8001e02:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e04:	e099      	b.n	8001f3a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 808e 	beq.w	8001f2e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 fb00 	bl	8005422 <USB_ReadDevOutEPInterrupt>
 8001e22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fec2 	bl	8002bcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2308      	movs	r3, #8
 8001e62:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 ff98 	bl	8002d9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e82:	461a      	mov	r2, r3
 8001e84:	2310      	movs	r3, #16
 8001e86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d030      	beq.n	8001ef4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	2b80      	cmp	r3, #128	; 0x80
 8001e9c:	d109      	bne.n	8001eb2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eb0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	78db      	ldrb	r3, [r3, #3]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d108      	bne.n	8001ee2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	4619      	mov	r1, r3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f005 fe91 	bl	8007c04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eee:	461a      	mov	r2, r3
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d008      	beq.n	8001f10 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f26:	461a      	mov	r2, r3
 8001f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f2c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	3301      	adds	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f36:	085b      	lsrs	r3, r3, #1
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f47f af62 	bne.w	8001e06 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 fa24 	bl	8005394 <USB_ReadInterrupts>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f56:	f040 80db 	bne.w	8002110 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fa45 	bl	80053ee <USB_ReadDevAllInEpInterrupt>
 8001f64:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f6a:	e0cd      	b.n	8002108 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80c2 	beq.w	80020fc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fa6b 	bl	800545e <USB_ReadDevInEPInterrupt>
 8001f88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d057      	beq.n	8002044 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69f9      	ldr	r1, [r7, #28]
 8001fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d132      	bne.n	8002038 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	334c      	adds	r3, #76	; 0x4c
 8001fe2:	6819      	ldr	r1, [r3, #0]
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4403      	add	r3, r0
 8001ff2:	3348      	adds	r3, #72	; 0x48
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4419      	add	r1, r3
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4403      	add	r3, r0
 8002006:	334c      	adds	r3, #76	; 0x4c
 8002008:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	2b00      	cmp	r3, #0
 800200e:	d113      	bne.n	8002038 <HAL_PCD_IRQHandler+0x3a2>
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3354      	adds	r3, #84	; 0x54
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d108      	bne.n	8002038 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002030:	461a      	mov	r2, r3
 8002032:	2101      	movs	r1, #1
 8002034:	f003 fa72 	bl	800551c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	b2db      	uxtb	r3, r3
 800203c:	4619      	mov	r1, r3
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f005 fd5b 	bl	8007afa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800205a:	461a      	mov	r2, r3
 800205c:	2308      	movs	r3, #8
 800205e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	4413      	add	r3, r2
 8002072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002076:	461a      	mov	r2, r3
 8002078:	2310      	movs	r3, #16
 800207a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d008      	beq.n	8002098 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002092:	461a      	mov	r2, r3
 8002094:	2340      	movs	r3, #64	; 0x40
 8002096:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d023      	beq.n	80020ea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80020a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a4:	6a38      	ldr	r0, [r7, #32]
 80020a6:	f002 f953 	bl	8004350 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80020aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	3338      	adds	r3, #56	; 0x38
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	3304      	adds	r3, #4
 80020bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	78db      	ldrb	r3, [r3, #3]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d108      	bne.n	80020d8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2200      	movs	r2, #0
 80020ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	4619      	mov	r1, r3
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f005 fda8 	bl	8007c28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020e4:	461a      	mov	r2, r3
 80020e6:	2302      	movs	r3, #2
 80020e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fcdb 	bl	8002ab2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	3301      	adds	r3, #1
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	2b00      	cmp	r3, #0
 800210c:	f47f af2e 	bne.w	8001f6c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f003 f93d 	bl	8005394 <USB_ReadInterrupts>
 800211a:	4603      	mov	r3, r0
 800211c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002124:	d122      	bne.n	800216c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002140:	2b01      	cmp	r3, #1
 8002142:	d108      	bne.n	8002156 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800214c:	2100      	movs	r1, #0
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 fec2 	bl	8002ed8 <HAL_PCDEx_LPM_Callback>
 8002154:	e002      	b.n	800215c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f005 fd46 	bl	8007be8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800216a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f003 f90f 	bl	8005394 <USB_ReadInterrupts>
 8002176:	4603      	mov	r3, r0
 8002178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800217c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002180:	d112      	bne.n	80021a8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b01      	cmp	r3, #1
 8002190:	d102      	bne.n	8002198 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f005 fd02 	bl	8007b9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80021a6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 f8f1 	bl	8005394 <USB_ReadInterrupts>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021bc:	f040 80b7 	bne.w	800232e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ce:	f023 0301 	bic.w	r3, r3, #1
 80021d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2110      	movs	r1, #16
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 f8b8 	bl	8004350 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e0:	2300      	movs	r3, #0
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e4:	e046      	b.n	8002274 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021f2:	461a      	mov	r2, r3
 80021f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800220a:	0151      	lsls	r1, r2, #5
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	440a      	add	r2, r1
 8002210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002214:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002218:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	4413      	add	r3, r2
 8002222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002226:	461a      	mov	r2, r3
 8002228:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800222c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800223e:	0151      	lsls	r1, r2, #5
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	440a      	add	r2, r1
 8002244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002248:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800224c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800225e:	0151      	lsls	r1, r2, #5
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	440a      	add	r2, r1
 8002264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002268:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800226c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	3301      	adds	r3, #1
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800227a:	429a      	cmp	r2, r3
 800227c:	d3b3      	bcc.n	80021e6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800228c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002290:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	2b00      	cmp	r3, #0
 8002298:	d016      	beq.n	80022c8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022aa:	f043 030b 	orr.w	r3, r3, #11
 80022ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c0:	f043 030b 	orr.w	r3, r3, #11
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	e015      	b.n	80022f4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ee:	f043 030b 	orr.w	r3, r3, #11
 80022f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002302:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002306:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002318:	461a      	mov	r2, r3
 800231a:	f003 f8ff 	bl	800551c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800232c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f003 f82e 	bl	8005394 <USB_ReadInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800233e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002342:	d124      	bne.n	800238e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f003 f8c4 	bl	80054d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f002 f879 	bl	800444a <USB_GetDevSpeed>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681c      	ldr	r4, [r3, #0]
 8002364:	f001 fa28 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 8002368:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	4620      	mov	r0, r4
 8002374:	f001 fd78 	bl	8003e68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f005 fbe6 	bl	8007b4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800238c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f002 fffe 	bl	8005394 <USB_ReadInterrupts>
 8002398:	4603      	mov	r3, r0
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d10a      	bne.n	80023b8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f005 fbc3 	bl	8007b2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f002 0208 	and.w	r2, r2, #8
 80023b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f002 ffe9 	bl	8005394 <USB_ReadInterrupts>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c8:	2b80      	cmp	r3, #128	; 0x80
 80023ca:	d122      	bne.n	8002412 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023d8:	2301      	movs	r3, #1
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
 80023dc:	e014      	b.n	8002408 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d105      	bne.n	8002402 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	4619      	mov	r1, r3
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fb27 	bl	8002a50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	3301      	adds	r3, #1
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	429a      	cmp	r2, r3
 8002410:	d3e5      	bcc.n	80023de <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f002 ffbc 	bl	8005394 <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002426:	d13b      	bne.n	80024a0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002428:	2301      	movs	r3, #1
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	e02b      	b.n	8002486 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	4413      	add	r3, r2
 8002436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	3340      	adds	r3, #64	; 0x40
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d115      	bne.n	8002480 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002454:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002456:	2b00      	cmp	r3, #0
 8002458:	da12      	bge.n	8002480 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	333f      	adds	r3, #63	; 0x3f
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fae8 	bl	8002a50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	3301      	adds	r3, #1
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248c:	429a      	cmp	r2, r3
 800248e:	d3ce      	bcc.n	800242e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800249e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 ff75 	bl	8005394 <USB_ReadInterrupts>
 80024aa:	4603      	mov	r3, r0
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024b4:	d155      	bne.n	8002562 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024b6:	2301      	movs	r3, #1
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ba:	e045      	b.n	8002548 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d12e      	bne.n	8002542 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	da2b      	bge.n	8002542 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80024f6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d121      	bne.n	8002542 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10a      	bne.n	8002542 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800253a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800253e:	6053      	str	r3, [r2, #4]
            break;
 8002540:	e007      	b.n	8002552 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	3301      	adds	r3, #1
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254e:	429a      	cmp	r2, r3
 8002550:	d3b4      	bcc.n	80024bc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002560:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f002 ff14 	bl	8005394 <USB_ReadInterrupts>
 800256c:	4603      	mov	r3, r0
 800256e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002576:	d10a      	bne.n	800258e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f005 fb67 	bl	8007c4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800258c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fefe 	bl	8005394 <USB_ReadInterrupts>
 8002598:	4603      	mov	r3, r0
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d115      	bne.n	80025ce <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f005 fb57 	bl	8007c68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	e000      	b.n	80025ce <HAL_PCD_IRQHandler+0x938>
      return;
 80025cc:	bf00      	nop
    }
  }
}
 80025ce:	3734      	adds	r7, #52	; 0x34
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd90      	pop	{r4, r7, pc}

080025d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_PCD_SetAddress+0x1a>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e013      	b.n	8002616 <HAL_PCD_SetAddress+0x42>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f002 fe5c 	bl	80052c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	4608      	mov	r0, r1
 8002628:	4611      	mov	r1, r2
 800262a:	461a      	mov	r2, r3
 800262c:	4603      	mov	r3, r0
 800262e:	70fb      	strb	r3, [r7, #3]
 8002630:	460b      	mov	r3, r1
 8002632:	803b      	strh	r3, [r7, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800263c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002640:	2b00      	cmp	r3, #0
 8002642:	da0f      	bge.n	8002664 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	f003 020f 	and.w	r2, r3, #15
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	3338      	adds	r3, #56	; 0x38
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4413      	add	r3, r2
 8002658:	3304      	adds	r3, #4
 800265a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	705a      	strb	r2, [r3, #1]
 8002662:	e00f      	b.n	8002684 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	f003 020f 	and.w	r2, r3, #15
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	3304      	adds	r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	b2da      	uxtb	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002690:	883a      	ldrh	r2, [r7, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	78ba      	ldrb	r2, [r7, #2]
 800269a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d004      	beq.n	80026ae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026ae:	78bb      	ldrb	r3, [r7, #2]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d102      	bne.n	80026ba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_PCD_EP_Open+0xaa>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e00e      	b.n	80026e6 <HAL_PCD_EP_Open+0xc8>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68f9      	ldr	r1, [r7, #12]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 fedc 	bl	8004494 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80026e4:	7afb      	ldrb	r3, [r7, #11]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	460b      	mov	r3, r1
 80026f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da0f      	bge.n	8002722 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	f003 020f 	and.w	r2, r3, #15
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	3338      	adds	r3, #56	; 0x38
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	3304      	adds	r3, #4
 8002718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	705a      	strb	r2, [r3, #1]
 8002720:	e00f      	b.n	8002742 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	f003 020f 	and.w	r2, r3, #15
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	3304      	adds	r3, #4
 800273a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_PCD_EP_Close+0x6e>
 8002758:	2302      	movs	r3, #2
 800275a:	e00e      	b.n	800277a <HAL_PCD_EP_Close+0x8c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68f9      	ldr	r1, [r7, #12]
 800276a:	4618      	mov	r0, r3
 800276c:	f001 ff1a 	bl	80045a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	460b      	mov	r3, r1
 8002790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002792:	7afb      	ldrb	r3, [r7, #11]
 8002794:	f003 020f 	and.w	r2, r3, #15
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	3304      	adds	r3, #4
 80027aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2200      	movs	r2, #0
 80027bc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2200      	movs	r2, #0
 80027c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d102      	bne.n	80027de <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027de:	7afb      	ldrb	r3, [r7, #11]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	6979      	ldr	r1, [r7, #20]
 80027f6:	f002 f9f9 	bl	8004bec <USB_EP0StartXfer>
 80027fa:	e008      	b.n	800280e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	6979      	ldr	r1, [r7, #20]
 800280a:	f001 ffa7 	bl	800475c <USB_EPStartXfer>
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	f003 020f 	and.w	r2, r3, #15
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	460b      	mov	r3, r1
 8002856:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002858:	7afb      	ldrb	r3, [r7, #11]
 800285a:	f003 020f 	and.w	r2, r3, #15
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	3338      	adds	r3, #56	; 0x38
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	3304      	adds	r3, #4
 800286e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2201      	movs	r2, #1
 8002886:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	b2da      	uxtb	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d102      	bne.n	80028a2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028a2:	7afb      	ldrb	r3, [r7, #11]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	6979      	ldr	r1, [r7, #20]
 80028ba:	f002 f997 	bl	8004bec <USB_EP0StartXfer>
 80028be:	e008      	b.n	80028d2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	6979      	ldr	r1, [r7, #20]
 80028ce:	f001 ff45 	bl	800475c <USB_EPStartXfer>
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	f003 020f 	and.w	r2, r3, #15
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d901      	bls.n	80028fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e050      	b.n	800299c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	da0f      	bge.n	8002922 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	f003 020f 	and.w	r2, r3, #15
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	3338      	adds	r3, #56	; 0x38
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	3304      	adds	r3, #4
 8002918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	705a      	strb	r2, [r3, #1]
 8002920:	e00d      	b.n	800293e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	4413      	add	r3, r2
 8002934:	3304      	adds	r3, #4
 8002936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	b2da      	uxtb	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_PCD_EP_SetStall+0x82>
 800295a:	2302      	movs	r3, #2
 800295c:	e01e      	b.n	800299c <HAL_PCD_EP_SetStall+0xc0>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68f9      	ldr	r1, [r7, #12]
 800296c:	4618      	mov	r0, r3
 800296e:	f002 fbd5 	bl	800511c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	b2d9      	uxtb	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800298c:	461a      	mov	r2, r3
 800298e:	f002 fdc5 	bl	800551c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f003 020f 	and.w	r2, r3, #15
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d901      	bls.n	80029c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e042      	b.n	8002a48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	da0f      	bge.n	80029ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 020f 	and.w	r2, r3, #15
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	3338      	adds	r3, #56	; 0x38
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	3304      	adds	r3, #4
 80029e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	705a      	strb	r2, [r3, #1]
 80029e8:	e00f      	b.n	8002a0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	f003 020f 	and.w	r2, r3, #15
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	3304      	adds	r3, #4
 8002a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_PCD_EP_ClrStall+0x86>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e00e      	b.n	8002a48 <HAL_PCD_EP_ClrStall+0xa4>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68f9      	ldr	r1, [r7, #12]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f002 fbdd 	bl	80051f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	da0c      	bge.n	8002a7e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 020f 	and.w	r2, r3, #15
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	3338      	adds	r3, #56	; 0x38
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	3304      	adds	r3, #4
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e00c      	b.n	8002a98 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3304      	adds	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68f9      	ldr	r1, [r7, #12]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 f9fc 	bl	8004e9c <USB_EPStopXfer>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002aa8:	7afb      	ldrb	r3, [r7, #11]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b08a      	sub	sp, #40	; 0x28
 8002ab6:	af02      	add	r7, sp, #8
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	3338      	adds	r3, #56	; 0x38
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a1a      	ldr	r2, [r3, #32]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d901      	bls.n	8002aea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e06c      	b.n	8002bc4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d902      	bls.n	8002b06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3303      	adds	r3, #3
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b0e:	e02b      	b.n	8002b68 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d902      	bls.n	8002b2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	3303      	adds	r3, #3
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6919      	ldr	r1, [r3, #16]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	4603      	mov	r3, r0
 8002b4a:	6978      	ldr	r0, [r7, #20]
 8002b4c:	f002 fa50 	bl	8004ff0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	441a      	add	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1a      	ldr	r2, [r3, #32]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	441a      	add	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d809      	bhi.n	8002b92 <PCD_WriteEmptyTxFifo+0xe0>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a1a      	ldr	r2, [r3, #32]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d203      	bcs.n	8002b92 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1be      	bne.n	8002b10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d811      	bhi.n	8002bc2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	6939      	ldr	r1, [r7, #16]
 8002bba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	333c      	adds	r3, #60	; 0x3c
 8002be4:	3304      	adds	r3, #4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d17b      	bne.n	8002cfa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d015      	beq.n	8002c38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	4a61      	ldr	r2, [pc, #388]	; (8002d94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	f240 80b9 	bls.w	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80b3 	beq.w	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c34:	6093      	str	r3, [r2, #8]
 8002c36:	e0a7      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2320      	movs	r3, #32
 8002c52:	6093      	str	r3, [r2, #8]
 8002c54:	e098      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 8093 	bne.w	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	4a4b      	ldr	r2, [pc, #300]	; (8002d94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d90f      	bls.n	8002c8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c80:	461a      	mov	r2, r3
 8002c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c86:	6093      	str	r3, [r2, #8]
 8002c88:	e07e      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	69da      	ldr	r2, [r3, #28]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	0159      	lsls	r1, r3, #5
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	440b      	add	r3, r1
 8002cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb6:	1ad2      	subs	r2, r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d114      	bne.n	8002cec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	f002 fc20 	bl	800551c <USB_EP0_OutStart>
 8002cdc:	e006      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	441a      	add	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f004 fee6 	bl	8007ac4 <HAL_PCD_DataOutStageCallback>
 8002cf8:	e046      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	4a26      	ldr	r2, [pc, #152]	; (8002d98 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d124      	bne.n	8002d4c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d1e:	6093      	str	r3, [r2, #8]
 8002d20:	e032      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f004 febd 	bl	8007ac4 <HAL_PCD_DataOutStageCallback>
 8002d4a:	e01d      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d114      	bne.n	8002d7c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d108      	bne.n	8002d7c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d74:	461a      	mov	r2, r3
 8002d76:	2100      	movs	r1, #0
 8002d78:	f002 fbd0 	bl	800551c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f004 fe9e 	bl	8007ac4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	4f54300a 	.word	0x4f54300a
 8002d98:	4f54310a 	.word	0x4f54310a

08002d9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	333c      	adds	r3, #60	; 0x3c
 8002db4:	3304      	adds	r3, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d90e      	bls.n	8002df0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f004 fe55 	bl	8007aa0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d90c      	bls.n	8002e18 <PCD_EP_OutSetupPacket_int+0x7c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d108      	bne.n	8002e18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e10:	461a      	mov	r2, r3
 8002e12:	2101      	movs	r1, #1
 8002e14:	f002 fb82 	bl	800551c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	4f54300a 	.word	0x4f54300a

08002e28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
 8002e34:	4613      	mov	r3, r2
 8002e36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d107      	bne.n	8002e56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e46:	883b      	ldrh	r3, [r7, #0]
 8002e48:	0419      	lsls	r1, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
 8002e54:	e028      	b.n	8002ea8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4413      	add	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e00d      	b.n	8002e86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	3340      	adds	r3, #64	; 0x40
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	3301      	adds	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d3ec      	bcc.n	8002e6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e90:	883b      	ldrh	r3, [r7, #0]
 8002e92:	0418      	lsls	r0, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6819      	ldr	r1, [r3, #0]
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	4302      	orrs	r2, r0
 8002ea0:	3340      	adds	r3, #64	; 0x40
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e267      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d075      	beq.n	8002ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f0e:	4b88      	ldr	r3, [pc, #544]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d00c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1a:	4b85      	ldr	r3, [pc, #532]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d112      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4b82      	ldr	r3, [pc, #520]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f32:	d10b      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	4b7e      	ldr	r3, [pc, #504]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d05b      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x108>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d157      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e242      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d106      	bne.n	8002f64 <HAL_RCC_OscConfig+0x74>
 8002f56:	4b76      	ldr	r3, [pc, #472]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a75      	ldr	r2, [pc, #468]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e01d      	b.n	8002fa0 <HAL_RCC_OscConfig+0xb0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x98>
 8002f6e:	4b70      	ldr	r3, [pc, #448]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6f      	ldr	r2, [pc, #444]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6c      	ldr	r2, [pc, #432]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xb0>
 8002f88:	4b69      	ldr	r3, [pc, #420]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a68      	ldr	r2, [pc, #416]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b66      	ldr	r3, [pc, #408]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a65      	ldr	r2, [pc, #404]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fd fef6 	bl	8000d98 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fd fef2 	bl	8000d98 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e207      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b5b      	ldr	r3, [pc, #364]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xc0>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fd fee2 	bl	8000d98 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fd fede 	bl	8000d98 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1f3      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	4b51      	ldr	r3, [pc, #324]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xe8>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d063      	beq.n	80030ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003006:	4b4a      	ldr	r3, [pc, #296]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003012:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800301a:	2b08      	cmp	r3, #8
 800301c:	d11c      	bne.n	8003058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301e:	4b44      	ldr	r3, [pc, #272]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d116      	bne.n	8003058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	4b41      	ldr	r3, [pc, #260]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_RCC_OscConfig+0x152>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e1c7      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4937      	ldr	r1, [pc, #220]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	e03a      	b.n	80030ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <HAL_RCC_OscConfig+0x244>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fd fe97 	bl	8000d98 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306e:	f7fd fe93 	bl	8000d98 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e1a8      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	4b2b      	ldr	r3, [pc, #172]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308c:	4b28      	ldr	r3, [pc, #160]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4925      	ldr	r1, [pc, #148]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	e015      	b.n	80030ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_OscConfig+0x244>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fd fe76 	bl	8000d98 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b0:	f7fd fe72 	bl	8000d98 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e187      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d036      	beq.n	8003148 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d016      	beq.n	8003110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_RCC_OscConfig+0x248>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7fd fe56 	bl	8000d98 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f0:	f7fd fe52 	bl	8000d98 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e167      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x200>
 800310e:	e01b      	b.n	8003148 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_RCC_OscConfig+0x248>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7fd fe3f 	bl	8000d98 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311c:	e00e      	b.n	800313c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311e:	f7fd fe3b 	bl	8000d98 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d907      	bls.n	800313c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e150      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
 8003130:	40023800 	.word	0x40023800
 8003134:	42470000 	.word	0x42470000
 8003138:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	4b88      	ldr	r3, [pc, #544]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1ea      	bne.n	800311e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8097 	beq.w	8003284 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003156:	2300      	movs	r3, #0
 8003158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315a:	4b81      	ldr	r3, [pc, #516]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	4b7d      	ldr	r3, [pc, #500]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a7c      	ldr	r2, [pc, #496]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b7a      	ldr	r3, [pc, #488]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	4b77      	ldr	r3, [pc, #476]	; (8003364 <HAL_RCC_OscConfig+0x474>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d118      	bne.n	80031c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003192:	4b74      	ldr	r3, [pc, #464]	; (8003364 <HAL_RCC_OscConfig+0x474>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a73      	ldr	r2, [pc, #460]	; (8003364 <HAL_RCC_OscConfig+0x474>)
 8003198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319e:	f7fd fdfb 	bl	8000d98 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a6:	f7fd fdf7 	bl	8000d98 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e10c      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b8:	4b6a      	ldr	r3, [pc, #424]	; (8003364 <HAL_RCC_OscConfig+0x474>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0x2ea>
 80031cc:	4b64      	ldr	r3, [pc, #400]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a63      	ldr	r2, [pc, #396]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6713      	str	r3, [r2, #112]	; 0x70
 80031d8:	e01c      	b.n	8003214 <HAL_RCC_OscConfig+0x324>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0x30c>
 80031e2:	4b5f      	ldr	r3, [pc, #380]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	4a5e      	ldr	r2, [pc, #376]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	6713      	str	r3, [r2, #112]	; 0x70
 80031ee:	4b5c      	ldr	r3, [pc, #368]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	4a5b      	ldr	r2, [pc, #364]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6713      	str	r3, [r2, #112]	; 0x70
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_OscConfig+0x324>
 80031fc:	4b58      	ldr	r3, [pc, #352]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	4a57      	ldr	r2, [pc, #348]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	6713      	str	r3, [r2, #112]	; 0x70
 8003208:	4b55      	ldr	r3, [pc, #340]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a54      	ldr	r2, [pc, #336]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800320e:	f023 0304 	bic.w	r3, r3, #4
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d015      	beq.n	8003248 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321c:	f7fd fdbc 	bl	8000d98 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003222:	e00a      	b.n	800323a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003224:	f7fd fdb8 	bl	8000d98 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e0cb      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323a:	4b49      	ldr	r3, [pc, #292]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0ee      	beq.n	8003224 <HAL_RCC_OscConfig+0x334>
 8003246:	e014      	b.n	8003272 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003248:	f7fd fda6 	bl	8000d98 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324e:	e00a      	b.n	8003266 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003250:	f7fd fda2 	bl	8000d98 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	; 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e0b5      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003266:	4b3e      	ldr	r3, [pc, #248]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ee      	bne.n	8003250 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003272:	7dfb      	ldrb	r3, [r7, #23]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003278:	4b39      	ldr	r3, [pc, #228]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	4a38      	ldr	r2, [pc, #224]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800327e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003282:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80a1 	beq.w	80033d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800328e:	4b34      	ldr	r3, [pc, #208]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b08      	cmp	r3, #8
 8003298:	d05c      	beq.n	8003354 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d141      	bne.n	8003326 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b31      	ldr	r3, [pc, #196]	; (8003368 <HAL_RCC_OscConfig+0x478>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fd fd76 	bl	8000d98 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fd fd72 	bl	8000d98 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e087      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69da      	ldr	r2, [r3, #28]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	019b      	lsls	r3, r3, #6
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	3b01      	subs	r3, #1
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	061b      	lsls	r3, r3, #24
 80032f2:	491b      	ldr	r1, [pc, #108]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x478>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fd fd4b 	bl	8000d98 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003306:	f7fd fd47 	bl	8000d98 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e05c      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x416>
 8003324:	e054      	b.n	80033d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_RCC_OscConfig+0x478>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fd fd34 	bl	8000d98 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003334:	f7fd fd30 	bl	8000d98 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e045      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x444>
 8003352:	e03d      	b.n	80033d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d107      	bne.n	800336c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e038      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
 8003360:	40023800 	.word	0x40023800
 8003364:	40007000 	.word	0x40007000
 8003368:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800336c:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_RCC_OscConfig+0x4ec>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d028      	beq.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d121      	bne.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d11a      	bne.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800339c:	4013      	ands	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d111      	bne.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	3b01      	subs	r3, #1
 80033b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800

080033e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0cc      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f4:	4b68      	ldr	r3, [pc, #416]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d90c      	bls.n	800341c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b65      	ldr	r3, [pc, #404]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b63      	ldr	r3, [pc, #396]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0b8      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d020      	beq.n	800346a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003434:	4b59      	ldr	r3, [pc, #356]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a58      	ldr	r2, [pc, #352]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800343e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800344c:	4b53      	ldr	r3, [pc, #332]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a52      	ldr	r2, [pc, #328]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003458:	4b50      	ldr	r3, [pc, #320]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	494d      	ldr	r1, [pc, #308]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d044      	beq.n	8003500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b47      	ldr	r3, [pc, #284]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d119      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e07f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d003      	beq.n	800349e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349a:	2b03      	cmp	r3, #3
 800349c:	d107      	bne.n	80034ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349e:	4b3f      	ldr	r3, [pc, #252]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e06f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ae:	4b3b      	ldr	r3, [pc, #236]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e067      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034be:	4b37      	ldr	r3, [pc, #220]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f023 0203 	bic.w	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4934      	ldr	r1, [pc, #208]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d0:	f7fd fc62 	bl	8000d98 <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d8:	f7fd fc5e 	bl	8000d98 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e04f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	4b2b      	ldr	r3, [pc, #172]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 020c 	and.w	r2, r3, #12
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d1eb      	bne.n	80034d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003500:	4b25      	ldr	r3, [pc, #148]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d20c      	bcs.n	8003528 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b22      	ldr	r3, [pc, #136]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e032      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4916      	ldr	r1, [pc, #88]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	490e      	ldr	r1, [pc, #56]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003566:	f000 f821 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 800356a:	4602      	mov	r2, r0
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	490a      	ldr	r1, [pc, #40]	; (80035a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	5ccb      	ldrb	r3, [r1, r3]
 800357a:	fa22 f303 	lsr.w	r3, r2, r3
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd fbc2 	bl	8000d10 <HAL_InitTick>

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023c00 	.word	0x40023c00
 800359c:	40023800 	.word	0x40023800
 80035a0:	080089d0 	.word	0x080089d0
 80035a4:	20000000 	.word	0x20000000
 80035a8:	20000004 	.word	0x20000004

080035ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b0:	b094      	sub	sp, #80	; 0x50
 80035b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	647b      	str	r3, [r7, #68]	; 0x44
 80035b8:	2300      	movs	r3, #0
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035bc:	2300      	movs	r3, #0
 80035be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035c4:	4b79      	ldr	r3, [pc, #484]	; (80037ac <HAL_RCC_GetSysClockFreq+0x200>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d00d      	beq.n	80035ec <HAL_RCC_GetSysClockFreq+0x40>
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	f200 80e1 	bhi.w	8003798 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x34>
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d003      	beq.n	80035e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035de:	e0db      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035e0:	4b73      	ldr	r3, [pc, #460]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80035e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035e4:	e0db      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035e6:	4b73      	ldr	r3, [pc, #460]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80035e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ea:	e0d8      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035ec:	4b6f      	ldr	r3, [pc, #444]	; (80037ac <HAL_RCC_GetSysClockFreq+0x200>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035f6:	4b6d      	ldr	r3, [pc, #436]	; (80037ac <HAL_RCC_GetSysClockFreq+0x200>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d063      	beq.n	80036ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003602:	4b6a      	ldr	r3, [pc, #424]	; (80037ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	099b      	lsrs	r3, r3, #6
 8003608:	2200      	movs	r2, #0
 800360a:	63bb      	str	r3, [r7, #56]	; 0x38
 800360c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003614:	633b      	str	r3, [r7, #48]	; 0x30
 8003616:	2300      	movs	r3, #0
 8003618:	637b      	str	r3, [r7, #52]	; 0x34
 800361a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800361e:	4622      	mov	r2, r4
 8003620:	462b      	mov	r3, r5
 8003622:	f04f 0000 	mov.w	r0, #0
 8003626:	f04f 0100 	mov.w	r1, #0
 800362a:	0159      	lsls	r1, r3, #5
 800362c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003630:	0150      	lsls	r0, r2, #5
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4621      	mov	r1, r4
 8003638:	1a51      	subs	r1, r2, r1
 800363a:	6139      	str	r1, [r7, #16]
 800363c:	4629      	mov	r1, r5
 800363e:	eb63 0301 	sbc.w	r3, r3, r1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003650:	4659      	mov	r1, fp
 8003652:	018b      	lsls	r3, r1, #6
 8003654:	4651      	mov	r1, sl
 8003656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800365a:	4651      	mov	r1, sl
 800365c:	018a      	lsls	r2, r1, #6
 800365e:	4651      	mov	r1, sl
 8003660:	ebb2 0801 	subs.w	r8, r2, r1
 8003664:	4659      	mov	r1, fp
 8003666:	eb63 0901 	sbc.w	r9, r3, r1
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800367a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800367e:	4690      	mov	r8, r2
 8003680:	4699      	mov	r9, r3
 8003682:	4623      	mov	r3, r4
 8003684:	eb18 0303 	adds.w	r3, r8, r3
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	462b      	mov	r3, r5
 800368c:	eb49 0303 	adc.w	r3, r9, r3
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800369e:	4629      	mov	r1, r5
 80036a0:	024b      	lsls	r3, r1, #9
 80036a2:	4621      	mov	r1, r4
 80036a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036a8:	4621      	mov	r1, r4
 80036aa:	024a      	lsls	r2, r1, #9
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b2:	2200      	movs	r2, #0
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036bc:	f7fc fde8 	bl	8000290 <__aeabi_uldivmod>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4613      	mov	r3, r2
 80036c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c8:	e058      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ca:	4b38      	ldr	r3, [pc, #224]	; (80037ac <HAL_RCC_GetSysClockFreq+0x200>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	099b      	lsrs	r3, r3, #6
 80036d0:	2200      	movs	r2, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	4611      	mov	r1, r2
 80036d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	2300      	movs	r3, #0
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
 80036e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036e4:	4642      	mov	r2, r8
 80036e6:	464b      	mov	r3, r9
 80036e8:	f04f 0000 	mov.w	r0, #0
 80036ec:	f04f 0100 	mov.w	r1, #0
 80036f0:	0159      	lsls	r1, r3, #5
 80036f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f6:	0150      	lsls	r0, r2, #5
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4641      	mov	r1, r8
 80036fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003702:	4649      	mov	r1, r9
 8003704:	eb63 0b01 	sbc.w	fp, r3, r1
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003714:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003718:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800371c:	ebb2 040a 	subs.w	r4, r2, sl
 8003720:	eb63 050b 	sbc.w	r5, r3, fp
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	00eb      	lsls	r3, r5, #3
 800372e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003732:	00e2      	lsls	r2, r4, #3
 8003734:	4614      	mov	r4, r2
 8003736:	461d      	mov	r5, r3
 8003738:	4643      	mov	r3, r8
 800373a:	18e3      	adds	r3, r4, r3
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	464b      	mov	r3, r9
 8003740:	eb45 0303 	adc.w	r3, r5, r3
 8003744:	607b      	str	r3, [r7, #4]
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003752:	4629      	mov	r1, r5
 8003754:	028b      	lsls	r3, r1, #10
 8003756:	4621      	mov	r1, r4
 8003758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800375c:	4621      	mov	r1, r4
 800375e:	028a      	lsls	r2, r1, #10
 8003760:	4610      	mov	r0, r2
 8003762:	4619      	mov	r1, r3
 8003764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003766:	2200      	movs	r2, #0
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	61fa      	str	r2, [r7, #28]
 800376c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003770:	f7fc fd8e 	bl	8000290 <__aeabi_uldivmod>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4613      	mov	r3, r2
 800377a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_RCC_GetSysClockFreq+0x200>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	3301      	adds	r3, #1
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800378c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800378e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003796:	e002      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800379a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800379c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800379e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3750      	adds	r7, #80	; 0x50
 80037a4:	46bd      	mov	sp, r7
 80037a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800
 80037b0:	00f42400 	.word	0x00f42400
 80037b4:	007a1200 	.word	0x007a1200

080037b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_RCC_GetHCLKFreq+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000000 	.word	0x20000000

080037d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037d4:	f7ff fff0 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0a9b      	lsrs	r3, r3, #10
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4903      	ldr	r1, [pc, #12]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	080089e0 	.word	0x080089e0

080037f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037fc:	f7ff ffdc 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0b5b      	lsrs	r3, r3, #13
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4903      	ldr	r1, [pc, #12]	; (800381c <HAL_RCC_GetPCLK2Freq+0x24>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40023800 	.word	0x40023800
 800381c:	080089e0 	.word	0x080089e0

08003820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e03f      	b.n	80038b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd f952 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2224      	movs	r2, #36	; 0x24
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f829 	bl	80038bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c0:	b0c0      	sub	sp, #256	; 0x100
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	68d9      	ldr	r1, [r3, #12]
 80038da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	ea40 0301 	orr.w	r3, r0, r1
 80038e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003914:	f021 010c 	bic.w	r1, r1, #12
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003922:	430b      	orrs	r3, r1
 8003924:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003936:	6999      	ldr	r1, [r3, #24]
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	ea40 0301 	orr.w	r3, r0, r1
 8003942:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b8f      	ldr	r3, [pc, #572]	; (8003b88 <UART_SetConfig+0x2cc>)
 800394c:	429a      	cmp	r2, r3
 800394e:	d005      	beq.n	800395c <UART_SetConfig+0xa0>
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b8d      	ldr	r3, [pc, #564]	; (8003b8c <UART_SetConfig+0x2d0>)
 8003958:	429a      	cmp	r2, r3
 800395a:	d104      	bne.n	8003966 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800395c:	f7ff ff4c 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 8003960:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003964:	e003      	b.n	800396e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003966:	f7ff ff33 	bl	80037d0 <HAL_RCC_GetPCLK1Freq>
 800396a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800396e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003978:	f040 810c 	bne.w	8003b94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800397c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003980:	2200      	movs	r2, #0
 8003982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003986:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800398a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800398e:	4622      	mov	r2, r4
 8003990:	462b      	mov	r3, r5
 8003992:	1891      	adds	r1, r2, r2
 8003994:	65b9      	str	r1, [r7, #88]	; 0x58
 8003996:	415b      	adcs	r3, r3
 8003998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800399a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800399e:	4621      	mov	r1, r4
 80039a0:	eb12 0801 	adds.w	r8, r2, r1
 80039a4:	4629      	mov	r1, r5
 80039a6:	eb43 0901 	adc.w	r9, r3, r1
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039be:	4690      	mov	r8, r2
 80039c0:	4699      	mov	r9, r3
 80039c2:	4623      	mov	r3, r4
 80039c4:	eb18 0303 	adds.w	r3, r8, r3
 80039c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039cc:	462b      	mov	r3, r5
 80039ce:	eb49 0303 	adc.w	r3, r9, r3
 80039d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039ea:	460b      	mov	r3, r1
 80039ec:	18db      	adds	r3, r3, r3
 80039ee:	653b      	str	r3, [r7, #80]	; 0x50
 80039f0:	4613      	mov	r3, r2
 80039f2:	eb42 0303 	adc.w	r3, r2, r3
 80039f6:	657b      	str	r3, [r7, #84]	; 0x54
 80039f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a00:	f7fc fc46 	bl	8000290 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4b61      	ldr	r3, [pc, #388]	; (8003b90 <UART_SetConfig+0x2d4>)
 8003a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	011c      	lsls	r4, r3, #4
 8003a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a24:	4642      	mov	r2, r8
 8003a26:	464b      	mov	r3, r9
 8003a28:	1891      	adds	r1, r2, r2
 8003a2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a2c:	415b      	adcs	r3, r3
 8003a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a34:	4641      	mov	r1, r8
 8003a36:	eb12 0a01 	adds.w	sl, r2, r1
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a54:	4692      	mov	sl, r2
 8003a56:	469b      	mov	fp, r3
 8003a58:	4643      	mov	r3, r8
 8003a5a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a62:	464b      	mov	r3, r9
 8003a64:	eb4b 0303 	adc.w	r3, fp, r3
 8003a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a80:	460b      	mov	r3, r1
 8003a82:	18db      	adds	r3, r3, r3
 8003a84:	643b      	str	r3, [r7, #64]	; 0x40
 8003a86:	4613      	mov	r3, r2
 8003a88:	eb42 0303 	adc.w	r3, r2, r3
 8003a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a96:	f7fc fbfb 	bl	8000290 <__aeabi_uldivmod>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4b3b      	ldr	r3, [pc, #236]	; (8003b90 <UART_SetConfig+0x2d4>)
 8003aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	2264      	movs	r2, #100	; 0x64
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	1acb      	subs	r3, r1, r3
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ab6:	4b36      	ldr	r3, [pc, #216]	; (8003b90 <UART_SetConfig+0x2d4>)
 8003ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ac4:	441c      	add	r4, r3
 8003ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ad0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ad4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ad8:	4642      	mov	r2, r8
 8003ada:	464b      	mov	r3, r9
 8003adc:	1891      	adds	r1, r2, r2
 8003ade:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ae0:	415b      	adcs	r3, r3
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ae8:	4641      	mov	r1, r8
 8003aea:	1851      	adds	r1, r2, r1
 8003aec:	6339      	str	r1, [r7, #48]	; 0x30
 8003aee:	4649      	mov	r1, r9
 8003af0:	414b      	adcs	r3, r1
 8003af2:	637b      	str	r3, [r7, #52]	; 0x34
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b00:	4659      	mov	r1, fp
 8003b02:	00cb      	lsls	r3, r1, #3
 8003b04:	4651      	mov	r1, sl
 8003b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b0a:	4651      	mov	r1, sl
 8003b0c:	00ca      	lsls	r2, r1, #3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	4619      	mov	r1, r3
 8003b12:	4603      	mov	r3, r0
 8003b14:	4642      	mov	r2, r8
 8003b16:	189b      	adds	r3, r3, r2
 8003b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b1c:	464b      	mov	r3, r9
 8003b1e:	460a      	mov	r2, r1
 8003b20:	eb42 0303 	adc.w	r3, r2, r3
 8003b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	18db      	adds	r3, r3, r3
 8003b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b42:	4613      	mov	r3, r2
 8003b44:	eb42 0303 	adc.w	r3, r2, r3
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b52:	f7fc fb9d 	bl	8000290 <__aeabi_uldivmod>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <UART_SetConfig+0x2d4>)
 8003b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	2164      	movs	r1, #100	; 0x64
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	3332      	adds	r3, #50	; 0x32
 8003b6e:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <UART_SetConfig+0x2d4>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	095b      	lsrs	r3, r3, #5
 8003b76:	f003 0207 	and.w	r2, r3, #7
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4422      	add	r2, r4
 8003b82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b84:	e106      	b.n	8003d94 <UART_SetConfig+0x4d8>
 8003b86:	bf00      	nop
 8003b88:	40011000 	.word	0x40011000
 8003b8c:	40011400 	.word	0x40011400
 8003b90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ba2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ba6:	4642      	mov	r2, r8
 8003ba8:	464b      	mov	r3, r9
 8003baa:	1891      	adds	r1, r2, r2
 8003bac:	6239      	str	r1, [r7, #32]
 8003bae:	415b      	adcs	r3, r3
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bb6:	4641      	mov	r1, r8
 8003bb8:	1854      	adds	r4, r2, r1
 8003bba:	4649      	mov	r1, r9
 8003bbc:	eb43 0501 	adc.w	r5, r3, r1
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	00eb      	lsls	r3, r5, #3
 8003bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bce:	00e2      	lsls	r2, r4, #3
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	18e3      	adds	r3, r4, r3
 8003bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bdc:	464b      	mov	r3, r9
 8003bde:	eb45 0303 	adc.w	r3, r5, r3
 8003be2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c02:	4629      	mov	r1, r5
 8003c04:	008b      	lsls	r3, r1, #2
 8003c06:	4621      	mov	r1, r4
 8003c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	008a      	lsls	r2, r1, #2
 8003c10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c14:	f7fc fb3c 	bl	8000290 <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4b60      	ldr	r3, [pc, #384]	; (8003da0 <UART_SetConfig+0x4e4>)
 8003c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	011c      	lsls	r4, r3, #4
 8003c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c38:	4642      	mov	r2, r8
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	1891      	adds	r1, r2, r2
 8003c3e:	61b9      	str	r1, [r7, #24]
 8003c40:	415b      	adcs	r3, r3
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c48:	4641      	mov	r1, r8
 8003c4a:	1851      	adds	r1, r2, r1
 8003c4c:	6139      	str	r1, [r7, #16]
 8003c4e:	4649      	mov	r1, r9
 8003c50:	414b      	adcs	r3, r1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c60:	4659      	mov	r1, fp
 8003c62:	00cb      	lsls	r3, r1, #3
 8003c64:	4651      	mov	r1, sl
 8003c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c6a:	4651      	mov	r1, sl
 8003c6c:	00ca      	lsls	r2, r1, #3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	4603      	mov	r3, r0
 8003c74:	4642      	mov	r2, r8
 8003c76:	189b      	adds	r3, r3, r2
 8003c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c7c:	464b      	mov	r3, r9
 8003c7e:	460a      	mov	r2, r1
 8003c80:	eb42 0303 	adc.w	r3, r2, r3
 8003c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	008b      	lsls	r3, r1, #2
 8003ca4:	4641      	mov	r1, r8
 8003ca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003caa:	4641      	mov	r1, r8
 8003cac:	008a      	lsls	r2, r1, #2
 8003cae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cb2:	f7fc faed 	bl	8000290 <__aeabi_uldivmod>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4b38      	ldr	r3, [pc, #224]	; (8003da0 <UART_SetConfig+0x4e4>)
 8003cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	2264      	movs	r2, #100	; 0x64
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	1acb      	subs	r3, r1, r3
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	3332      	adds	r3, #50	; 0x32
 8003cd0:	4a33      	ldr	r2, [pc, #204]	; (8003da0 <UART_SetConfig+0x4e4>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cdc:	441c      	add	r4, r3
 8003cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	673b      	str	r3, [r7, #112]	; 0x70
 8003ce6:	677a      	str	r2, [r7, #116]	; 0x74
 8003ce8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cec:	4642      	mov	r2, r8
 8003cee:	464b      	mov	r3, r9
 8003cf0:	1891      	adds	r1, r2, r2
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	415b      	adcs	r3, r3
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	1851      	adds	r1, r2, r1
 8003d00:	6039      	str	r1, [r7, #0]
 8003d02:	4649      	mov	r1, r9
 8003d04:	414b      	adcs	r3, r1
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d14:	4659      	mov	r1, fp
 8003d16:	00cb      	lsls	r3, r1, #3
 8003d18:	4651      	mov	r1, sl
 8003d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d1e:	4651      	mov	r1, sl
 8003d20:	00ca      	lsls	r2, r1, #3
 8003d22:	4610      	mov	r0, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	4642      	mov	r2, r8
 8003d2a:	189b      	adds	r3, r3, r2
 8003d2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d2e:	464b      	mov	r3, r9
 8003d30:	460a      	mov	r2, r1
 8003d32:	eb42 0303 	adc.w	r3, r2, r3
 8003d36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	663b      	str	r3, [r7, #96]	; 0x60
 8003d42:	667a      	str	r2, [r7, #100]	; 0x64
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d50:	4649      	mov	r1, r9
 8003d52:	008b      	lsls	r3, r1, #2
 8003d54:	4641      	mov	r1, r8
 8003d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	008a      	lsls	r2, r1, #2
 8003d5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d62:	f7fc fa95 	bl	8000290 <__aeabi_uldivmod>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <UART_SetConfig+0x4e4>)
 8003d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	2164      	movs	r1, #100	; 0x64
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	3332      	adds	r3, #50	; 0x32
 8003d7e:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <UART_SetConfig+0x4e4>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	f003 020f 	and.w	r2, r3, #15
 8003d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4422      	add	r2, r4
 8003d92:	609a      	str	r2, [r3, #8]
}
 8003d94:	bf00      	nop
 8003d96:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da0:	51eb851f 	.word	0x51eb851f

08003da4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003da4:	b084      	sub	sp, #16
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	f107 001c 	add.w	r0, r7, #28
 8003db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d122      	bne.n	8003e02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d105      	bne.n	8003df6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f001 fbee 	bl	80055d8 <USB_CoreReset>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	73fb      	strb	r3, [r7, #15]
 8003e00:	e01a      	b.n	8003e38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f001 fbe2 	bl	80055d8 <USB_CoreReset>
 8003e14:	4603      	mov	r3, r0
 8003e16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
 8003e2a:	e005      	b.n	8003e38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d10b      	bne.n	8003e56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f043 0206 	orr.w	r2, r3, #6
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e62:	b004      	add	sp, #16
 8003e64:	4770      	bx	lr
	...

08003e68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	4613      	mov	r3, r2
 8003e74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d165      	bne.n	8003f48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4a41      	ldr	r2, [pc, #260]	; (8003f84 <USB_SetTurnaroundTime+0x11c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d906      	bls.n	8003e92 <USB_SetTurnaroundTime+0x2a>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4a40      	ldr	r2, [pc, #256]	; (8003f88 <USB_SetTurnaroundTime+0x120>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d202      	bcs.n	8003e92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e8c:	230f      	movs	r3, #15
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e062      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4a3c      	ldr	r2, [pc, #240]	; (8003f88 <USB_SetTurnaroundTime+0x120>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d306      	bcc.n	8003ea8 <USB_SetTurnaroundTime+0x40>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4a3b      	ldr	r2, [pc, #236]	; (8003f8c <USB_SetTurnaroundTime+0x124>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d202      	bcs.n	8003ea8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ea2:	230e      	movs	r3, #14
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e057      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4a38      	ldr	r2, [pc, #224]	; (8003f8c <USB_SetTurnaroundTime+0x124>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d306      	bcc.n	8003ebe <USB_SetTurnaroundTime+0x56>
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4a37      	ldr	r2, [pc, #220]	; (8003f90 <USB_SetTurnaroundTime+0x128>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d202      	bcs.n	8003ebe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003eb8:	230d      	movs	r3, #13
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e04c      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4a33      	ldr	r2, [pc, #204]	; (8003f90 <USB_SetTurnaroundTime+0x128>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d306      	bcc.n	8003ed4 <USB_SetTurnaroundTime+0x6c>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4a32      	ldr	r2, [pc, #200]	; (8003f94 <USB_SetTurnaroundTime+0x12c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d802      	bhi.n	8003ed4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ece:	230c      	movs	r3, #12
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e041      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4a2f      	ldr	r2, [pc, #188]	; (8003f94 <USB_SetTurnaroundTime+0x12c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d906      	bls.n	8003eea <USB_SetTurnaroundTime+0x82>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4a2e      	ldr	r2, [pc, #184]	; (8003f98 <USB_SetTurnaroundTime+0x130>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d802      	bhi.n	8003eea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ee4:	230b      	movs	r3, #11
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e036      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <USB_SetTurnaroundTime+0x130>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d906      	bls.n	8003f00 <USB_SetTurnaroundTime+0x98>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <USB_SetTurnaroundTime+0x134>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d802      	bhi.n	8003f00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003efa:	230a      	movs	r3, #10
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	e02b      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <USB_SetTurnaroundTime+0x134>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d906      	bls.n	8003f16 <USB_SetTurnaroundTime+0xae>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <USB_SetTurnaroundTime+0x138>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d202      	bcs.n	8003f16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f10:	2309      	movs	r3, #9
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	e020      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4a21      	ldr	r2, [pc, #132]	; (8003fa0 <USB_SetTurnaroundTime+0x138>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d306      	bcc.n	8003f2c <USB_SetTurnaroundTime+0xc4>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4a20      	ldr	r2, [pc, #128]	; (8003fa4 <USB_SetTurnaroundTime+0x13c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d802      	bhi.n	8003f2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f26:	2308      	movs	r3, #8
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	e015      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <USB_SetTurnaroundTime+0x13c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d906      	bls.n	8003f42 <USB_SetTurnaroundTime+0xda>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <USB_SetTurnaroundTime+0x140>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d202      	bcs.n	8003f42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003f3c:	2307      	movs	r3, #7
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e00a      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003f42:	2306      	movs	r3, #6
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	e007      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003f4e:	2309      	movs	r3, #9
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e001      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f54:	2309      	movs	r3, #9
 8003f56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	029b      	lsls	r3, r3, #10
 8003f6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f70:	431a      	orrs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	371c      	adds	r7, #28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	00d8acbf 	.word	0x00d8acbf
 8003f88:	00e4e1c0 	.word	0x00e4e1c0
 8003f8c:	00f42400 	.word	0x00f42400
 8003f90:	01067380 	.word	0x01067380
 8003f94:	011a499f 	.word	0x011a499f
 8003f98:	01312cff 	.word	0x01312cff
 8003f9c:	014ca43f 	.word	0x014ca43f
 8003fa0:	016e3600 	.word	0x016e3600
 8003fa4:	01a6ab1f 	.word	0x01a6ab1f
 8003fa8:	01e84800 	.word	0x01e84800

08003fac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f043 0201 	orr.w	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f023 0201 	bic.w	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d115      	bne.n	800403e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800401e:	2001      	movs	r0, #1
 8004020:	f7fc fec6 	bl	8000db0 <HAL_Delay>
      ms++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3301      	adds	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f001 fa45 	bl	80054ba <USB_GetMode>
 8004030:	4603      	mov	r3, r0
 8004032:	2b01      	cmp	r3, #1
 8004034:	d01e      	beq.n	8004074 <USB_SetCurrentMode+0x84>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b31      	cmp	r3, #49	; 0x31
 800403a:	d9f0      	bls.n	800401e <USB_SetCurrentMode+0x2e>
 800403c:	e01a      	b.n	8004074 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d115      	bne.n	8004070 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004050:	2001      	movs	r0, #1
 8004052:	f7fc fead 	bl	8000db0 <HAL_Delay>
      ms++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3301      	adds	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f001 fa2c 	bl	80054ba <USB_GetMode>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <USB_SetCurrentMode+0x84>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b31      	cmp	r3, #49	; 0x31
 800406c:	d9f0      	bls.n	8004050 <USB_SetCurrentMode+0x60>
 800406e:	e001      	b.n	8004074 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e005      	b.n	8004080 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b32      	cmp	r3, #50	; 0x32
 8004078:	d101      	bne.n	800407e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004088:	b084      	sub	sp, #16
 800408a:	b580      	push	{r7, lr}
 800408c:	b086      	sub	sp, #24
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	e009      	b.n	80040bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	3340      	adds	r3, #64	; 0x40
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	2200      	movs	r2, #0
 80040b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3301      	adds	r3, #1
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b0e      	cmp	r3, #14
 80040c0:	d9f2      	bls.n	80040a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80040c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d11c      	bne.n	8004102 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d6:	f043 0302 	orr.w	r3, r3, #2
 80040da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38
 8004100:	e00b      	b.n	800411a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004120:	461a      	mov	r2, r3
 8004122:	2300      	movs	r3, #0
 8004124:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412c:	4619      	mov	r1, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004134:	461a      	mov	r2, r3
 8004136:	680b      	ldr	r3, [r1, #0]
 8004138:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	2b01      	cmp	r3, #1
 800413e:	d10c      	bne.n	800415a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d104      	bne.n	8004150 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004146:	2100      	movs	r1, #0
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f965 	bl	8004418 <USB_SetDevSpeed>
 800414e:	e008      	b.n	8004162 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004150:	2101      	movs	r1, #1
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f960 	bl	8004418 <USB_SetDevSpeed>
 8004158:	e003      	b.n	8004162 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800415a:	2103      	movs	r1, #3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f95b 	bl	8004418 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004162:	2110      	movs	r1, #16
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f8f3 	bl	8004350 <USB_FlushTxFifo>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f91f 	bl	80043b8 <USB_FlushRxFifo>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418a:	461a      	mov	r2, r3
 800418c:	2300      	movs	r3, #0
 800418e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004196:	461a      	mov	r2, r3
 8004198:	2300      	movs	r3, #0
 800419a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	461a      	mov	r2, r3
 80041a4:	2300      	movs	r3, #0
 80041a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	e043      	b.n	8004236 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041c4:	d118      	bne.n	80041f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	461a      	mov	r2, r3
 80041da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	e013      	b.n	800420a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ee:	461a      	mov	r2, r3
 80041f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e008      	b.n	800420a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004204:	461a      	mov	r2, r3
 8004206:	2300      	movs	r3, #0
 8004208:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004216:	461a      	mov	r2, r3
 8004218:	2300      	movs	r3, #0
 800421a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004228:	461a      	mov	r2, r3
 800422a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800422e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	3301      	adds	r3, #1
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	429a      	cmp	r2, r3
 800423c:	d3b7      	bcc.n	80041ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	e043      	b.n	80042cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800425a:	d118      	bne.n	800428e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426e:	461a      	mov	r2, r3
 8004270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e013      	b.n	80042a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004284:	461a      	mov	r2, r3
 8004286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	e008      	b.n	80042a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429a:	461a      	mov	r2, r3
 800429c:	2300      	movs	r3, #0
 800429e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ac:	461a      	mov	r2, r3
 80042ae:	2300      	movs	r3, #0
 80042b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042be:	461a      	mov	r2, r3
 80042c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	3301      	adds	r3, #1
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d3b7      	bcc.n	8004244 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80042f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f043 0210 	orr.w	r2, r3, #16
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	4b0f      	ldr	r3, [pc, #60]	; (800434c <USB_DevInit+0x2c4>)
 800430e:	4313      	orrs	r3, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f043 0208 	orr.w	r2, r3, #8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d107      	bne.n	800433c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004334:	f043 0304 	orr.w	r3, r3, #4
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800433c:	7dfb      	ldrb	r3, [r7, #23]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004348:	b004      	add	sp, #16
 800434a:	4770      	bx	lr
 800434c:	803c3800 	.word	0x803c3800

08004350 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3301      	adds	r3, #1
 8004362:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <USB_FlushTxFifo+0x64>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e01b      	b.n	80043a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	daf2      	bge.n	800435e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	019b      	lsls	r3, r3, #6
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3301      	adds	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <USB_FlushTxFifo+0x64>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e006      	b.n	80043a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d0f0      	beq.n	8004388 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	00030d40 	.word	0x00030d40

080043b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3301      	adds	r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4a11      	ldr	r2, [pc, #68]	; (8004414 <USB_FlushRxFifo+0x5c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e018      	b.n	8004408 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	daf2      	bge.n	80043c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2210      	movs	r2, #16
 80043e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3301      	adds	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a08      	ldr	r2, [pc, #32]	; (8004414 <USB_FlushRxFifo+0x5c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e006      	b.n	8004408 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b10      	cmp	r3, #16
 8004404:	d0f0      	beq.n	80043e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	00030d40 	.word	0x00030d40

08004418 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	68f9      	ldr	r1, [r7, #12]
 8004434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800444a:	b480      	push	{r7}
 800444c:	b087      	sub	sp, #28
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 0306 	and.w	r3, r3, #6
 8004462:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800446a:	2300      	movs	r3, #0
 800446c:	75fb      	strb	r3, [r7, #23]
 800446e:	e00a      	b.n	8004486 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d002      	beq.n	800447c <USB_GetDevSpeed+0x32>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b06      	cmp	r3, #6
 800447a:	d102      	bne.n	8004482 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800447c:	2302      	movs	r3, #2
 800447e:	75fb      	strb	r3, [r7, #23]
 8004480:	e001      	b.n	8004486 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004482:	230f      	movs	r3, #15
 8004484:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004486:	7dfb      	ldrb	r3, [r7, #23]
}
 8004488:	4618      	mov	r0, r3
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	785b      	ldrb	r3, [r3, #1]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d13a      	bne.n	8004526 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	2101      	movs	r1, #1
 80044c2:	fa01 f303 	lsl.w	r3, r1, r3
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	68f9      	ldr	r1, [r7, #12]
 80044ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d155      	bne.n	8004594 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	791b      	ldrb	r3, [r3, #4]
 8004502:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004504:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	059b      	lsls	r3, r3, #22
 800450a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800450c:	4313      	orrs	r3, r2
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	e036      	b.n	8004594 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452c:	69da      	ldr	r2, [r3, #28]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	2101      	movs	r1, #1
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	041b      	lsls	r3, r3, #16
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004544:	4313      	orrs	r3, r2
 8004546:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d11a      	bne.n	8004594 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	791b      	ldrb	r3, [r3, #4]
 8004578:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800457a:	430b      	orrs	r3, r1
 800457c:	4313      	orrs	r3, r2
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004592:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d161      	bne.n	8004684 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d6:	d11f      	bne.n	8004618 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	0151      	lsls	r1, r2, #5
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	440a      	add	r2, r1
 80045ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004612:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004616:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	2101      	movs	r1, #1
 800462a:	fa01 f303 	lsl.w	r3, r1, r3
 800462e:	b29b      	uxth	r3, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	68f9      	ldr	r1, [r7, #12]
 8004634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004638:	4013      	ands	r3, r2
 800463a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	2101      	movs	r1, #1
 800464e:	fa01 f303 	lsl.w	r3, r1, r3
 8004652:	b29b      	uxth	r3, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800465c:	4013      	ands	r3, r2
 800465e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	0159      	lsls	r1, r3, #5
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	440b      	add	r3, r1
 8004676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467a:	4619      	mov	r1, r3
 800467c:	4b35      	ldr	r3, [pc, #212]	; (8004754 <USB_DeactivateEndpoint+0x1b0>)
 800467e:	4013      	ands	r3, r2
 8004680:	600b      	str	r3, [r1, #0]
 8004682:	e060      	b.n	8004746 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800469a:	d11f      	bne.n	80046dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	0151      	lsls	r1, r2, #5
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	440a      	add	r2, r1
 80046d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	2101      	movs	r1, #1
 80046ee:	fa01 f303 	lsl.w	r3, r1, r3
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	43db      	mvns	r3, r3
 80046f6:	68f9      	ldr	r1, [r7, #12]
 80046f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046fc:	4013      	ands	r3, r2
 80046fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	69da      	ldr	r2, [r3, #28]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	2101      	movs	r1, #1
 8004712:	fa01 f303 	lsl.w	r3, r1, r3
 8004716:	041b      	lsls	r3, r3, #16
 8004718:	43db      	mvns	r3, r3
 800471a:	68f9      	ldr	r1, [r7, #12]
 800471c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004720:	4013      	ands	r3, r2
 8004722:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	0159      	lsls	r1, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	440b      	add	r3, r1
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	4619      	mov	r1, r3
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <USB_DeactivateEndpoint+0x1b4>)
 8004742:	4013      	ands	r3, r2
 8004744:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	ec337800 	.word	0xec337800
 8004758:	eff37800 	.word	0xeff37800

0800475c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	; 0x28
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	785b      	ldrb	r3, [r3, #1]
 8004778:	2b01      	cmp	r3, #1
 800477a:	f040 815c 	bne.w	8004a36 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d132      	bne.n	80047ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	0151      	lsls	r1, r2, #5
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	440a      	add	r2, r1
 800479c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	0151      	lsls	r1, r2, #5
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	440a      	add	r2, r1
 80047c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	0151      	lsls	r1, r2, #5
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	440a      	add	r2, r1
 80047e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e4:	0cdb      	lsrs	r3, r3, #19
 80047e6:	04db      	lsls	r3, r3, #19
 80047e8:	6113      	str	r3, [r2, #16]
 80047ea:	e074      	b.n	80048d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	440a      	add	r2, r1
 8004802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004806:	0cdb      	lsrs	r3, r3, #19
 8004808:	04db      	lsls	r3, r3, #19
 800480a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	440a      	add	r2, r1
 8004822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004826:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800482a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800482e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6999      	ldr	r1, [r3, #24]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	440b      	add	r3, r1
 8004848:	1e59      	subs	r1, r3, #1
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004852:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004854:	4b9d      	ldr	r3, [pc, #628]	; (8004acc <USB_EPStartXfer+0x370>)
 8004856:	400b      	ands	r3, r1
 8004858:	69b9      	ldr	r1, [r7, #24]
 800485a:	0148      	lsls	r0, r1, #5
 800485c:	69f9      	ldr	r1, [r7, #28]
 800485e:	4401      	add	r1, r0
 8004860:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004864:	4313      	orrs	r3, r2
 8004866:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800487e:	69b9      	ldr	r1, [r7, #24]
 8004880:	0148      	lsls	r0, r1, #5
 8004882:	69f9      	ldr	r1, [r7, #28]
 8004884:	4401      	add	r1, r0
 8004886:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800488a:	4313      	orrs	r3, r2
 800488c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	791b      	ldrb	r3, [r3, #4]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d11f      	bne.n	80048d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80048b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d14b      	bne.n	8004974 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d009      	beq.n	80048f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f0:	461a      	mov	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	791b      	ldrb	r3, [r3, #4]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d128      	bne.n	8004952 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d110      	bne.n	8004932 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	440a      	add	r2, r1
 8004926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	e00f      	b.n	8004952 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	0151      	lsls	r1, r2, #5
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	440a      	add	r2, r1
 8004948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004950:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	e133      	b.n	8004bdc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004992:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	791b      	ldrb	r3, [r3, #4]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d015      	beq.n	80049c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 811b 	beq.w	8004bdc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	2101      	movs	r1, #1
 80049b8:	fa01 f303 	lsl.w	r3, r1, r3
 80049bc:	69f9      	ldr	r1, [r7, #28]
 80049be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049c2:	4313      	orrs	r3, r2
 80049c4:	634b      	str	r3, [r1, #52]	; 0x34
 80049c6:	e109      	b.n	8004bdc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d110      	bne.n	80049fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	0151      	lsls	r1, r2, #5
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	440a      	add	r2, r1
 80049ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	e00f      	b.n	8004a1a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6919      	ldr	r1, [r3, #16]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	781a      	ldrb	r2, [r3, #0]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	b298      	uxth	r0, r3
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fade 	bl	8004ff0 <USB_WritePacket>
 8004a34:	e0d2      	b.n	8004bdc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	0151      	lsls	r1, r2, #5
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	440a      	add	r2, r1
 8004a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a50:	0cdb      	lsrs	r3, r3, #19
 8004a52:	04db      	lsls	r3, r3, #19
 8004a54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d126      	bne.n	8004ad0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a98:	69b9      	ldr	r1, [r7, #24]
 8004a9a:	0148      	lsls	r0, r1, #5
 8004a9c:	69f9      	ldr	r1, [r7, #28]
 8004a9e:	4401      	add	r1, r0
 8004aa0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	0151      	lsls	r1, r2, #5
 8004aba:	69fa      	ldr	r2, [r7, #28]
 8004abc:	440a      	add	r2, r1
 8004abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ac6:	6113      	str	r3, [r2, #16]
 8004ac8:	e03a      	b.n	8004b40 <USB_EPStartXfer+0x3e4>
 8004aca:	bf00      	nop
 8004acc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	699a      	ldr	r2, [r3, #24]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	1e5a      	subs	r2, r3, #1
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	8afa      	ldrh	r2, [r7, #22]
 8004aec:	fb03 f202 	mul.w	r2, r3, r2
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	8afb      	ldrh	r3, [r7, #22]
 8004b04:	04d9      	lsls	r1, r3, #19
 8004b06:	4b38      	ldr	r3, [pc, #224]	; (8004be8 <USB_EPStartXfer+0x48c>)
 8004b08:	400b      	ands	r3, r1
 8004b0a:	69b9      	ldr	r1, [r7, #24]
 8004b0c:	0148      	lsls	r0, r1, #5
 8004b0e:	69f9      	ldr	r1, [r7, #28]
 8004b10:	4401      	add	r1, r0
 8004b12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b16:	4313      	orrs	r3, r2
 8004b18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b30:	69b9      	ldr	r1, [r7, #24]
 8004b32:	0148      	lsls	r0, r1, #5
 8004b34:	69f9      	ldr	r1, [r7, #28]
 8004b36:	4401      	add	r1, r0
 8004b38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d10d      	bne.n	8004b62 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	6919      	ldr	r1, [r3, #16]
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5e:	460a      	mov	r2, r1
 8004b60:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	791b      	ldrb	r3, [r3, #4]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d128      	bne.n	8004bbc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d110      	bne.n	8004b9c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e00f      	b.n	8004bbc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3720      	adds	r7, #32
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	1ff80000 	.word	0x1ff80000

08004bec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	785b      	ldrb	r3, [r3, #1]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	f040 80ce 	bne.w	8004daa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d132      	bne.n	8004c7c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	0151      	lsls	r1, r2, #5
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	0151      	lsls	r1, r2, #5
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	440a      	add	r2, r1
 8004c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c74:	0cdb      	lsrs	r3, r3, #19
 8004c76:	04db      	lsls	r3, r3, #19
 8004c78:	6113      	str	r3, [r2, #16]
 8004c7a:	e04e      	b.n	8004d1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c96:	0cdb      	lsrs	r3, r3, #19
 8004c98:	04db      	lsls	r3, r3, #19
 8004c9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	0151      	lsls	r1, r2, #5
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	440a      	add	r2, r1
 8004cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cbe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	699a      	ldr	r2, [r3, #24]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d903      	bls.n	8004cd4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d0a:	6939      	ldr	r1, [r7, #16]
 8004d0c:	0148      	lsls	r0, r1, #5
 8004d0e:	6979      	ldr	r1, [r7, #20]
 8004d10:	4401      	add	r1, r0
 8004d12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d16:	4313      	orrs	r3, r2
 8004d18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d11e      	bne.n	8004d5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d009      	beq.n	8004d3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d34:	461a      	mov	r2, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	e097      	b.n	8004e8e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 8083 	beq.w	8004e8e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	2101      	movs	r1, #1
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	6979      	ldr	r1, [r7, #20]
 8004da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da4:	4313      	orrs	r3, r2
 8004da6:	634b      	str	r3, [r1, #52]	; 0x34
 8004da8:	e071      	b.n	8004e8e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc4:	0cdb      	lsrs	r3, r3, #19
 8004dc6:	04db      	lsls	r3, r3, #19
 8004dc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004de8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	0151      	lsls	r1, r2, #5
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	440a      	add	r2, r1
 8004e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e3c:	6939      	ldr	r1, [r7, #16]
 8004e3e:	0148      	lsls	r0, r1, #5
 8004e40:	6979      	ldr	r1, [r7, #20]
 8004e42:	4401      	add	r1, r0
 8004e44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d10d      	bne.n	8004e6e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	6919      	ldr	r1, [r3, #16]
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	785b      	ldrb	r3, [r3, #1]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d14a      	bne.n	8004f50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed2:	f040 8086 	bne.w	8004fe2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	7812      	ldrb	r2, [r2, #0]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ef8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	7812      	ldrb	r2, [r2, #0]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d902      	bls.n	8004f34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	75fb      	strb	r3, [r7, #23]
          break;
 8004f32:	e056      	b.n	8004fe2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f4c:	d0e7      	beq.n	8004f1e <USB_EPStopXfer+0x82>
 8004f4e:	e048      	b.n	8004fe2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f68:	d13b      	bne.n	8004fe2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	7812      	ldrb	r2, [r2, #0]
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	7812      	ldrb	r2, [r2, #0]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d902      	bls.n	8004fc8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8004fc6:	e00c      	b.n	8004fe2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fe0:	d0e7      	beq.n	8004fb2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b089      	sub	sp, #36	; 0x24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	460b      	mov	r3, r1
 8005000:	71fb      	strb	r3, [r7, #7]
 8005002:	4613      	mov	r3, r2
 8005004:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800500e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005012:	2b00      	cmp	r3, #0
 8005014:	d123      	bne.n	800505e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005016:	88bb      	ldrh	r3, [r7, #4]
 8005018:	3303      	adds	r3, #3
 800501a:	089b      	lsrs	r3, r3, #2
 800501c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	e018      	b.n	8005056 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	031a      	lsls	r2, r3, #12
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005030:	461a      	mov	r2, r3
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	3301      	adds	r3, #1
 800503c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3301      	adds	r3, #1
 8005042:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	3301      	adds	r3, #1
 8005048:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	3301      	adds	r3, #1
 800504e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	3301      	adds	r3, #1
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	429a      	cmp	r2, r3
 800505c:	d3e2      	bcc.n	8005024 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3724      	adds	r7, #36	; 0x24
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800506c:	b480      	push	{r7}
 800506e:	b08b      	sub	sp, #44	; 0x2c
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	b29b      	uxth	r3, r3
 8005088:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005092:	2300      	movs	r3, #0
 8005094:	623b      	str	r3, [r7, #32]
 8005096:	e014      	b.n	80050c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	3301      	adds	r3, #1
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	3301      	adds	r3, #1
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	3301      	adds	r3, #1
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	3301      	adds	r3, #1
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	3301      	adds	r3, #1
 80050c0:	623b      	str	r3, [r7, #32]
 80050c2:	6a3a      	ldr	r2, [r7, #32]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d3e6      	bcc.n	8005098 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050ca:	8bfb      	ldrh	r3, [r7, #30]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01e      	beq.n	800510e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050da:	461a      	mov	r2, r3
 80050dc:	f107 0310 	add.w	r3, r7, #16
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	701a      	strb	r2, [r3, #0]
      i++;
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	3301      	adds	r3, #1
 80050fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	3301      	adds	r3, #1
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005102:	8bfb      	ldrh	r3, [r7, #30]
 8005104:	3b01      	subs	r3, #1
 8005106:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005108:	8bfb      	ldrh	r3, [r7, #30]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1ea      	bne.n	80050e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005110:	4618      	mov	r0, r3
 8005112:	372c      	adds	r7, #44	; 0x2c
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	785b      	ldrb	r3, [r3, #1]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d12c      	bne.n	8005192 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	db12      	blt.n	8005170 <USB_EPSetStall+0x54>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00f      	beq.n	8005170 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800516e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	e02b      	b.n	80051ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	db12      	blt.n	80051ca <USB_EPSetStall+0xae>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00f      	beq.n	80051ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d128      	bne.n	8005266 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005232:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	791b      	ldrb	r3, [r3, #4]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d003      	beq.n	8005244 <USB_EPClearStall+0x4c>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	791b      	ldrb	r3, [r3, #4]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d138      	bne.n	80052b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	440a      	add	r2, r1
 800525a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	e027      	b.n	80052b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	440a      	add	r2, r1
 800527c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005280:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005284:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	791b      	ldrb	r3, [r3, #4]
 800528a:	2b03      	cmp	r3, #3
 800528c:	d003      	beq.n	8005296 <USB_EPClearStall+0x9e>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	791b      	ldrb	r3, [r3, #4]
 8005292:	2b02      	cmp	r3, #2
 8005294:	d10f      	bne.n	80052b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800533e:	f023 0302 	bic.w	r3, r3, #2
 8005342:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800536c:	f023 0303 	bic.w	r3, r3, #3
 8005370:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005380:	f043 0302 	orr.w	r3, r3, #2
 8005384:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4013      	ands	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053ac:	68fb      	ldr	r3, [r7, #12]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	4013      	ands	r3, r2
 80053dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	0c1b      	lsrs	r3, r3, #16
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	b29b      	uxth	r3, r3
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	460b      	mov	r3, r1
 800542c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005432:	78fb      	ldrb	r3, [r7, #3]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4013      	ands	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005450:	68bb      	ldr	r3, [r7, #8]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800545e:	b480      	push	{r7}
 8005460:	b087      	sub	sp, #28
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	460b      	mov	r3, r1
 8005468:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005480:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	fa22 f303 	lsr.w	r3, r2, r3
 800548e:	01db      	lsls	r3, r3, #7
 8005490:	b2db      	uxtb	r3, r3
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4013      	ands	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054ac:	68bb      	ldr	r3, [r7, #8]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0301 	and.w	r3, r3, #1
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80054f4:	f023 0307 	bic.w	r3, r3, #7
 80054f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	460b      	mov	r3, r1
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	333c      	adds	r3, #60	; 0x3c
 8005532:	3304      	adds	r3, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4a26      	ldr	r2, [pc, #152]	; (80055d4 <USB_EP0_OutStart+0xb8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d90a      	bls.n	8005556 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800554c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005550:	d101      	bne.n	8005556 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e037      	b.n	80055c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	461a      	mov	r2, r3
 800555e:	2300      	movs	r3, #0
 8005560:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005574:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005584:	f043 0318 	orr.w	r3, r3, #24
 8005588:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005598:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800559c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800559e:	7afb      	ldrb	r3, [r7, #11]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d10f      	bne.n	80055c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80055c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	4f54300a 	.word	0x4f54300a

080055d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3301      	adds	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4a13      	ldr	r2, [pc, #76]	; (800563c <USB_CoreReset+0x64>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d901      	bls.n	80055f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e01b      	b.n	800562e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	daf2      	bge.n	80055e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f043 0201 	orr.w	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3301      	adds	r3, #1
 8005612:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <USB_CoreReset+0x64>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d901      	bls.n	8005620 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e006      	b.n	800562e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b01      	cmp	r3, #1
 800562a:	d0f0      	beq.n	800560e <USB_CoreReset+0x36>

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	00030d40 	.word	0x00030d40

08005640 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800564c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005650:	f002 fca2 	bl	8007f98 <USBD_static_malloc>
 8005654:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d109      	bne.n	8005670 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	32b0      	adds	r2, #176	; 0xb0
 8005666:	2100      	movs	r1, #0
 8005668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800566c:	2302      	movs	r3, #2
 800566e:	e0d4      	b.n	800581a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005670:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005674:	2100      	movs	r1, #0
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f002 fcf2 	bl	8008060 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	32b0      	adds	r2, #176	; 0xb0
 8005686:	68f9      	ldr	r1, [r7, #12]
 8005688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	32b0      	adds	r2, #176	; 0xb0
 8005696:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	7c1b      	ldrb	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d138      	bne.n	800571a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80056a8:	4b5e      	ldr	r3, [pc, #376]	; (8005824 <USBD_CDC_Init+0x1e4>)
 80056aa:	7819      	ldrb	r1, [r3, #0]
 80056ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056b0:	2202      	movs	r2, #2
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f002 fb4d 	bl	8007d52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80056b8:	4b5a      	ldr	r3, [pc, #360]	; (8005824 <USBD_CDC_Init+0x1e4>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	f003 020f 	and.w	r2, r3, #15
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	440b      	add	r3, r1
 80056cc:	3324      	adds	r3, #36	; 0x24
 80056ce:	2201      	movs	r2, #1
 80056d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80056d2:	4b55      	ldr	r3, [pc, #340]	; (8005828 <USBD_CDC_Init+0x1e8>)
 80056d4:	7819      	ldrb	r1, [r3, #0]
 80056d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056da:	2202      	movs	r2, #2
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f002 fb38 	bl	8007d52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80056e2:	4b51      	ldr	r3, [pc, #324]	; (8005828 <USBD_CDC_Init+0x1e8>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f003 020f 	and.w	r2, r3, #15
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80056fa:	2201      	movs	r2, #1
 80056fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80056fe:	4b4b      	ldr	r3, [pc, #300]	; (800582c <USBD_CDC_Init+0x1ec>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	f003 020f 	and.w	r2, r3, #15
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	3326      	adds	r3, #38	; 0x26
 8005714:	2210      	movs	r2, #16
 8005716:	801a      	strh	r2, [r3, #0]
 8005718:	e035      	b.n	8005786 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800571a:	4b42      	ldr	r3, [pc, #264]	; (8005824 <USBD_CDC_Init+0x1e4>)
 800571c:	7819      	ldrb	r1, [r3, #0]
 800571e:	2340      	movs	r3, #64	; 0x40
 8005720:	2202      	movs	r2, #2
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f002 fb15 	bl	8007d52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005728:	4b3e      	ldr	r3, [pc, #248]	; (8005824 <USBD_CDC_Init+0x1e4>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	f003 020f 	and.w	r2, r3, #15
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	3324      	adds	r3, #36	; 0x24
 800573e:	2201      	movs	r2, #1
 8005740:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005742:	4b39      	ldr	r3, [pc, #228]	; (8005828 <USBD_CDC_Init+0x1e8>)
 8005744:	7819      	ldrb	r1, [r3, #0]
 8005746:	2340      	movs	r3, #64	; 0x40
 8005748:	2202      	movs	r2, #2
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f002 fb01 	bl	8007d52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005750:	4b35      	ldr	r3, [pc, #212]	; (8005828 <USBD_CDC_Init+0x1e8>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	f003 020f 	and.w	r2, r3, #15
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005768:	2201      	movs	r2, #1
 800576a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800576c:	4b2f      	ldr	r3, [pc, #188]	; (800582c <USBD_CDC_Init+0x1ec>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	f003 020f 	and.w	r2, r3, #15
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	3326      	adds	r3, #38	; 0x26
 8005782:	2210      	movs	r2, #16
 8005784:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005786:	4b29      	ldr	r3, [pc, #164]	; (800582c <USBD_CDC_Init+0x1ec>)
 8005788:	7819      	ldrb	r1, [r3, #0]
 800578a:	2308      	movs	r3, #8
 800578c:	2203      	movs	r2, #3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f002 fadf 	bl	8007d52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005794:	4b25      	ldr	r3, [pc, #148]	; (800582c <USBD_CDC_Init+0x1ec>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	f003 020f 	and.w	r2, r3, #15
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	440b      	add	r3, r1
 80057a8:	3324      	adds	r3, #36	; 0x24
 80057aa:	2201      	movs	r2, #1
 80057ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	33b0      	adds	r3, #176	; 0xb0
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80057e4:	2302      	movs	r3, #2
 80057e6:	e018      	b.n	800581a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	7c1b      	ldrb	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057f0:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <USBD_CDC_Init+0x1e8>)
 80057f2:	7819      	ldrb	r1, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f002 fb96 	bl	8007f30 <USBD_LL_PrepareReceive>
 8005804:	e008      	b.n	8005818 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005806:	4b08      	ldr	r3, [pc, #32]	; (8005828 <USBD_CDC_Init+0x1e8>)
 8005808:	7819      	ldrb	r1, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005810:	2340      	movs	r3, #64	; 0x40
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f002 fb8c 	bl	8007f30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000093 	.word	0x20000093
 8005828:	20000094 	.word	0x20000094
 800582c:	20000095 	.word	0x20000095

08005830 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800583c:	4b3a      	ldr	r3, [pc, #232]	; (8005928 <USBD_CDC_DeInit+0xf8>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f002 faab 	bl	8007d9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005848:	4b37      	ldr	r3, [pc, #220]	; (8005928 <USBD_CDC_DeInit+0xf8>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	f003 020f 	and.w	r2, r3, #15
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	440b      	add	r3, r1
 800585c:	3324      	adds	r3, #36	; 0x24
 800585e:	2200      	movs	r2, #0
 8005860:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005862:	4b32      	ldr	r3, [pc, #200]	; (800592c <USBD_CDC_DeInit+0xfc>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f002 fa98 	bl	8007d9e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800586e:	4b2f      	ldr	r3, [pc, #188]	; (800592c <USBD_CDC_DeInit+0xfc>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	f003 020f 	and.w	r2, r3, #15
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005886:	2200      	movs	r2, #0
 8005888:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800588a:	4b29      	ldr	r3, [pc, #164]	; (8005930 <USBD_CDC_DeInit+0x100>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f002 fa84 	bl	8007d9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005896:	4b26      	ldr	r3, [pc, #152]	; (8005930 <USBD_CDC_DeInit+0x100>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	f003 020f 	and.w	r2, r3, #15
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	3324      	adds	r3, #36	; 0x24
 80058ac:	2200      	movs	r2, #0
 80058ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80058b0:	4b1f      	ldr	r3, [pc, #124]	; (8005930 <USBD_CDC_DeInit+0x100>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 020f 	and.w	r2, r3, #15
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	3326      	adds	r3, #38	; 0x26
 80058c6:	2200      	movs	r2, #0
 80058c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	32b0      	adds	r2, #176	; 0xb0
 80058d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01f      	beq.n	800591c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	33b0      	adds	r3, #176	; 0xb0
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	32b0      	adds	r2, #176	; 0xb0
 80058fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058fe:	4618      	mov	r0, r3
 8005900:	f002 fb58 	bl	8007fb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	32b0      	adds	r2, #176	; 0xb0
 800590e:	2100      	movs	r1, #0
 8005910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000093 	.word	0x20000093
 800592c:	20000094 	.word	0x20000094
 8005930:	20000095 	.word	0x20000095

08005934 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	32b0      	adds	r2, #176	; 0xb0
 8005948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005960:	2303      	movs	r3, #3
 8005962:	e0bf      	b.n	8005ae4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800596c:	2b00      	cmp	r3, #0
 800596e:	d050      	beq.n	8005a12 <USBD_CDC_Setup+0xde>
 8005970:	2b20      	cmp	r3, #32
 8005972:	f040 80af 	bne.w	8005ad4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	88db      	ldrh	r3, [r3, #6]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d03a      	beq.n	80059f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	b25b      	sxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	da1b      	bge.n	80059c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	33b0      	adds	r3, #176	; 0xb0
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800599e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	88d2      	ldrh	r2, [r2, #6]
 80059a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	88db      	ldrh	r3, [r3, #6]
 80059aa:	2b07      	cmp	r3, #7
 80059ac:	bf28      	it	cs
 80059ae:	2307      	movcs	r3, #7
 80059b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	89fa      	ldrh	r2, [r7, #14]
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 fd89 	bl	80074d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80059be:	e090      	b.n	8005ae2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	785a      	ldrb	r2, [r3, #1]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	88db      	ldrh	r3, [r3, #6]
 80059ce:	2b3f      	cmp	r3, #63	; 0x3f
 80059d0:	d803      	bhi.n	80059da <USBD_CDC_Setup+0xa6>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	88db      	ldrh	r3, [r3, #6]
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	e000      	b.n	80059dc <USBD_CDC_Setup+0xa8>
 80059da:	2240      	movs	r2, #64	; 0x40
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80059e2:	6939      	ldr	r1, [r7, #16]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80059ea:	461a      	mov	r2, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 fd9b 	bl	8007528 <USBD_CtlPrepareRx>
      break;
 80059f2:	e076      	b.n	8005ae2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	33b0      	adds	r3, #176	; 0xb0
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	7850      	ldrb	r0, [r2, #1]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	4798      	blx	r3
      break;
 8005a10:	e067      	b.n	8005ae2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	2b0b      	cmp	r3, #11
 8005a18:	d851      	bhi.n	8005abe <USBD_CDC_Setup+0x18a>
 8005a1a:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <USBD_CDC_Setup+0xec>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a51 	.word	0x08005a51
 8005a24:	08005acd 	.word	0x08005acd
 8005a28:	08005abf 	.word	0x08005abf
 8005a2c:	08005abf 	.word	0x08005abf
 8005a30:	08005abf 	.word	0x08005abf
 8005a34:	08005abf 	.word	0x08005abf
 8005a38:	08005abf 	.word	0x08005abf
 8005a3c:	08005abf 	.word	0x08005abf
 8005a40:	08005abf 	.word	0x08005abf
 8005a44:	08005abf 	.word	0x08005abf
 8005a48:	08005a7b 	.word	0x08005a7b
 8005a4c:	08005aa5 	.word	0x08005aa5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d107      	bne.n	8005a6c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a5c:	f107 030a 	add.w	r3, r7, #10
 8005a60:	2202      	movs	r2, #2
 8005a62:	4619      	mov	r1, r3
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 fd33 	bl	80074d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a6a:	e032      	b.n	8005ad2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a6c:	6839      	ldr	r1, [r7, #0]
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f001 fcbd 	bl	80073ee <USBD_CtlError>
            ret = USBD_FAIL;
 8005a74:	2303      	movs	r3, #3
 8005a76:	75fb      	strb	r3, [r7, #23]
          break;
 8005a78:	e02b      	b.n	8005ad2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d107      	bne.n	8005a96 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a86:	f107 030d 	add.w	r3, r7, #13
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f001 fd1e 	bl	80074d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a94:	e01d      	b.n	8005ad2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 fca8 	bl	80073ee <USBD_CtlError>
            ret = USBD_FAIL;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8005aa2:	e016      	b.n	8005ad2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d00f      	beq.n	8005ad0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f001 fc9b 	bl	80073ee <USBD_CtlError>
            ret = USBD_FAIL;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005abc:	e008      	b.n	8005ad0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 fc94 	bl	80073ee <USBD_CtlError>
          ret = USBD_FAIL;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	75fb      	strb	r3, [r7, #23]
          break;
 8005aca:	e002      	b.n	8005ad2 <USBD_CDC_Setup+0x19e>
          break;
 8005acc:	bf00      	nop
 8005ace:	e008      	b.n	8005ae2 <USBD_CDC_Setup+0x1ae>
          break;
 8005ad0:	bf00      	nop
      }
      break;
 8005ad2:	e006      	b.n	8005ae2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f001 fc89 	bl	80073ee <USBD_CtlError>
      ret = USBD_FAIL;
 8005adc:	2303      	movs	r3, #3
 8005ade:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae0:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005afe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	32b0      	adds	r2, #176	; 0xb0
 8005b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e065      	b.n	8005be2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	32b0      	adds	r2, #176	; 0xb0
 8005b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	f003 020f 	and.w	r2, r3, #15
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	440b      	add	r3, r1
 8005b38:	3318      	adds	r3, #24
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02f      	beq.n	8005ba0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	f003 020f 	and.w	r2, r3, #15
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	3318      	adds	r3, #24
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	f003 010f 	and.w	r1, r3, #15
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	440b      	add	r3, r1
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4403      	add	r3, r0
 8005b68:	3348      	adds	r3, #72	; 0x48
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d112      	bne.n	8005ba0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	f003 020f 	and.w	r2, r3, #15
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	3318      	adds	r3, #24
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b92:	78f9      	ldrb	r1, [r7, #3]
 8005b94:	2300      	movs	r3, #0
 8005b96:	2200      	movs	r2, #0
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f002 f9a8 	bl	8007eee <USBD_LL_Transmit>
 8005b9e:	e01f      	b.n	8005be0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	33b0      	adds	r3, #176	; 0xb0
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d010      	beq.n	8005be0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	33b0      	adds	r3, #176	; 0xb0
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005bdc:	78fa      	ldrb	r2, [r7, #3]
 8005bde:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	32b0      	adds	r2, #176	; 0xb0
 8005c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	32b0      	adds	r2, #176	; 0xb0
 8005c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e01a      	b.n	8005c52 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f002 f9a6 	bl	8007f72 <USBD_LL_GetRxDataSize>
 8005c26:	4602      	mov	r2, r0
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	33b0      	adds	r3, #176	; 0xb0
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	32b0      	adds	r2, #176	; 0xb0
 8005c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e025      	b.n	8005cc8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	33b0      	adds	r3, #176	; 0xb0
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01a      	beq.n	8005cc6 <USBD_CDC_EP0_RxReady+0x6c>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c96:	2bff      	cmp	r3, #255	; 0xff
 8005c98:	d015      	beq.n	8005cc6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	33b0      	adds	r3, #176	; 0xb0
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005cb2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005cba:	b292      	uxth	r2, r2
 8005cbc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	22ff      	movs	r2, #255	; 0xff
 8005cc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005cd8:	2182      	movs	r1, #130	; 0x82
 8005cda:	4818      	ldr	r0, [pc, #96]	; (8005d3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cdc:	f000 fd4f 	bl	800677e <USBD_GetEpDesc>
 8005ce0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	4815      	ldr	r0, [pc, #84]	; (8005d3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ce6:	f000 fd4a 	bl	800677e <USBD_GetEpDesc>
 8005cea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005cec:	2181      	movs	r1, #129	; 0x81
 8005cee:	4813      	ldr	r0, [pc, #76]	; (8005d3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cf0:	f000 fd45 	bl	800677e <USBD_GetEpDesc>
 8005cf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2210      	movs	r2, #16
 8005d00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d006      	beq.n	8005d16 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d10:	711a      	strb	r2, [r3, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d006      	beq.n	8005d2a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d24:	711a      	strb	r2, [r3, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2243      	movs	r2, #67	; 0x43
 8005d2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d30:	4b02      	ldr	r3, [pc, #8]	; (8005d3c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000050 	.word	0x20000050

08005d40 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d48:	2182      	movs	r1, #130	; 0x82
 8005d4a:	4818      	ldr	r0, [pc, #96]	; (8005dac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d4c:	f000 fd17 	bl	800677e <USBD_GetEpDesc>
 8005d50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d52:	2101      	movs	r1, #1
 8005d54:	4815      	ldr	r0, [pc, #84]	; (8005dac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d56:	f000 fd12 	bl	800677e <USBD_GetEpDesc>
 8005d5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d5c:	2181      	movs	r1, #129	; 0x81
 8005d5e:	4813      	ldr	r0, [pc, #76]	; (8005dac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d60:	f000 fd0d 	bl	800677e <USBD_GetEpDesc>
 8005d64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2210      	movs	r2, #16
 8005d70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d006      	beq.n	8005d86 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	711a      	strb	r2, [r3, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f042 0202 	orr.w	r2, r2, #2
 8005d84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d006      	beq.n	8005d9a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	711a      	strb	r2, [r3, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f042 0202 	orr.w	r2, r2, #2
 8005d98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2243      	movs	r2, #67	; 0x43
 8005d9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005da0:	4b02      	ldr	r3, [pc, #8]	; (8005dac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000050 	.word	0x20000050

08005db0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005db8:	2182      	movs	r1, #130	; 0x82
 8005dba:	4818      	ldr	r0, [pc, #96]	; (8005e1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dbc:	f000 fcdf 	bl	800677e <USBD_GetEpDesc>
 8005dc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	4815      	ldr	r0, [pc, #84]	; (8005e1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dc6:	f000 fcda 	bl	800677e <USBD_GetEpDesc>
 8005dca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005dcc:	2181      	movs	r1, #129	; 0x81
 8005dce:	4813      	ldr	r0, [pc, #76]	; (8005e1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dd0:	f000 fcd5 	bl	800677e <USBD_GetEpDesc>
 8005dd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2210      	movs	r2, #16
 8005de0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d006      	beq.n	8005df6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005df0:	711a      	strb	r2, [r3, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d006      	beq.n	8005e0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e04:	711a      	strb	r2, [r3, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2243      	movs	r2, #67	; 0x43
 8005e0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e10:	4b02      	ldr	r3, [pc, #8]	; (8005e1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000050 	.word	0x20000050

08005e20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	220a      	movs	r2, #10
 8005e2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e2e:	4b03      	ldr	r3, [pc, #12]	; (8005e3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	2000000c 	.word	0x2000000c

08005e40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e009      	b.n	8005e68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	33b0      	adds	r3, #176	; 0xb0
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	32b0      	adds	r2, #176	; 0xb0
 8005e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e008      	b.n	8005eac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	32b0      	adds	r2, #176	; 0xb0
 8005ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e004      	b.n	8005ee6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	32b0      	adds	r2, #176	; 0xb0
 8005f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	32b0      	adds	r2, #176	; 0xb0
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e025      	b.n	8005f72 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11f      	bne.n	8005f70 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005f38:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <USBD_CDC_TransmitPacket+0x88>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f003 020f 	and.w	r2, r3, #15
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4403      	add	r3, r0
 8005f52:	3318      	adds	r3, #24
 8005f54:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005f56:	4b09      	ldr	r3, [pc, #36]	; (8005f7c <USBD_CDC_TransmitPacket+0x88>)
 8005f58:	7819      	ldrb	r1, [r3, #0]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f001 ffc1 	bl	8007eee <USBD_LL_Transmit>

    ret = USBD_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000093 	.word	0x20000093

08005f80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	32b0      	adds	r2, #176	; 0xb0
 8005f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	32b0      	adds	r2, #176	; 0xb0
 8005fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e018      	b.n	8005fe0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	7c1b      	ldrb	r3, [r3, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fb6:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <USBD_CDC_ReceivePacket+0x68>)
 8005fb8:	7819      	ldrb	r1, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 ffb3 	bl	8007f30 <USBD_LL_PrepareReceive>
 8005fca:	e008      	b.n	8005fde <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fcc:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <USBD_CDC_ReceivePacket+0x68>)
 8005fce:	7819      	ldrb	r1, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fd6:	2340      	movs	r3, #64	; 0x40
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 ffa9 	bl	8007f30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20000094 	.word	0x20000094

08005fec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006000:	2303      	movs	r3, #3
 8006002:	e01f      	b.n	8006044 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	79fa      	ldrb	r2, [r7, #7]
 8006036:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f001 fe23 	bl	8007c84 <USBD_LL_Init>
 800603e:	4603      	mov	r3, r0
 8006040:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006042:	7dfb      	ldrb	r3, [r7, #23]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006060:	2303      	movs	r3, #3
 8006062:	e025      	b.n	80060b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	32ae      	adds	r2, #174	; 0xae
 8006076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00f      	beq.n	80060a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	32ae      	adds	r2, #174	; 0xae
 800608a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	f107 020e 	add.w	r2, r7, #14
 8006094:	4610      	mov	r0, r2
 8006096:	4798      	blx	r3
 8006098:	4602      	mov	r2, r0
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 fe2b 	bl	8007d1c <USBD_LL_Start>
 80060c6:	4603      	mov	r3, r0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	460b      	mov	r3, r1
 80060f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	78fa      	ldrb	r2, [r7, #3]
 800610a:	4611      	mov	r1, r2
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	4798      	blx	r3
 8006110:	4603      	mov	r3, r0
 8006112:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	78fa      	ldrb	r2, [r7, #3]
 8006138:	4611      	mov	r1, r2
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	4798      	blx	r3
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006144:	2303      	movs	r3, #3
 8006146:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	4618      	mov	r0, r3
 8006166:	f001 f908 	bl	800737a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006178:	461a      	mov	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006186:	f003 031f 	and.w	r3, r3, #31
 800618a:	2b02      	cmp	r3, #2
 800618c:	d01a      	beq.n	80061c4 <USBD_LL_SetupStage+0x72>
 800618e:	2b02      	cmp	r3, #2
 8006190:	d822      	bhi.n	80061d8 <USBD_LL_SetupStage+0x86>
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <USBD_LL_SetupStage+0x4a>
 8006196:	2b01      	cmp	r3, #1
 8006198:	d00a      	beq.n	80061b0 <USBD_LL_SetupStage+0x5e>
 800619a:	e01d      	b.n	80061d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fb5f 	bl	8006868 <USBD_StdDevReq>
 80061aa:	4603      	mov	r3, r0
 80061ac:	73fb      	strb	r3, [r7, #15]
      break;
 80061ae:	e020      	b.n	80061f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fbc7 	bl	800694c <USBD_StdItfReq>
 80061be:	4603      	mov	r3, r0
 80061c0:	73fb      	strb	r3, [r7, #15]
      break;
 80061c2:	e016      	b.n	80061f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fc29 	bl	8006a24 <USBD_StdEPReq>
 80061d2:	4603      	mov	r3, r0
 80061d4:	73fb      	strb	r3, [r7, #15]
      break;
 80061d6:	e00c      	b.n	80061f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 fdf8 	bl	8007ddc <USBD_LL_StallEP>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]
      break;
 80061f0:	bf00      	nop
  }

  return ret;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	460b      	mov	r3, r1
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800620e:	7afb      	ldrb	r3, [r7, #11]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d16e      	bne.n	80062f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800621a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006222:	2b03      	cmp	r3, #3
 8006224:	f040 8098 	bne.w	8006358 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	429a      	cmp	r2, r3
 8006232:	d913      	bls.n	800625c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	1ad2      	subs	r2, r2, r3
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	4293      	cmp	r3, r2
 800624c:	bf28      	it	cs
 800624e:	4613      	movcs	r3, r2
 8006250:	461a      	mov	r2, r3
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f001 f984 	bl	8007562 <USBD_CtlContinueRx>
 800625a:	e07d      	b.n	8006358 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2b02      	cmp	r3, #2
 8006268:	d014      	beq.n	8006294 <USBD_LL_DataOutStage+0x98>
 800626a:	2b02      	cmp	r3, #2
 800626c:	d81d      	bhi.n	80062aa <USBD_LL_DataOutStage+0xae>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <USBD_LL_DataOutStage+0x7c>
 8006272:	2b01      	cmp	r3, #1
 8006274:	d003      	beq.n	800627e <USBD_LL_DataOutStage+0x82>
 8006276:	e018      	b.n	80062aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	75bb      	strb	r3, [r7, #22]
            break;
 800627c:	e018      	b.n	80062b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006284:	b2db      	uxtb	r3, r3
 8006286:	4619      	mov	r1, r3
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fa5e 	bl	800674a <USBD_CoreFindIF>
 800628e:	4603      	mov	r3, r0
 8006290:	75bb      	strb	r3, [r7, #22]
            break;
 8006292:	e00d      	b.n	80062b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800629a:	b2db      	uxtb	r3, r3
 800629c:	4619      	mov	r1, r3
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fa60 	bl	8006764 <USBD_CoreFindEP>
 80062a4:	4603      	mov	r3, r0
 80062a6:	75bb      	strb	r3, [r7, #22]
            break;
 80062a8:	e002      	b.n	80062b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	75bb      	strb	r3, [r7, #22]
            break;
 80062ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80062b0:	7dbb      	ldrb	r3, [r7, #22]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d119      	bne.n	80062ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d113      	bne.n	80062ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80062c2:	7dba      	ldrb	r2, [r7, #22]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	32ae      	adds	r2, #174	; 0xae
 80062c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80062d2:	7dba      	ldrb	r2, [r7, #22]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80062da:	7dba      	ldrb	r2, [r7, #22]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	32ae      	adds	r2, #174	; 0xae
 80062e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f001 f94a 	bl	8007584 <USBD_CtlSendStatus>
 80062f0:	e032      	b.n	8006358 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80062f2:	7afb      	ldrb	r3, [r7, #11]
 80062f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	4619      	mov	r1, r3
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 fa31 	bl	8006764 <USBD_CoreFindEP>
 8006302:	4603      	mov	r3, r0
 8006304:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006306:	7dbb      	ldrb	r3, [r7, #22]
 8006308:	2bff      	cmp	r3, #255	; 0xff
 800630a:	d025      	beq.n	8006358 <USBD_LL_DataOutStage+0x15c>
 800630c:	7dbb      	ldrb	r3, [r7, #22]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d122      	bne.n	8006358 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b03      	cmp	r3, #3
 800631c:	d117      	bne.n	800634e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800631e:	7dba      	ldrb	r2, [r7, #22]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	32ae      	adds	r2, #174	; 0xae
 8006324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00f      	beq.n	800634e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800632e:	7dba      	ldrb	r2, [r7, #22]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006336:	7dba      	ldrb	r2, [r7, #22]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	32ae      	adds	r2, #174	; 0xae
 800633c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	7afa      	ldrb	r2, [r7, #11]
 8006344:	4611      	mov	r1, r2
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	4798      	blx	r3
 800634a:	4603      	mov	r3, r0
 800634c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	e000      	b.n	800635a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b086      	sub	sp, #24
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	460b      	mov	r3, r1
 800636c:	607a      	str	r2, [r7, #4]
 800636e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006370:	7afb      	ldrb	r3, [r7, #11]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d16f      	bne.n	8006456 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3314      	adds	r3, #20
 800637a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006382:	2b02      	cmp	r3, #2
 8006384:	d15a      	bne.n	800643c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	689a      	ldr	r2, [r3, #8]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	429a      	cmp	r2, r3
 8006390:	d914      	bls.n	80063bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	689a      	ldr	r2, [r3, #8]
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	1ad2      	subs	r2, r2, r3
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	461a      	mov	r2, r3
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f001 f8ac 	bl	8007506 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063ae:	2300      	movs	r3, #0
 80063b0:	2200      	movs	r2, #0
 80063b2:	2100      	movs	r1, #0
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f001 fdbb 	bl	8007f30 <USBD_LL_PrepareReceive>
 80063ba:	e03f      	b.n	800643c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d11c      	bne.n	8006402 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d316      	bcc.n	8006402 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80063de:	429a      	cmp	r2, r3
 80063e0:	d20f      	bcs.n	8006402 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80063e2:	2200      	movs	r2, #0
 80063e4:	2100      	movs	r1, #0
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f001 f88d 	bl	8007506 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063f4:	2300      	movs	r3, #0
 80063f6:	2200      	movs	r2, #0
 80063f8:	2100      	movs	r1, #0
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f001 fd98 	bl	8007f30 <USBD_LL_PrepareReceive>
 8006400:	e01c      	b.n	800643c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b03      	cmp	r3, #3
 800640c:	d10f      	bne.n	800642e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800642e:	2180      	movs	r1, #128	; 0x80
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f001 fcd3 	bl	8007ddc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f001 f8b7 	bl	80075aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d03a      	beq.n	80064bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7ff fe42 	bl	80060d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006454:	e032      	b.n	80064bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006456:	7afb      	ldrb	r3, [r7, #11]
 8006458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800645c:	b2db      	uxtb	r3, r3
 800645e:	4619      	mov	r1, r3
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 f97f 	bl	8006764 <USBD_CoreFindEP>
 8006466:	4603      	mov	r3, r0
 8006468:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	2bff      	cmp	r3, #255	; 0xff
 800646e:	d025      	beq.n	80064bc <USBD_LL_DataInStage+0x15a>
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d122      	bne.n	80064bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b03      	cmp	r3, #3
 8006480:	d11c      	bne.n	80064bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006482:	7dfa      	ldrb	r2, [r7, #23]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	32ae      	adds	r2, #174	; 0xae
 8006488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d014      	beq.n	80064bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006492:	7dfa      	ldrb	r2, [r7, #23]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800649a:	7dfa      	ldrb	r2, [r7, #23]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	32ae      	adds	r2, #174	; 0xae
 80064a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	7afa      	ldrb	r2, [r7, #11]
 80064a8:	4611      	mov	r1, r2
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	4798      	blx	r3
 80064ae:	4603      	mov	r3, r0
 80064b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80064b2:	7dbb      	ldrb	r3, [r7, #22]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80064b8:	7dbb      	ldrb	r3, [r7, #22]
 80064ba:	e000      	b.n	80064be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d014      	beq.n	800652c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00e      	beq.n	800652c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6852      	ldr	r2, [r2, #4]
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	4611      	mov	r1, r2
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006528:	2303      	movs	r3, #3
 800652a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800652c:	2340      	movs	r3, #64	; 0x40
 800652e:	2200      	movs	r2, #0
 8006530:	2100      	movs	r1, #0
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f001 fc0d 	bl	8007d52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2240      	movs	r2, #64	; 0x40
 8006544:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006548:	2340      	movs	r3, #64	; 0x40
 800654a:	2200      	movs	r2, #0
 800654c:	2180      	movs	r1, #128	; 0x80
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fbff 	bl	8007d52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2240      	movs	r2, #64	; 0x40
 800655e:	621a      	str	r2, [r3, #32]

  return ret;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	78fa      	ldrb	r2, [r7, #3]
 800657a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006598:	b2da      	uxtb	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2204      	movs	r2, #4
 80065a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d106      	bne.n	80065d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b082      	sub	sp, #8
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d110      	bne.n	800661c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b082      	sub	sp, #8
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	32ae      	adds	r2, #174	; 0xae
 800663c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006644:	2303      	movs	r3, #3
 8006646:	e01c      	b.n	8006682 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b03      	cmp	r3, #3
 8006652:	d115      	bne.n	8006680 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	32ae      	adds	r2, #174	; 0xae
 800665e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	32ae      	adds	r2, #174	; 0xae
 8006672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	78fa      	ldrb	r2, [r7, #3]
 800667a:	4611      	mov	r1, r2
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b082      	sub	sp, #8
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	460b      	mov	r3, r1
 8006694:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	32ae      	adds	r2, #174	; 0xae
 80066a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e01c      	b.n	80066e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d115      	bne.n	80066e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	32ae      	adds	r2, #174	; 0xae
 80066c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	32ae      	adds	r2, #174	; 0xae
 80066d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	78fa      	ldrb	r2, [r7, #3]
 80066de:	4611      	mov	r1, r2
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00e      	beq.n	8006740 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6852      	ldr	r2, [r2, #4]
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	4611      	mov	r1, r2
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800673c:	2303      	movs	r3, #3
 800673e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006756:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006770:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	460b      	mov	r3, r1
 8006788:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	885b      	ldrh	r3, [r3, #2]
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d920      	bls.n	80067e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80067ae:	e013      	b.n	80067d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80067b0:	f107 030a 	add.w	r3, r7, #10
 80067b4:	4619      	mov	r1, r3
 80067b6:	6978      	ldr	r0, [r7, #20]
 80067b8:	f000 f81b 	bl	80067f2 <USBD_GetNextDesc>
 80067bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	2b05      	cmp	r3, #5
 80067c4:	d108      	bne.n	80067d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	789b      	ldrb	r3, [r3, #2]
 80067ce:	78fa      	ldrb	r2, [r7, #3]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d008      	beq.n	80067e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	885b      	ldrh	r3, [r3, #2]
 80067dc:	b29a      	uxth	r2, r3
 80067de:	897b      	ldrh	r3, [r7, #10]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d8e5      	bhi.n	80067b0 <USBD_GetEpDesc+0x32>
 80067e4:	e000      	b.n	80067e8 <USBD_GetEpDesc+0x6a>
          break;
 80067e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80067e8:	693b      	ldr	r3, [r7, #16]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	881a      	ldrh	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	4413      	add	r3, r2
 800680c:	b29a      	uxth	r2, r3
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4413      	add	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800681e:	68fb      	ldr	r3, [r7, #12]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	3301      	adds	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800684a:	8a3b      	ldrh	r3, [r7, #16]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	b21a      	sxth	r2, r3
 8006850:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006854:	4313      	orrs	r3, r2
 8006856:	b21b      	sxth	r3, r3
 8006858:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800685a:	89fb      	ldrh	r3, [r7, #14]
}
 800685c:	4618      	mov	r0, r3
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d005      	beq.n	800688e <USBD_StdDevReq+0x26>
 8006882:	2b40      	cmp	r3, #64	; 0x40
 8006884:	d857      	bhi.n	8006936 <USBD_StdDevReq+0xce>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00f      	beq.n	80068aa <USBD_StdDevReq+0x42>
 800688a:	2b20      	cmp	r3, #32
 800688c:	d153      	bne.n	8006936 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	32ae      	adds	r2, #174	; 0xae
 8006898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]
      break;
 80068a8:	e04a      	b.n	8006940 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	785b      	ldrb	r3, [r3, #1]
 80068ae:	2b09      	cmp	r3, #9
 80068b0:	d83b      	bhi.n	800692a <USBD_StdDevReq+0xc2>
 80068b2:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <USBD_StdDevReq+0x50>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	0800690d 	.word	0x0800690d
 80068bc:	08006921 	.word	0x08006921
 80068c0:	0800692b 	.word	0x0800692b
 80068c4:	08006917 	.word	0x08006917
 80068c8:	0800692b 	.word	0x0800692b
 80068cc:	080068eb 	.word	0x080068eb
 80068d0:	080068e1 	.word	0x080068e1
 80068d4:	0800692b 	.word	0x0800692b
 80068d8:	08006903 	.word	0x08006903
 80068dc:	080068f5 	.word	0x080068f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa3c 	bl	8006d60 <USBD_GetDescriptor>
          break;
 80068e8:	e024      	b.n	8006934 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fba1 	bl	8007034 <USBD_SetAddress>
          break;
 80068f2:	e01f      	b.n	8006934 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fbe0 	bl	80070bc <USBD_SetConfig>
 80068fc:	4603      	mov	r3, r0
 80068fe:	73fb      	strb	r3, [r7, #15]
          break;
 8006900:	e018      	b.n	8006934 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fc83 	bl	8007210 <USBD_GetConfig>
          break;
 800690a:	e013      	b.n	8006934 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fcb4 	bl	800727c <USBD_GetStatus>
          break;
 8006914:	e00e      	b.n	8006934 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fce3 	bl	80072e4 <USBD_SetFeature>
          break;
 800691e:	e009      	b.n	8006934 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fd07 	bl	8007336 <USBD_ClrFeature>
          break;
 8006928:	e004      	b.n	8006934 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fd5e 	bl	80073ee <USBD_CtlError>
          break;
 8006932:	bf00      	nop
      }
      break;
 8006934:	e004      	b.n	8006940 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fd58 	bl	80073ee <USBD_CtlError>
      break;
 800693e:	bf00      	nop
  }

  return ret;
 8006940:	7bfb      	ldrb	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop

0800694c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006962:	2b40      	cmp	r3, #64	; 0x40
 8006964:	d005      	beq.n	8006972 <USBD_StdItfReq+0x26>
 8006966:	2b40      	cmp	r3, #64	; 0x40
 8006968:	d852      	bhi.n	8006a10 <USBD_StdItfReq+0xc4>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <USBD_StdItfReq+0x26>
 800696e:	2b20      	cmp	r3, #32
 8006970:	d14e      	bne.n	8006a10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006978:	b2db      	uxtb	r3, r3
 800697a:	3b01      	subs	r3, #1
 800697c:	2b02      	cmp	r3, #2
 800697e:	d840      	bhi.n	8006a02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	889b      	ldrh	r3, [r3, #4]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b01      	cmp	r3, #1
 8006988:	d836      	bhi.n	80069f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	889b      	ldrh	r3, [r3, #4]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff fed9 	bl	800674a <USBD_CoreFindIF>
 8006998:	4603      	mov	r3, r0
 800699a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	2bff      	cmp	r3, #255	; 0xff
 80069a0:	d01d      	beq.n	80069de <USBD_StdItfReq+0x92>
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d11a      	bne.n	80069de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80069a8:	7bba      	ldrb	r2, [r7, #14]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	32ae      	adds	r2, #174	; 0xae
 80069ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00f      	beq.n	80069d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80069b8:	7bba      	ldrb	r2, [r7, #14]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069c0:	7bba      	ldrb	r2, [r7, #14]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	32ae      	adds	r2, #174	; 0xae
 80069c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
 80069d2:	4603      	mov	r3, r0
 80069d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069d6:	e004      	b.n	80069e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80069d8:	2303      	movs	r3, #3
 80069da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069dc:	e001      	b.n	80069e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80069de:	2303      	movs	r3, #3
 80069e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	88db      	ldrh	r3, [r3, #6]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d110      	bne.n	8006a0c <USBD_StdItfReq+0xc0>
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10d      	bne.n	8006a0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fdc7 	bl	8007584 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069f6:	e009      	b.n	8006a0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fcf7 	bl	80073ee <USBD_CtlError>
          break;
 8006a00:	e004      	b.n	8006a0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fcf2 	bl	80073ee <USBD_CtlError>
          break;
 8006a0a:	e000      	b.n	8006a0e <USBD_StdItfReq+0xc2>
          break;
 8006a0c:	bf00      	nop
      }
      break;
 8006a0e:	e004      	b.n	8006a1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fceb 	bl	80073ee <USBD_CtlError>
      break;
 8006a18:	bf00      	nop
  }

  return ret;
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	889b      	ldrh	r3, [r3, #4]
 8006a36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d007      	beq.n	8006a54 <USBD_StdEPReq+0x30>
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	f200 817f 	bhi.w	8006d48 <USBD_StdEPReq+0x324>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d02a      	beq.n	8006aa4 <USBD_StdEPReq+0x80>
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	f040 817a 	bne.w	8006d48 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff fe83 	bl	8006764 <USBD_CoreFindEP>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a62:	7b7b      	ldrb	r3, [r7, #13]
 8006a64:	2bff      	cmp	r3, #255	; 0xff
 8006a66:	f000 8174 	beq.w	8006d52 <USBD_StdEPReq+0x32e>
 8006a6a:	7b7b      	ldrb	r3, [r7, #13]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f040 8170 	bne.w	8006d52 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006a72:	7b7a      	ldrb	r2, [r7, #13]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006a7a:	7b7a      	ldrb	r2, [r7, #13]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	32ae      	adds	r2, #174	; 0xae
 8006a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 8163 	beq.w	8006d52 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006a8c:	7b7a      	ldrb	r2, [r7, #13]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	32ae      	adds	r2, #174	; 0xae
 8006a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	4798      	blx	r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006aa2:	e156      	b.n	8006d52 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	785b      	ldrb	r3, [r3, #1]
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d008      	beq.n	8006abe <USBD_StdEPReq+0x9a>
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	f300 8145 	bgt.w	8006d3c <USBD_StdEPReq+0x318>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 809b 	beq.w	8006bee <USBD_StdEPReq+0x1ca>
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d03c      	beq.n	8006b36 <USBD_StdEPReq+0x112>
 8006abc:	e13e      	b.n	8006d3c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d002      	beq.n	8006ad0 <USBD_StdEPReq+0xac>
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d016      	beq.n	8006afc <USBD_StdEPReq+0xd8>
 8006ace:	e02c      	b.n	8006b2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ad0:	7bbb      	ldrb	r3, [r7, #14]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00d      	beq.n	8006af2 <USBD_StdEPReq+0xce>
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	2b80      	cmp	r3, #128	; 0x80
 8006ada:	d00a      	beq.n	8006af2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 f97b 	bl	8007ddc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ae6:	2180      	movs	r1, #128	; 0x80
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 f977 	bl	8007ddc <USBD_LL_StallEP>
 8006aee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006af0:	e020      	b.n	8006b34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fc7a 	bl	80073ee <USBD_CtlError>
              break;
 8006afa:	e01b      	b.n	8006b34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	885b      	ldrh	r3, [r3, #2]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10e      	bne.n	8006b22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00b      	beq.n	8006b22 <USBD_StdEPReq+0xfe>
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b80      	cmp	r3, #128	; 0x80
 8006b0e:	d008      	beq.n	8006b22 <USBD_StdEPReq+0xfe>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	88db      	ldrh	r3, [r3, #6]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d104      	bne.n	8006b22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 f95d 	bl	8007ddc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fd2e 	bl	8007584 <USBD_CtlSendStatus>

              break;
 8006b28:	e004      	b.n	8006b34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fc5e 	bl	80073ee <USBD_CtlError>
              break;
 8006b32:	bf00      	nop
          }
          break;
 8006b34:	e107      	b.n	8006d46 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d002      	beq.n	8006b48 <USBD_StdEPReq+0x124>
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d016      	beq.n	8006b74 <USBD_StdEPReq+0x150>
 8006b46:	e04b      	b.n	8006be0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00d      	beq.n	8006b6a <USBD_StdEPReq+0x146>
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	2b80      	cmp	r3, #128	; 0x80
 8006b52:	d00a      	beq.n	8006b6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b54:	7bbb      	ldrb	r3, [r7, #14]
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 f93f 	bl	8007ddc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b5e:	2180      	movs	r1, #128	; 0x80
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 f93b 	bl	8007ddc <USBD_LL_StallEP>
 8006b66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b68:	e040      	b.n	8006bec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fc3e 	bl	80073ee <USBD_CtlError>
              break;
 8006b72:	e03b      	b.n	8006bec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	885b      	ldrh	r3, [r3, #2]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d136      	bne.n	8006bea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 f945 	bl	8007e1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fcf7 	bl	8007584 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff fde2 	bl	8006764 <USBD_CoreFindEP>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ba4:	7b7b      	ldrb	r3, [r7, #13]
 8006ba6:	2bff      	cmp	r3, #255	; 0xff
 8006ba8:	d01f      	beq.n	8006bea <USBD_StdEPReq+0x1c6>
 8006baa:	7b7b      	ldrb	r3, [r7, #13]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d11c      	bne.n	8006bea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006bb0:	7b7a      	ldrb	r2, [r7, #13]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006bb8:	7b7a      	ldrb	r2, [r7, #13]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	32ae      	adds	r2, #174	; 0xae
 8006bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d010      	beq.n	8006bea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006bc8:	7b7a      	ldrb	r2, [r7, #13]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	32ae      	adds	r2, #174	; 0xae
 8006bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006bde:	e004      	b.n	8006bea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fc03 	bl	80073ee <USBD_CtlError>
              break;
 8006be8:	e000      	b.n	8006bec <USBD_StdEPReq+0x1c8>
              break;
 8006bea:	bf00      	nop
          }
          break;
 8006bec:	e0ab      	b.n	8006d46 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d002      	beq.n	8006c00 <USBD_StdEPReq+0x1dc>
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d032      	beq.n	8006c64 <USBD_StdEPReq+0x240>
 8006bfe:	e097      	b.n	8006d30 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c00:	7bbb      	ldrb	r3, [r7, #14]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d007      	beq.n	8006c16 <USBD_StdEPReq+0x1f2>
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	2b80      	cmp	r3, #128	; 0x80
 8006c0a:	d004      	beq.n	8006c16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fbed 	bl	80073ee <USBD_CtlError>
                break;
 8006c14:	e091      	b.n	8006d3a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	da0b      	bge.n	8006c36 <USBD_StdEPReq+0x212>
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	3310      	adds	r3, #16
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	4413      	add	r3, r2
 8006c32:	3304      	adds	r3, #4
 8006c34:	e00b      	b.n	8006c4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c36:	7bbb      	ldrb	r3, [r7, #14]
 8006c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fc37 	bl	80074d0 <USBD_CtlSendData>
              break;
 8006c62:	e06a      	b.n	8006d3a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	da11      	bge.n	8006c90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	f003 020f 	and.w	r2, r3, #15
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	3324      	adds	r3, #36	; 0x24
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d117      	bne.n	8006cb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fbb0 	bl	80073ee <USBD_CtlError>
                  break;
 8006c8e:	e054      	b.n	8006d3a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	f003 020f 	and.w	r2, r3, #15
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d104      	bne.n	8006cb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fb9d 	bl	80073ee <USBD_CtlError>
                  break;
 8006cb4:	e041      	b.n	8006d3a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	da0b      	bge.n	8006cd6 <USBD_StdEPReq+0x2b2>
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	3310      	adds	r3, #16
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	e00b      	b.n	8006cee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	4413      	add	r3, r2
 8006cec:	3304      	adds	r3, #4
 8006cee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <USBD_StdEPReq+0x2d8>
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	2b80      	cmp	r3, #128	; 0x80
 8006cfa:	d103      	bne.n	8006d04 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	e00e      	b.n	8006d22 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 f8a5 	bl	8007e58 <USBD_LL_IsStallEP>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2201      	movs	r2, #1
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	e002      	b.n	8006d22 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2202      	movs	r2, #2
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fbd1 	bl	80074d0 <USBD_CtlSendData>
              break;
 8006d2e:	e004      	b.n	8006d3a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fb5b 	bl	80073ee <USBD_CtlError>
              break;
 8006d38:	bf00      	nop
          }
          break;
 8006d3a:	e004      	b.n	8006d46 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fb55 	bl	80073ee <USBD_CtlError>
          break;
 8006d44:	bf00      	nop
      }
      break;
 8006d46:	e005      	b.n	8006d54 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fb4f 	bl	80073ee <USBD_CtlError>
      break;
 8006d50:	e000      	b.n	8006d54 <USBD_StdEPReq+0x330>
      break;
 8006d52:	bf00      	nop
  }

  return ret;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
	...

08006d60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	885b      	ldrh	r3, [r3, #2]
 8006d7a:	0a1b      	lsrs	r3, r3, #8
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	2b06      	cmp	r3, #6
 8006d82:	f200 8128 	bhi.w	8006fd6 <USBD_GetDescriptor+0x276>
 8006d86:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <USBD_GetDescriptor+0x2c>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006da9 	.word	0x08006da9
 8006d90:	08006dc1 	.word	0x08006dc1
 8006d94:	08006e01 	.word	0x08006e01
 8006d98:	08006fd7 	.word	0x08006fd7
 8006d9c:	08006fd7 	.word	0x08006fd7
 8006da0:	08006f77 	.word	0x08006f77
 8006da4:	08006fa3 	.word	0x08006fa3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	7c12      	ldrb	r2, [r2, #16]
 8006db4:	f107 0108 	add.w	r1, r7, #8
 8006db8:	4610      	mov	r0, r2
 8006dba:	4798      	blx	r3
 8006dbc:	60f8      	str	r0, [r7, #12]
      break;
 8006dbe:	e112      	b.n	8006fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	7c1b      	ldrb	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10d      	bne.n	8006de4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd0:	f107 0208 	add.w	r2, r7, #8
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4798      	blx	r3
 8006dd8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	2202      	movs	r2, #2
 8006de0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006de2:	e100      	b.n	8006fe6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	f107 0208 	add.w	r2, r7, #8
 8006df0:	4610      	mov	r0, r2
 8006df2:	4798      	blx	r3
 8006df4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	701a      	strb	r2, [r3, #0]
      break;
 8006dfe:	e0f2      	b.n	8006fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	885b      	ldrh	r3, [r3, #2]
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b05      	cmp	r3, #5
 8006e08:	f200 80ac 	bhi.w	8006f64 <USBD_GetDescriptor+0x204>
 8006e0c:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <USBD_GetDescriptor+0xb4>)
 8006e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e12:	bf00      	nop
 8006e14:	08006e2d 	.word	0x08006e2d
 8006e18:	08006e61 	.word	0x08006e61
 8006e1c:	08006e95 	.word	0x08006e95
 8006e20:	08006ec9 	.word	0x08006ec9
 8006e24:	08006efd 	.word	0x08006efd
 8006e28:	08006f31 	.word	0x08006f31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	7c12      	ldrb	r2, [r2, #16]
 8006e44:	f107 0108 	add.w	r1, r7, #8
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4798      	blx	r3
 8006e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e4e:	e091      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 facb 	bl	80073ee <USBD_CtlError>
            err++;
 8006e58:	7afb      	ldrb	r3, [r7, #11]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e5e:	e089      	b.n	8006f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00b      	beq.n	8006e84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	7c12      	ldrb	r2, [r2, #16]
 8006e78:	f107 0108 	add.w	r1, r7, #8
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
 8006e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e82:	e077      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fab1 	bl	80073ee <USBD_CtlError>
            err++;
 8006e8c:	7afb      	ldrb	r3, [r7, #11]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	72fb      	strb	r3, [r7, #11]
          break;
 8006e92:	e06f      	b.n	8006f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	7c12      	ldrb	r2, [r2, #16]
 8006eac:	f107 0108 	add.w	r1, r7, #8
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4798      	blx	r3
 8006eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eb6:	e05d      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa97 	bl	80073ee <USBD_CtlError>
            err++;
 8006ec0:	7afb      	ldrb	r3, [r7, #11]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ec6:	e055      	b.n	8006f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00b      	beq.n	8006eec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	7c12      	ldrb	r2, [r2, #16]
 8006ee0:	f107 0108 	add.w	r1, r7, #8
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eea:	e043      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa7d 	bl	80073ee <USBD_CtlError>
            err++;
 8006ef4:	7afb      	ldrb	r3, [r7, #11]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8006efa:	e03b      	b.n	8006f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	7c12      	ldrb	r2, [r2, #16]
 8006f14:	f107 0108 	add.w	r1, r7, #8
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4798      	blx	r3
 8006f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f1e:	e029      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa63 	bl	80073ee <USBD_CtlError>
            err++;
 8006f28:	7afb      	ldrb	r3, [r7, #11]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f2e:	e021      	b.n	8006f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00b      	beq.n	8006f54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	7c12      	ldrb	r2, [r2, #16]
 8006f48:	f107 0108 	add.w	r1, r7, #8
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4798      	blx	r3
 8006f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f52:	e00f      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fa49 	bl	80073ee <USBD_CtlError>
            err++;
 8006f5c:	7afb      	ldrb	r3, [r7, #11]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	72fb      	strb	r3, [r7, #11]
          break;
 8006f62:	e007      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa41 	bl	80073ee <USBD_CtlError>
          err++;
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f72:	bf00      	nop
      }
      break;
 8006f74:	e037      	b.n	8006fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	7c1b      	ldrb	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d109      	bne.n	8006f92 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f86:	f107 0208 	add.w	r2, r7, #8
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	4798      	blx	r3
 8006f8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f90:	e029      	b.n	8006fe6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fa2a 	bl	80073ee <USBD_CtlError>
        err++;
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8006fa0:	e021      	b.n	8006fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	7c1b      	ldrb	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10d      	bne.n	8006fc6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb2:	f107 0208 	add.w	r2, r7, #8
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4798      	blx	r3
 8006fba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	2207      	movs	r2, #7
 8006fc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fc4:	e00f      	b.n	8006fe6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fa10 	bl	80073ee <USBD_CtlError>
        err++;
 8006fce:	7afb      	ldrb	r3, [r7, #11]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	72fb      	strb	r3, [r7, #11]
      break;
 8006fd4:	e007      	b.n	8006fe6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fa08 	bl	80073ee <USBD_CtlError>
      err++;
 8006fde:	7afb      	ldrb	r3, [r7, #11]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	72fb      	strb	r3, [r7, #11]
      break;
 8006fe4:	bf00      	nop
  }

  if (err != 0U)
 8006fe6:	7afb      	ldrb	r3, [r7, #11]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d11e      	bne.n	800702a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	88db      	ldrh	r3, [r3, #6]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d016      	beq.n	8007022 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ff4:	893b      	ldrh	r3, [r7, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00e      	beq.n	8007018 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	88da      	ldrh	r2, [r3, #6]
 8006ffe:	893b      	ldrh	r3, [r7, #8]
 8007000:	4293      	cmp	r3, r2
 8007002:	bf28      	it	cs
 8007004:	4613      	movcs	r3, r2
 8007006:	b29b      	uxth	r3, r3
 8007008:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800700a:	893b      	ldrh	r3, [r7, #8]
 800700c:	461a      	mov	r2, r3
 800700e:	68f9      	ldr	r1, [r7, #12]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fa5d 	bl	80074d0 <USBD_CtlSendData>
 8007016:	e009      	b.n	800702c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f9e7 	bl	80073ee <USBD_CtlError>
 8007020:	e004      	b.n	800702c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 faae 	bl	8007584 <USBD_CtlSendStatus>
 8007028:	e000      	b.n	800702c <USBD_GetDescriptor+0x2cc>
    return;
 800702a:	bf00      	nop
  }
}
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop

08007034 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	889b      	ldrh	r3, [r3, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d131      	bne.n	80070aa <USBD_SetAddress+0x76>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	88db      	ldrh	r3, [r3, #6]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d12d      	bne.n	80070aa <USBD_SetAddress+0x76>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	885b      	ldrh	r3, [r3, #2]
 8007052:	2b7f      	cmp	r3, #127	; 0x7f
 8007054:	d829      	bhi.n	80070aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	885b      	ldrh	r3, [r3, #2]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007060:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b03      	cmp	r3, #3
 800706c:	d104      	bne.n	8007078 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f9bc 	bl	80073ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007076:	e01d      	b.n	80070b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	7bfa      	ldrb	r2, [r7, #15]
 800707c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 ff13 	bl	8007eb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa7a 	bl	8007584 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d004      	beq.n	80070a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2202      	movs	r2, #2
 800709a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800709e:	e009      	b.n	80070b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a8:	e004      	b.n	80070b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f99e 	bl	80073ee <USBD_CtlError>
  }
}
 80070b2:	bf00      	nop
 80070b4:	bf00      	nop
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	885b      	ldrh	r3, [r3, #2]
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	4b4e      	ldr	r3, [pc, #312]	; (800720c <USBD_SetConfig+0x150>)
 80070d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070d4:	4b4d      	ldr	r3, [pc, #308]	; (800720c <USBD_SetConfig+0x150>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d905      	bls.n	80070e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f985 	bl	80073ee <USBD_CtlError>
    return USBD_FAIL;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e08c      	b.n	8007202 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d002      	beq.n	80070fa <USBD_SetConfig+0x3e>
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d029      	beq.n	800714c <USBD_SetConfig+0x90>
 80070f8:	e075      	b.n	80071e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070fa:	4b44      	ldr	r3, [pc, #272]	; (800720c <USBD_SetConfig+0x150>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d020      	beq.n	8007144 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007102:	4b42      	ldr	r3, [pc, #264]	; (800720c <USBD_SetConfig+0x150>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800710c:	4b3f      	ldr	r3, [pc, #252]	; (800720c <USBD_SetConfig+0x150>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7fe ffe7 	bl	80060e6 <USBD_SetClassConfig>
 8007118:	4603      	mov	r3, r0
 800711a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d008      	beq.n	8007134 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f962 	bl	80073ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2202      	movs	r2, #2
 800712e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007132:	e065      	b.n	8007200 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fa25 	bl	8007584 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2203      	movs	r2, #3
 800713e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007142:	e05d      	b.n	8007200 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fa1d 	bl	8007584 <USBD_CtlSendStatus>
      break;
 800714a:	e059      	b.n	8007200 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800714c:	4b2f      	ldr	r3, [pc, #188]	; (800720c <USBD_SetConfig+0x150>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d112      	bne.n	800717a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800715c:	4b2b      	ldr	r3, [pc, #172]	; (800720c <USBD_SetConfig+0x150>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007166:	4b29      	ldr	r3, [pc, #164]	; (800720c <USBD_SetConfig+0x150>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7fe ffd6 	bl	800611e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fa06 	bl	8007584 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007178:	e042      	b.n	8007200 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800717a:	4b24      	ldr	r3, [pc, #144]	; (800720c <USBD_SetConfig+0x150>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	429a      	cmp	r2, r3
 8007186:	d02a      	beq.n	80071de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7fe ffc4 	bl	800611e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007196:	4b1d      	ldr	r3, [pc, #116]	; (800720c <USBD_SetConfig+0x150>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071a0:	4b1a      	ldr	r3, [pc, #104]	; (800720c <USBD_SetConfig+0x150>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fe ff9d 	bl	80060e6 <USBD_SetClassConfig>
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00f      	beq.n	80071d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f918 	bl	80073ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7fe ffa9 	bl	800611e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071d4:	e014      	b.n	8007200 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f9d4 	bl	8007584 <USBD_CtlSendStatus>
      break;
 80071dc:	e010      	b.n	8007200 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f9d0 	bl	8007584 <USBD_CtlSendStatus>
      break;
 80071e4:	e00c      	b.n	8007200 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f900 	bl	80073ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071ee:	4b07      	ldr	r3, [pc, #28]	; (800720c <USBD_SetConfig+0x150>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7fe ff92 	bl	800611e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071fa:	2303      	movs	r3, #3
 80071fc:	73fb      	strb	r3, [r7, #15]
      break;
 80071fe:	bf00      	nop
  }

  return ret;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000408 	.word	0x20000408

08007210 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	88db      	ldrh	r3, [r3, #6]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d004      	beq.n	800722c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f8e2 	bl	80073ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800722a:	e023      	b.n	8007274 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	dc02      	bgt.n	800723e <USBD_GetConfig+0x2e>
 8007238:	2b00      	cmp	r3, #0
 800723a:	dc03      	bgt.n	8007244 <USBD_GetConfig+0x34>
 800723c:	e015      	b.n	800726a <USBD_GetConfig+0x5a>
 800723e:	2b03      	cmp	r3, #3
 8007240:	d00b      	beq.n	800725a <USBD_GetConfig+0x4a>
 8007242:	e012      	b.n	800726a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3308      	adds	r3, #8
 800724e:	2201      	movs	r2, #1
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f93c 	bl	80074d0 <USBD_CtlSendData>
        break;
 8007258:	e00c      	b.n	8007274 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	3304      	adds	r3, #4
 800725e:	2201      	movs	r2, #1
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f934 	bl	80074d0 <USBD_CtlSendData>
        break;
 8007268:	e004      	b.n	8007274 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f8be 	bl	80073ee <USBD_CtlError>
        break;
 8007272:	bf00      	nop
}
 8007274:	bf00      	nop
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800728c:	b2db      	uxtb	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	2b02      	cmp	r3, #2
 8007292:	d81e      	bhi.n	80072d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	88db      	ldrh	r3, [r3, #6]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d004      	beq.n	80072a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f8a5 	bl	80073ee <USBD_CtlError>
        break;
 80072a4:	e01a      	b.n	80072dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d005      	beq.n	80072c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f043 0202 	orr.w	r2, r3, #2
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	330c      	adds	r3, #12
 80072c6:	2202      	movs	r2, #2
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f900 	bl	80074d0 <USBD_CtlSendData>
      break;
 80072d0:	e004      	b.n	80072dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f88a 	bl	80073ee <USBD_CtlError>
      break;
 80072da:	bf00      	nop
  }
}
 80072dc:	bf00      	nop
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	885b      	ldrh	r3, [r3, #2]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d107      	bne.n	8007306 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f940 	bl	8007584 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007304:	e013      	b.n	800732e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	885b      	ldrh	r3, [r3, #2]
 800730a:	2b02      	cmp	r3, #2
 800730c:	d10b      	bne.n	8007326 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	889b      	ldrh	r3, [r3, #4]
 8007312:	0a1b      	lsrs	r3, r3, #8
 8007314:	b29b      	uxth	r3, r3
 8007316:	b2da      	uxtb	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f930 	bl	8007584 <USBD_CtlSendStatus>
}
 8007324:	e003      	b.n	800732e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f860 	bl	80073ee <USBD_CtlError>
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007346:	b2db      	uxtb	r3, r3
 8007348:	3b01      	subs	r3, #1
 800734a:	2b02      	cmp	r3, #2
 800734c:	d80b      	bhi.n	8007366 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	885b      	ldrh	r3, [r3, #2]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d10c      	bne.n	8007370 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f910 	bl	8007584 <USBD_CtlSendStatus>
      }
      break;
 8007364:	e004      	b.n	8007370 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f840 	bl	80073ee <USBD_CtlError>
      break;
 800736e:	e000      	b.n	8007372 <USBD_ClrFeature+0x3c>
      break;
 8007370:	bf00      	nop
  }
}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	781a      	ldrb	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	781a      	ldrb	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3301      	adds	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff fa41 	bl	800682c <SWAPBYTE>
 80073aa:	4603      	mov	r3, r0
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7ff fa34 	bl	800682c <SWAPBYTE>
 80073c4:	4603      	mov	r3, r0
 80073c6:	461a      	mov	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3301      	adds	r3, #1
 80073d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7ff fa27 	bl	800682c <SWAPBYTE>
 80073de:	4603      	mov	r3, r0
 80073e0:	461a      	mov	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	80da      	strh	r2, [r3, #6]
}
 80073e6:	bf00      	nop
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073f8:	2180      	movs	r1, #128	; 0x80
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fcee 	bl	8007ddc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007400:	2100      	movs	r1, #0
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fcea 	bl	8007ddc <USBD_LL_StallEP>
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d036      	beq.n	8007494 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800742a:	6938      	ldr	r0, [r7, #16]
 800742c:	f000 f836 	bl	800749c <USBD_GetLen>
 8007430:	4603      	mov	r3, r0
 8007432:	3301      	adds	r3, #1
 8007434:	b29b      	uxth	r3, r3
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	b29a      	uxth	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800743e:	7dfb      	ldrb	r3, [r7, #23]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	4413      	add	r3, r2
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	7812      	ldrb	r2, [r2, #0]
 8007448:	701a      	strb	r2, [r3, #0]
  idx++;
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	3301      	adds	r3, #1
 800744e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	4413      	add	r3, r2
 8007456:	2203      	movs	r2, #3
 8007458:	701a      	strb	r2, [r3, #0]
  idx++;
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	3301      	adds	r3, #1
 800745e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007460:	e013      	b.n	800748a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	4413      	add	r3, r2
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	7812      	ldrb	r2, [r2, #0]
 800746c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	3301      	adds	r3, #1
 8007472:	613b      	str	r3, [r7, #16]
    idx++;
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	3301      	adds	r3, #1
 8007478:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800747a:	7dfb      	ldrb	r3, [r7, #23]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	4413      	add	r3, r2
 8007480:	2200      	movs	r2, #0
 8007482:	701a      	strb	r2, [r3, #0]
    idx++;
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	3301      	adds	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e7      	bne.n	8007462 <USBD_GetString+0x52>
 8007492:	e000      	b.n	8007496 <USBD_GetString+0x86>
    return;
 8007494:	bf00      	nop
  }
}
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074ac:	e005      	b.n	80074ba <USBD_GetLen+0x1e>
  {
    len++;
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	3301      	adds	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	3301      	adds	r3, #1
 80074b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1f5      	bne.n	80074ae <USBD_GetLen+0x12>
  }

  return len;
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2202      	movs	r2, #2
 80074e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	2100      	movs	r1, #0
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 fcf9 	bl	8007eee <USBD_LL_Transmit>

  return USBD_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	2100      	movs	r1, #0
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 fce8 	bl	8007eee <USBD_LL_Transmit>

  return USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2203      	movs	r2, #3
 8007538:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	2100      	movs	r1, #0
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 fcec 	bl	8007f30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	2100      	movs	r1, #0
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 fcdb 	bl	8007f30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2204      	movs	r2, #4
 8007590:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007594:	2300      	movs	r3, #0
 8007596:	2200      	movs	r2, #0
 8007598:	2100      	movs	r1, #0
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fca7 	bl	8007eee <USBD_LL_Transmit>

  return USBD_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b082      	sub	sp, #8
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2205      	movs	r2, #5
 80075b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075ba:	2300      	movs	r3, #0
 80075bc:	2200      	movs	r2, #0
 80075be:	2100      	movs	r1, #0
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fcb5 	bl	8007f30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075d4:	2200      	movs	r2, #0
 80075d6:	4912      	ldr	r1, [pc, #72]	; (8007620 <MX_USB_DEVICE_Init+0x50>)
 80075d8:	4812      	ldr	r0, [pc, #72]	; (8007624 <MX_USB_DEVICE_Init+0x54>)
 80075da:	f7fe fd07 	bl	8005fec <USBD_Init>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075e4:	f7f9 f990 	bl	8000908 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075e8:	490f      	ldr	r1, [pc, #60]	; (8007628 <MX_USB_DEVICE_Init+0x58>)
 80075ea:	480e      	ldr	r0, [pc, #56]	; (8007624 <MX_USB_DEVICE_Init+0x54>)
 80075ec:	f7fe fd2e 	bl	800604c <USBD_RegisterClass>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075f6:	f7f9 f987 	bl	8000908 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075fa:	490c      	ldr	r1, [pc, #48]	; (800762c <MX_USB_DEVICE_Init+0x5c>)
 80075fc:	4809      	ldr	r0, [pc, #36]	; (8007624 <MX_USB_DEVICE_Init+0x54>)
 80075fe:	f7fe fc1f 	bl	8005e40 <USBD_CDC_RegisterInterface>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007608:	f7f9 f97e 	bl	8000908 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800760c:	4805      	ldr	r0, [pc, #20]	; (8007624 <MX_USB_DEVICE_Init+0x54>)
 800760e:	f7fe fd53 	bl	80060b8 <USBD_Start>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007618:	f7f9 f976 	bl	8000908 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800761c:	bf00      	nop
 800761e:	bd80      	pop	{r7, pc}
 8007620:	200000ac 	.word	0x200000ac
 8007624:	2000040c 	.word	0x2000040c
 8007628:	20000018 	.word	0x20000018
 800762c:	20000098 	.word	0x20000098

08007630 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007634:	2200      	movs	r2, #0
 8007636:	4905      	ldr	r1, [pc, #20]	; (800764c <CDC_Init_FS+0x1c>)
 8007638:	4805      	ldr	r0, [pc, #20]	; (8007650 <CDC_Init_FS+0x20>)
 800763a:	f7fe fc1b 	bl	8005e74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800763e:	4905      	ldr	r1, [pc, #20]	; (8007654 <CDC_Init_FS+0x24>)
 8007640:	4803      	ldr	r0, [pc, #12]	; (8007650 <CDC_Init_FS+0x20>)
 8007642:	f7fe fc39 	bl	8005eb8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007646:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007648:	4618      	mov	r0, r3
 800764a:	bd80      	pop	{r7, pc}
 800764c:	20000ee8 	.word	0x20000ee8
 8007650:	2000040c 	.word	0x2000040c
 8007654:	200006e8 	.word	0x200006e8

08007658 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007658:	b480      	push	{r7}
 800765a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800765c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800765e:	4618      	mov	r0, r3
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	6039      	str	r1, [r7, #0]
 8007672:	71fb      	strb	r3, [r7, #7]
 8007674:	4613      	mov	r3, r2
 8007676:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	2b23      	cmp	r3, #35	; 0x23
 800767c:	d84a      	bhi.n	8007714 <CDC_Control_FS+0xac>
 800767e:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <CDC_Control_FS+0x1c>)
 8007680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007684:	08007715 	.word	0x08007715
 8007688:	08007715 	.word	0x08007715
 800768c:	08007715 	.word	0x08007715
 8007690:	08007715 	.word	0x08007715
 8007694:	08007715 	.word	0x08007715
 8007698:	08007715 	.word	0x08007715
 800769c:	08007715 	.word	0x08007715
 80076a0:	08007715 	.word	0x08007715
 80076a4:	08007715 	.word	0x08007715
 80076a8:	08007715 	.word	0x08007715
 80076ac:	08007715 	.word	0x08007715
 80076b0:	08007715 	.word	0x08007715
 80076b4:	08007715 	.word	0x08007715
 80076b8:	08007715 	.word	0x08007715
 80076bc:	08007715 	.word	0x08007715
 80076c0:	08007715 	.word	0x08007715
 80076c4:	08007715 	.word	0x08007715
 80076c8:	08007715 	.word	0x08007715
 80076cc:	08007715 	.word	0x08007715
 80076d0:	08007715 	.word	0x08007715
 80076d4:	08007715 	.word	0x08007715
 80076d8:	08007715 	.word	0x08007715
 80076dc:	08007715 	.word	0x08007715
 80076e0:	08007715 	.word	0x08007715
 80076e4:	08007715 	.word	0x08007715
 80076e8:	08007715 	.word	0x08007715
 80076ec:	08007715 	.word	0x08007715
 80076f0:	08007715 	.word	0x08007715
 80076f4:	08007715 	.word	0x08007715
 80076f8:	08007715 	.word	0x08007715
 80076fc:	08007715 	.word	0x08007715
 8007700:	08007715 	.word	0x08007715
 8007704:	08007715 	.word	0x08007715
 8007708:	08007715 	.word	0x08007715
 800770c:	08007715 	.word	0x08007715
 8007710:	08007715 	.word	0x08007715
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007714:	bf00      	nop
  }

  return (USBD_OK);
 8007716:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	4805      	ldr	r0, [pc, #20]	; (8007748 <CDC_Receive_FS+0x24>)
 8007732:	f7fe fbc1 	bl	8005eb8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007736:	4804      	ldr	r0, [pc, #16]	; (8007748 <CDC_Receive_FS+0x24>)
 8007738:	f7fe fc22 	bl	8005f80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800773c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	2000040c 	.word	0x2000040c

0800774c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800775c:	4b0d      	ldr	r3, [pc, #52]	; (8007794 <CDC_Transmit_FS+0x48>)
 800775e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007762:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800776e:	2301      	movs	r3, #1
 8007770:	e00b      	b.n	800778a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007772:	887b      	ldrh	r3, [r7, #2]
 8007774:	461a      	mov	r2, r3
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	4806      	ldr	r0, [pc, #24]	; (8007794 <CDC_Transmit_FS+0x48>)
 800777a:	f7fe fb7b 	bl	8005e74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800777e:	4805      	ldr	r0, [pc, #20]	; (8007794 <CDC_Transmit_FS+0x48>)
 8007780:	f7fe fbb8 	bl	8005ef4 <USBD_CDC_TransmitPacket>
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	2000040c 	.word	0x2000040c

08007798 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	4613      	mov	r3, r2
 80077a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80077aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	371c      	adds	r7, #28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
	...

080077bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	4603      	mov	r3, r0
 80077c4:	6039      	str	r1, [r7, #0]
 80077c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2212      	movs	r2, #18
 80077cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077ce:	4b03      	ldr	r3, [pc, #12]	; (80077dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	200000c8 	.word	0x200000c8

080077e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	6039      	str	r1, [r7, #0]
 80077ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2204      	movs	r2, #4
 80077f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077f2:	4b03      	ldr	r3, [pc, #12]	; (8007800 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	200000dc 	.word	0x200000dc

08007804 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	4603      	mov	r3, r0
 800780c:	6039      	str	r1, [r7, #0]
 800780e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d105      	bne.n	8007822 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	4907      	ldr	r1, [pc, #28]	; (8007838 <USBD_FS_ProductStrDescriptor+0x34>)
 800781a:	4808      	ldr	r0, [pc, #32]	; (800783c <USBD_FS_ProductStrDescriptor+0x38>)
 800781c:	f7ff fdf8 	bl	8007410 <USBD_GetString>
 8007820:	e004      	b.n	800782c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	4904      	ldr	r1, [pc, #16]	; (8007838 <USBD_FS_ProductStrDescriptor+0x34>)
 8007826:	4805      	ldr	r0, [pc, #20]	; (800783c <USBD_FS_ProductStrDescriptor+0x38>)
 8007828:	f7ff fdf2 	bl	8007410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800782c:	4b02      	ldr	r3, [pc, #8]	; (8007838 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200016e8 	.word	0x200016e8
 800783c:	08008994 	.word	0x08008994

08007840 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	4603      	mov	r3, r0
 8007848:	6039      	str	r1, [r7, #0]
 800784a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	4904      	ldr	r1, [pc, #16]	; (8007860 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007850:	4804      	ldr	r0, [pc, #16]	; (8007864 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007852:	f7ff fddd 	bl	8007410 <USBD_GetString>
  return USBD_StrDesc;
 8007856:	4b02      	ldr	r3, [pc, #8]	; (8007860 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	200016e8 	.word	0x200016e8
 8007864:	080089ac 	.word	0x080089ac

08007868 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	6039      	str	r1, [r7, #0]
 8007872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	221a      	movs	r2, #26
 8007878:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800787a:	f000 f843 	bl	8007904 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800787e:	4b02      	ldr	r3, [pc, #8]	; (8007888 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	200000e0 	.word	0x200000e0

0800788c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	4603      	mov	r3, r0
 8007894:	6039      	str	r1, [r7, #0]
 8007896:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007898:	79fb      	ldrb	r3, [r7, #7]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d105      	bne.n	80078aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	4907      	ldr	r1, [pc, #28]	; (80078c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078a2:	4808      	ldr	r0, [pc, #32]	; (80078c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078a4:	f7ff fdb4 	bl	8007410 <USBD_GetString>
 80078a8:	e004      	b.n	80078b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	4904      	ldr	r1, [pc, #16]	; (80078c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078ae:	4805      	ldr	r0, [pc, #20]	; (80078c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078b0:	f7ff fdae 	bl	8007410 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078b4:	4b02      	ldr	r3, [pc, #8]	; (80078c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	200016e8 	.word	0x200016e8
 80078c4:	080089b4 	.word	0x080089b4

080078c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	6039      	str	r1, [r7, #0]
 80078d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078d4:	79fb      	ldrb	r3, [r7, #7]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	4907      	ldr	r1, [pc, #28]	; (80078fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078de:	4808      	ldr	r0, [pc, #32]	; (8007900 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078e0:	f7ff fd96 	bl	8007410 <USBD_GetString>
 80078e4:	e004      	b.n	80078f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	4904      	ldr	r1, [pc, #16]	; (80078fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078ea:	4805      	ldr	r0, [pc, #20]	; (8007900 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078ec:	f7ff fd90 	bl	8007410 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078f0:	4b02      	ldr	r3, [pc, #8]	; (80078fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	200016e8 	.word	0x200016e8
 8007900:	080089c0 	.word	0x080089c0

08007904 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800790a:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <Get_SerialNum+0x44>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007910:	4b0e      	ldr	r3, [pc, #56]	; (800794c <Get_SerialNum+0x48>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007916:	4b0e      	ldr	r3, [pc, #56]	; (8007950 <Get_SerialNum+0x4c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4413      	add	r3, r2
 8007922:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d009      	beq.n	800793e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800792a:	2208      	movs	r2, #8
 800792c:	4909      	ldr	r1, [pc, #36]	; (8007954 <Get_SerialNum+0x50>)
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 f814 	bl	800795c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007934:	2204      	movs	r2, #4
 8007936:	4908      	ldr	r1, [pc, #32]	; (8007958 <Get_SerialNum+0x54>)
 8007938:	68b8      	ldr	r0, [r7, #8]
 800793a:	f000 f80f 	bl	800795c <IntToUnicode>
  }
}
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	1fff7a10 	.word	0x1fff7a10
 800794c:	1fff7a14 	.word	0x1fff7a14
 8007950:	1fff7a18 	.word	0x1fff7a18
 8007954:	200000e2 	.word	0x200000e2
 8007958:	200000f2 	.word	0x200000f2

0800795c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800796a:	2300      	movs	r3, #0
 800796c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800796e:	2300      	movs	r3, #0
 8007970:	75fb      	strb	r3, [r7, #23]
 8007972:	e027      	b.n	80079c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	0f1b      	lsrs	r3, r3, #28
 8007978:	2b09      	cmp	r3, #9
 800797a:	d80b      	bhi.n	8007994 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	0f1b      	lsrs	r3, r3, #28
 8007980:	b2da      	uxtb	r2, r3
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	4619      	mov	r1, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	440b      	add	r3, r1
 800798c:	3230      	adds	r2, #48	; 0x30
 800798e:	b2d2      	uxtb	r2, r2
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	e00a      	b.n	80079aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	0f1b      	lsrs	r3, r3, #28
 8007998:	b2da      	uxtb	r2, r3
 800799a:	7dfb      	ldrb	r3, [r7, #23]
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	4619      	mov	r1, r3
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	440b      	add	r3, r1
 80079a4:	3237      	adds	r2, #55	; 0x37
 80079a6:	b2d2      	uxtb	r2, r2
 80079a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	3301      	adds	r3, #1
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	4413      	add	r3, r2
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	3301      	adds	r3, #1
 80079c2:	75fb      	strb	r3, [r7, #23]
 80079c4:	7dfa      	ldrb	r2, [r7, #23]
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d3d3      	bcc.n	8007974 <IntToUnicode+0x18>
  }
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
	...

080079dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b08a      	sub	sp, #40	; 0x28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079e4:	f107 0314 	add.w	r3, r7, #20
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	605a      	str	r2, [r3, #4]
 80079ee:	609a      	str	r2, [r3, #8]
 80079f0:	60da      	str	r2, [r3, #12]
 80079f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079fc:	d147      	bne.n	8007a8e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079fe:	2300      	movs	r3, #0
 8007a00:	613b      	str	r3, [r7, #16]
 8007a02:	4b25      	ldr	r3, [pc, #148]	; (8007a98 <HAL_PCD_MspInit+0xbc>)
 8007a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a06:	4a24      	ldr	r2, [pc, #144]	; (8007a98 <HAL_PCD_MspInit+0xbc>)
 8007a08:	f043 0301 	orr.w	r3, r3, #1
 8007a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a0e:	4b22      	ldr	r3, [pc, #136]	; (8007a98 <HAL_PCD_MspInit+0xbc>)
 8007a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007a1a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a20:	2302      	movs	r3, #2
 8007a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a24:	2300      	movs	r3, #0
 8007a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a2c:	230a      	movs	r3, #10
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a30:	f107 0314 	add.w	r3, r7, #20
 8007a34:	4619      	mov	r1, r3
 8007a36:	4819      	ldr	r0, [pc, #100]	; (8007a9c <HAL_PCD_MspInit+0xc0>)
 8007a38:	f7f9 fe18 	bl	800166c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a42:	2300      	movs	r3, #0
 8007a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007a4a:	f107 0314 	add.w	r3, r7, #20
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4812      	ldr	r0, [pc, #72]	; (8007a9c <HAL_PCD_MspInit+0xc0>)
 8007a52:	f7f9 fe0b 	bl	800166c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a56:	4b10      	ldr	r3, [pc, #64]	; (8007a98 <HAL_PCD_MspInit+0xbc>)
 8007a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5a:	4a0f      	ldr	r2, [pc, #60]	; (8007a98 <HAL_PCD_MspInit+0xbc>)
 8007a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a60:	6353      	str	r3, [r2, #52]	; 0x34
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <HAL_PCD_MspInit+0xbc>)
 8007a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6a:	4a0b      	ldr	r2, [pc, #44]	; (8007a98 <HAL_PCD_MspInit+0xbc>)
 8007a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a70:	6453      	str	r3, [r2, #68]	; 0x44
 8007a72:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <HAL_PCD_MspInit+0xbc>)
 8007a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	2043      	movs	r0, #67	; 0x43
 8007a84:	f7f9 fa93 	bl	8000fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a88:	2043      	movs	r0, #67	; 0x43
 8007a8a:	f7f9 faac 	bl	8000fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a8e:	bf00      	nop
 8007a90:	3728      	adds	r7, #40	; 0x28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	40023800 	.word	0x40023800
 8007a9c:	40020000 	.word	0x40020000

08007aa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	f7fe fb4b 	bl	8006152 <USBD_LL_SetupStage>
}
 8007abc:	bf00      	nop
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ad6:	78fa      	ldrb	r2, [r7, #3]
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	4613      	mov	r3, r2
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	78fb      	ldrb	r3, [r7, #3]
 8007aec:	4619      	mov	r1, r3
 8007aee:	f7fe fb85 	bl	80061fc <USBD_LL_DataOutStage>
}
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b082      	sub	sp, #8
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	460b      	mov	r3, r1
 8007b04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007b0c:	78fa      	ldrb	r2, [r7, #3]
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	334c      	adds	r3, #76	; 0x4c
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	4619      	mov	r1, r3
 8007b22:	f7fe fc1e 	bl	8006362 <USBD_LL_DataInStage>
}
 8007b26:	bf00      	nop
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe fd52 	bl	80065e6 <USBD_LL_SOF>
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b52:	2301      	movs	r3, #1
 8007b54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d102      	bne.n	8007b64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]
 8007b62:	e008      	b.n	8007b76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d102      	bne.n	8007b72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	73fb      	strb	r3, [r7, #15]
 8007b70:	e001      	b.n	8007b76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007b72:	f7f8 fec9 	bl	8000908 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b7c:	7bfa      	ldrb	r2, [r7, #15]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fe fcf2 	bl	800656a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fc9a 	bl	80064c6 <USBD_LL_Reset>
}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fced 	bl	800658a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bc2:	f043 0301 	orr.w	r3, r3, #1
 8007bc6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bd0:	4b04      	ldr	r3, [pc, #16]	; (8007be4 <HAL_PCD_SuspendCallback+0x48>)
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	4a03      	ldr	r2, [pc, #12]	; (8007be4 <HAL_PCD_SuspendCallback+0x48>)
 8007bd6:	f043 0306 	orr.w	r3, r3, #6
 8007bda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	e000ed00 	.word	0xe000ed00

08007be8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fe fcdd 	bl	80065b6 <USBD_LL_Resume>
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe fd35 	bl	800668a <USBD_LL_IsoOUTIncomplete>
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c3a:	78fa      	ldrb	r2, [r7, #3]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe fcf1 	bl	8006626 <USBD_LL_IsoINIncomplete>
}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe fd47 	bl	80066ee <USBD_LL_DevConnected>
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fd44 	bl	8006704 <USBD_LL_DevDisconnected>
}
 8007c7c:	bf00      	nop
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d13c      	bne.n	8007d0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c94:	4a20      	ldr	r2, [pc, #128]	; (8007d18 <USBD_LL_Init+0x94>)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <USBD_LL_Init+0x94>)
 8007ca0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ca4:	4b1c      	ldr	r3, [pc, #112]	; (8007d18 <USBD_LL_Init+0x94>)
 8007ca6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007caa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007cac:	4b1a      	ldr	r3, [pc, #104]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cae:	2204      	movs	r2, #4
 8007cb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007cb2:	4b19      	ldr	r3, [pc, #100]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007cb8:	4b17      	ldr	r3, [pc, #92]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007cbe:	4b16      	ldr	r3, [pc, #88]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007cc4:	4b14      	ldr	r3, [pc, #80]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007cca:	4b13      	ldr	r3, [pc, #76]	; (8007d18 <USBD_LL_Init+0x94>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007cd0:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007cd6:	4b10      	ldr	r3, [pc, #64]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cd8:	2201      	movs	r2, #1
 8007cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007cdc:	4b0e      	ldr	r3, [pc, #56]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ce2:	480d      	ldr	r0, [pc, #52]	; (8007d18 <USBD_LL_Init+0x94>)
 8007ce4:	f7f9 fe87 	bl	80019f6 <HAL_PCD_Init>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007cee:	f7f8 fe0b 	bl	8000908 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007cf2:	2180      	movs	r1, #128	; 0x80
 8007cf4:	4808      	ldr	r0, [pc, #32]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cf6:	f7fb f8de 	bl	8002eb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007cfa:	2240      	movs	r2, #64	; 0x40
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4806      	ldr	r0, [pc, #24]	; (8007d18 <USBD_LL_Init+0x94>)
 8007d00:	f7fb f892 	bl	8002e28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d04:	2280      	movs	r2, #128	; 0x80
 8007d06:	2101      	movs	r1, #1
 8007d08:	4803      	ldr	r0, [pc, #12]	; (8007d18 <USBD_LL_Init+0x94>)
 8007d0a:	f7fb f88d 	bl	8002e28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	200018e8 	.word	0x200018e8

08007d1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7f9 ff7c 	bl	8001c30 <HAL_PCD_Start>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 f942 	bl	8007fc8 <USBD_Get_USB_Status>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	4608      	mov	r0, r1
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	461a      	mov	r2, r3
 8007d60:	4603      	mov	r3, r0
 8007d62:	70fb      	strb	r3, [r7, #3]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70bb      	strb	r3, [r7, #2]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d7a:	78bb      	ldrb	r3, [r7, #2]
 8007d7c:	883a      	ldrh	r2, [r7, #0]
 8007d7e:	78f9      	ldrb	r1, [r7, #3]
 8007d80:	f7fa fc4d 	bl	800261e <HAL_PCD_EP_Open>
 8007d84:	4603      	mov	r3, r0
 8007d86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 f91c 	bl	8007fc8 <USBD_Get_USB_Status>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007db8:	78fa      	ldrb	r2, [r7, #3]
 8007dba:	4611      	mov	r1, r2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fa fc96 	bl	80026ee <HAL_PCD_EP_Close>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 f8fd 	bl	8007fc8 <USBD_Get_USB_Status>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	460b      	mov	r3, r1
 8007de6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007df6:	78fa      	ldrb	r2, [r7, #3]
 8007df8:	4611      	mov	r1, r2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fa fd6e 	bl	80028dc <HAL_PCD_EP_SetStall>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 f8de 	bl	8007fc8 <USBD_Get_USB_Status>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	460b      	mov	r3, r1
 8007e24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e34:	78fa      	ldrb	r2, [r7, #3]
 8007e36:	4611      	mov	r1, r2
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fa fdb3 	bl	80029a4 <HAL_PCD_EP_ClrStall>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 f8bf 	bl	8007fc8 <USBD_Get_USB_Status>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	da0b      	bge.n	8007e8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e7a:	68f9      	ldr	r1, [r7, #12]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	4413      	add	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	440b      	add	r3, r1
 8007e86:	333e      	adds	r3, #62	; 0x3e
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	e00b      	b.n	8007ea4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e92:	68f9      	ldr	r1, [r7, #12]
 8007e94:	4613      	mov	r3, r2
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	4413      	add	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	440b      	add	r3, r1
 8007e9e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007ea2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	4611      	mov	r1, r2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fa fb80 	bl	80025d4 <HAL_PCD_SetAddress>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 f874 	bl	8007fc8 <USBD_Get_USB_Status>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b086      	sub	sp, #24
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
 8007efa:	460b      	mov	r3, r1
 8007efc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f0c:	7af9      	ldrb	r1, [r7, #11]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	f7fa fc99 	bl	8002848 <HAL_PCD_EP_Transmit>
 8007f16:	4603      	mov	r3, r0
 8007f18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 f853 	bl	8007fc8 <USBD_Get_USB_Status>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f26:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	607a      	str	r2, [r7, #4]
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f4e:	7af9      	ldrb	r1, [r7, #11]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	f7fa fc15 	bl	8002782 <HAL_PCD_EP_Receive>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f832 	bl	8007fc8 <USBD_Get_USB_Status>
 8007f64:	4603      	mov	r3, r0
 8007f66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f68:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b082      	sub	sp, #8
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	4611      	mov	r1, r2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fa fc45 	bl	8002818 <HAL_PCD_EP_GetRxCount>
 8007f8e:	4603      	mov	r3, r0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007fa0:	4b03      	ldr	r3, [pc, #12]	; (8007fb0 <USBD_static_malloc+0x18>)
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	20001df4 	.word	0x20001df4

08007fb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]

}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007fd6:	79fb      	ldrb	r3, [r7, #7]
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d817      	bhi.n	800800c <USBD_Get_USB_Status+0x44>
 8007fdc:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <USBD_Get_USB_Status+0x1c>)
 8007fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe2:	bf00      	nop
 8007fe4:	08007ff5 	.word	0x08007ff5
 8007fe8:	08007ffb 	.word	0x08007ffb
 8007fec:	08008001 	.word	0x08008001
 8007ff0:	08008007 	.word	0x08008007
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ff8:	e00b      	b.n	8008012 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	73fb      	strb	r3, [r7, #15]
    break;
 8007ffe:	e008      	b.n	8008012 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008000:	2301      	movs	r3, #1
 8008002:	73fb      	strb	r3, [r7, #15]
    break;
 8008004:	e005      	b.n	8008012 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008006:	2303      	movs	r3, #3
 8008008:	73fb      	strb	r3, [r7, #15]
    break;
 800800a:	e002      	b.n	8008012 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800800c:	2303      	movs	r3, #3
 800800e:	73fb      	strb	r3, [r7, #15]
    break;
 8008010:	bf00      	nop
  }
  return usb_status;
 8008012:	7bfb      	ldrb	r3, [r7, #15]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <siprintf>:
 8008020:	b40e      	push	{r1, r2, r3}
 8008022:	b500      	push	{lr}
 8008024:	b09c      	sub	sp, #112	; 0x70
 8008026:	ab1d      	add	r3, sp, #116	; 0x74
 8008028:	9002      	str	r0, [sp, #8]
 800802a:	9006      	str	r0, [sp, #24]
 800802c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008030:	4809      	ldr	r0, [pc, #36]	; (8008058 <siprintf+0x38>)
 8008032:	9107      	str	r1, [sp, #28]
 8008034:	9104      	str	r1, [sp, #16]
 8008036:	4909      	ldr	r1, [pc, #36]	; (800805c <siprintf+0x3c>)
 8008038:	f853 2b04 	ldr.w	r2, [r3], #4
 800803c:	9105      	str	r1, [sp, #20]
 800803e:	6800      	ldr	r0, [r0, #0]
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	a902      	add	r1, sp, #8
 8008044:	f000 f992 	bl	800836c <_svfiprintf_r>
 8008048:	9b02      	ldr	r3, [sp, #8]
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	b01c      	add	sp, #112	; 0x70
 8008050:	f85d eb04 	ldr.w	lr, [sp], #4
 8008054:	b003      	add	sp, #12
 8008056:	4770      	bx	lr
 8008058:	20000148 	.word	0x20000148
 800805c:	ffff0208 	.word	0xffff0208

08008060 <memset>:
 8008060:	4402      	add	r2, r0
 8008062:	4603      	mov	r3, r0
 8008064:	4293      	cmp	r3, r2
 8008066:	d100      	bne.n	800806a <memset+0xa>
 8008068:	4770      	bx	lr
 800806a:	f803 1b01 	strb.w	r1, [r3], #1
 800806e:	e7f9      	b.n	8008064 <memset+0x4>

08008070 <__errno>:
 8008070:	4b01      	ldr	r3, [pc, #4]	; (8008078 <__errno+0x8>)
 8008072:	6818      	ldr	r0, [r3, #0]
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	20000148 	.word	0x20000148

0800807c <__libc_init_array>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	4d0d      	ldr	r5, [pc, #52]	; (80080b4 <__libc_init_array+0x38>)
 8008080:	4c0d      	ldr	r4, [pc, #52]	; (80080b8 <__libc_init_array+0x3c>)
 8008082:	1b64      	subs	r4, r4, r5
 8008084:	10a4      	asrs	r4, r4, #2
 8008086:	2600      	movs	r6, #0
 8008088:	42a6      	cmp	r6, r4
 800808a:	d109      	bne.n	80080a0 <__libc_init_array+0x24>
 800808c:	4d0b      	ldr	r5, [pc, #44]	; (80080bc <__libc_init_array+0x40>)
 800808e:	4c0c      	ldr	r4, [pc, #48]	; (80080c0 <__libc_init_array+0x44>)
 8008090:	f000 fc6a 	bl	8008968 <_init>
 8008094:	1b64      	subs	r4, r4, r5
 8008096:	10a4      	asrs	r4, r4, #2
 8008098:	2600      	movs	r6, #0
 800809a:	42a6      	cmp	r6, r4
 800809c:	d105      	bne.n	80080aa <__libc_init_array+0x2e>
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a4:	4798      	blx	r3
 80080a6:	3601      	adds	r6, #1
 80080a8:	e7ee      	b.n	8008088 <__libc_init_array+0xc>
 80080aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ae:	4798      	blx	r3
 80080b0:	3601      	adds	r6, #1
 80080b2:	e7f2      	b.n	800809a <__libc_init_array+0x1e>
 80080b4:	08008a24 	.word	0x08008a24
 80080b8:	08008a24 	.word	0x08008a24
 80080bc:	08008a24 	.word	0x08008a24
 80080c0:	08008a28 	.word	0x08008a28

080080c4 <__retarget_lock_acquire_recursive>:
 80080c4:	4770      	bx	lr

080080c6 <__retarget_lock_release_recursive>:
 80080c6:	4770      	bx	lr

080080c8 <_free_r>:
 80080c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ca:	2900      	cmp	r1, #0
 80080cc:	d044      	beq.n	8008158 <_free_r+0x90>
 80080ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d2:	9001      	str	r0, [sp, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f1a1 0404 	sub.w	r4, r1, #4
 80080da:	bfb8      	it	lt
 80080dc:	18e4      	addlt	r4, r4, r3
 80080de:	f000 f8df 	bl	80082a0 <__malloc_lock>
 80080e2:	4a1e      	ldr	r2, [pc, #120]	; (800815c <_free_r+0x94>)
 80080e4:	9801      	ldr	r0, [sp, #4]
 80080e6:	6813      	ldr	r3, [r2, #0]
 80080e8:	b933      	cbnz	r3, 80080f8 <_free_r+0x30>
 80080ea:	6063      	str	r3, [r4, #4]
 80080ec:	6014      	str	r4, [r2, #0]
 80080ee:	b003      	add	sp, #12
 80080f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080f4:	f000 b8da 	b.w	80082ac <__malloc_unlock>
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	d908      	bls.n	800810e <_free_r+0x46>
 80080fc:	6825      	ldr	r5, [r4, #0]
 80080fe:	1961      	adds	r1, r4, r5
 8008100:	428b      	cmp	r3, r1
 8008102:	bf01      	itttt	eq
 8008104:	6819      	ldreq	r1, [r3, #0]
 8008106:	685b      	ldreq	r3, [r3, #4]
 8008108:	1949      	addeq	r1, r1, r5
 800810a:	6021      	streq	r1, [r4, #0]
 800810c:	e7ed      	b.n	80080ea <_free_r+0x22>
 800810e:	461a      	mov	r2, r3
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	b10b      	cbz	r3, 8008118 <_free_r+0x50>
 8008114:	42a3      	cmp	r3, r4
 8008116:	d9fa      	bls.n	800810e <_free_r+0x46>
 8008118:	6811      	ldr	r1, [r2, #0]
 800811a:	1855      	adds	r5, r2, r1
 800811c:	42a5      	cmp	r5, r4
 800811e:	d10b      	bne.n	8008138 <_free_r+0x70>
 8008120:	6824      	ldr	r4, [r4, #0]
 8008122:	4421      	add	r1, r4
 8008124:	1854      	adds	r4, r2, r1
 8008126:	42a3      	cmp	r3, r4
 8008128:	6011      	str	r1, [r2, #0]
 800812a:	d1e0      	bne.n	80080ee <_free_r+0x26>
 800812c:	681c      	ldr	r4, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	6053      	str	r3, [r2, #4]
 8008132:	440c      	add	r4, r1
 8008134:	6014      	str	r4, [r2, #0]
 8008136:	e7da      	b.n	80080ee <_free_r+0x26>
 8008138:	d902      	bls.n	8008140 <_free_r+0x78>
 800813a:	230c      	movs	r3, #12
 800813c:	6003      	str	r3, [r0, #0]
 800813e:	e7d6      	b.n	80080ee <_free_r+0x26>
 8008140:	6825      	ldr	r5, [r4, #0]
 8008142:	1961      	adds	r1, r4, r5
 8008144:	428b      	cmp	r3, r1
 8008146:	bf04      	itt	eq
 8008148:	6819      	ldreq	r1, [r3, #0]
 800814a:	685b      	ldreq	r3, [r3, #4]
 800814c:	6063      	str	r3, [r4, #4]
 800814e:	bf04      	itt	eq
 8008150:	1949      	addeq	r1, r1, r5
 8008152:	6021      	streq	r1, [r4, #0]
 8008154:	6054      	str	r4, [r2, #4]
 8008156:	e7ca      	b.n	80080ee <_free_r+0x26>
 8008158:	b003      	add	sp, #12
 800815a:	bd30      	pop	{r4, r5, pc}
 800815c:	20002154 	.word	0x20002154

08008160 <sbrk_aligned>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	4e0e      	ldr	r6, [pc, #56]	; (800819c <sbrk_aligned+0x3c>)
 8008164:	460c      	mov	r4, r1
 8008166:	6831      	ldr	r1, [r6, #0]
 8008168:	4605      	mov	r5, r0
 800816a:	b911      	cbnz	r1, 8008172 <sbrk_aligned+0x12>
 800816c:	f000 fba6 	bl	80088bc <_sbrk_r>
 8008170:	6030      	str	r0, [r6, #0]
 8008172:	4621      	mov	r1, r4
 8008174:	4628      	mov	r0, r5
 8008176:	f000 fba1 	bl	80088bc <_sbrk_r>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d00a      	beq.n	8008194 <sbrk_aligned+0x34>
 800817e:	1cc4      	adds	r4, r0, #3
 8008180:	f024 0403 	bic.w	r4, r4, #3
 8008184:	42a0      	cmp	r0, r4
 8008186:	d007      	beq.n	8008198 <sbrk_aligned+0x38>
 8008188:	1a21      	subs	r1, r4, r0
 800818a:	4628      	mov	r0, r5
 800818c:	f000 fb96 	bl	80088bc <_sbrk_r>
 8008190:	3001      	adds	r0, #1
 8008192:	d101      	bne.n	8008198 <sbrk_aligned+0x38>
 8008194:	f04f 34ff 	mov.w	r4, #4294967295
 8008198:	4620      	mov	r0, r4
 800819a:	bd70      	pop	{r4, r5, r6, pc}
 800819c:	20002158 	.word	0x20002158

080081a0 <_malloc_r>:
 80081a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a4:	1ccd      	adds	r5, r1, #3
 80081a6:	f025 0503 	bic.w	r5, r5, #3
 80081aa:	3508      	adds	r5, #8
 80081ac:	2d0c      	cmp	r5, #12
 80081ae:	bf38      	it	cc
 80081b0:	250c      	movcc	r5, #12
 80081b2:	2d00      	cmp	r5, #0
 80081b4:	4607      	mov	r7, r0
 80081b6:	db01      	blt.n	80081bc <_malloc_r+0x1c>
 80081b8:	42a9      	cmp	r1, r5
 80081ba:	d905      	bls.n	80081c8 <_malloc_r+0x28>
 80081bc:	230c      	movs	r3, #12
 80081be:	603b      	str	r3, [r7, #0]
 80081c0:	2600      	movs	r6, #0
 80081c2:	4630      	mov	r0, r6
 80081c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800829c <_malloc_r+0xfc>
 80081cc:	f000 f868 	bl	80082a0 <__malloc_lock>
 80081d0:	f8d8 3000 	ldr.w	r3, [r8]
 80081d4:	461c      	mov	r4, r3
 80081d6:	bb5c      	cbnz	r4, 8008230 <_malloc_r+0x90>
 80081d8:	4629      	mov	r1, r5
 80081da:	4638      	mov	r0, r7
 80081dc:	f7ff ffc0 	bl	8008160 <sbrk_aligned>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	4604      	mov	r4, r0
 80081e4:	d155      	bne.n	8008292 <_malloc_r+0xf2>
 80081e6:	f8d8 4000 	ldr.w	r4, [r8]
 80081ea:	4626      	mov	r6, r4
 80081ec:	2e00      	cmp	r6, #0
 80081ee:	d145      	bne.n	800827c <_malloc_r+0xdc>
 80081f0:	2c00      	cmp	r4, #0
 80081f2:	d048      	beq.n	8008286 <_malloc_r+0xe6>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	4631      	mov	r1, r6
 80081f8:	4638      	mov	r0, r7
 80081fa:	eb04 0903 	add.w	r9, r4, r3
 80081fe:	f000 fb5d 	bl	80088bc <_sbrk_r>
 8008202:	4581      	cmp	r9, r0
 8008204:	d13f      	bne.n	8008286 <_malloc_r+0xe6>
 8008206:	6821      	ldr	r1, [r4, #0]
 8008208:	1a6d      	subs	r5, r5, r1
 800820a:	4629      	mov	r1, r5
 800820c:	4638      	mov	r0, r7
 800820e:	f7ff ffa7 	bl	8008160 <sbrk_aligned>
 8008212:	3001      	adds	r0, #1
 8008214:	d037      	beq.n	8008286 <_malloc_r+0xe6>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	442b      	add	r3, r5
 800821a:	6023      	str	r3, [r4, #0]
 800821c:	f8d8 3000 	ldr.w	r3, [r8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d038      	beq.n	8008296 <_malloc_r+0xf6>
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	42a2      	cmp	r2, r4
 8008228:	d12b      	bne.n	8008282 <_malloc_r+0xe2>
 800822a:	2200      	movs	r2, #0
 800822c:	605a      	str	r2, [r3, #4]
 800822e:	e00f      	b.n	8008250 <_malloc_r+0xb0>
 8008230:	6822      	ldr	r2, [r4, #0]
 8008232:	1b52      	subs	r2, r2, r5
 8008234:	d41f      	bmi.n	8008276 <_malloc_r+0xd6>
 8008236:	2a0b      	cmp	r2, #11
 8008238:	d917      	bls.n	800826a <_malloc_r+0xca>
 800823a:	1961      	adds	r1, r4, r5
 800823c:	42a3      	cmp	r3, r4
 800823e:	6025      	str	r5, [r4, #0]
 8008240:	bf18      	it	ne
 8008242:	6059      	strne	r1, [r3, #4]
 8008244:	6863      	ldr	r3, [r4, #4]
 8008246:	bf08      	it	eq
 8008248:	f8c8 1000 	streq.w	r1, [r8]
 800824c:	5162      	str	r2, [r4, r5]
 800824e:	604b      	str	r3, [r1, #4]
 8008250:	4638      	mov	r0, r7
 8008252:	f104 060b 	add.w	r6, r4, #11
 8008256:	f000 f829 	bl	80082ac <__malloc_unlock>
 800825a:	f026 0607 	bic.w	r6, r6, #7
 800825e:	1d23      	adds	r3, r4, #4
 8008260:	1af2      	subs	r2, r6, r3
 8008262:	d0ae      	beq.n	80081c2 <_malloc_r+0x22>
 8008264:	1b9b      	subs	r3, r3, r6
 8008266:	50a3      	str	r3, [r4, r2]
 8008268:	e7ab      	b.n	80081c2 <_malloc_r+0x22>
 800826a:	42a3      	cmp	r3, r4
 800826c:	6862      	ldr	r2, [r4, #4]
 800826e:	d1dd      	bne.n	800822c <_malloc_r+0x8c>
 8008270:	f8c8 2000 	str.w	r2, [r8]
 8008274:	e7ec      	b.n	8008250 <_malloc_r+0xb0>
 8008276:	4623      	mov	r3, r4
 8008278:	6864      	ldr	r4, [r4, #4]
 800827a:	e7ac      	b.n	80081d6 <_malloc_r+0x36>
 800827c:	4634      	mov	r4, r6
 800827e:	6876      	ldr	r6, [r6, #4]
 8008280:	e7b4      	b.n	80081ec <_malloc_r+0x4c>
 8008282:	4613      	mov	r3, r2
 8008284:	e7cc      	b.n	8008220 <_malloc_r+0x80>
 8008286:	230c      	movs	r3, #12
 8008288:	603b      	str	r3, [r7, #0]
 800828a:	4638      	mov	r0, r7
 800828c:	f000 f80e 	bl	80082ac <__malloc_unlock>
 8008290:	e797      	b.n	80081c2 <_malloc_r+0x22>
 8008292:	6025      	str	r5, [r4, #0]
 8008294:	e7dc      	b.n	8008250 <_malloc_r+0xb0>
 8008296:	605b      	str	r3, [r3, #4]
 8008298:	deff      	udf	#255	; 0xff
 800829a:	bf00      	nop
 800829c:	20002154 	.word	0x20002154

080082a0 <__malloc_lock>:
 80082a0:	4801      	ldr	r0, [pc, #4]	; (80082a8 <__malloc_lock+0x8>)
 80082a2:	f7ff bf0f 	b.w	80080c4 <__retarget_lock_acquire_recursive>
 80082a6:	bf00      	nop
 80082a8:	20002150 	.word	0x20002150

080082ac <__malloc_unlock>:
 80082ac:	4801      	ldr	r0, [pc, #4]	; (80082b4 <__malloc_unlock+0x8>)
 80082ae:	f7ff bf0a 	b.w	80080c6 <__retarget_lock_release_recursive>
 80082b2:	bf00      	nop
 80082b4:	20002150 	.word	0x20002150

080082b8 <__ssputs_r>:
 80082b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082bc:	688e      	ldr	r6, [r1, #8]
 80082be:	461f      	mov	r7, r3
 80082c0:	42be      	cmp	r6, r7
 80082c2:	680b      	ldr	r3, [r1, #0]
 80082c4:	4682      	mov	sl, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	4690      	mov	r8, r2
 80082ca:	d82c      	bhi.n	8008326 <__ssputs_r+0x6e>
 80082cc:	898a      	ldrh	r2, [r1, #12]
 80082ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082d2:	d026      	beq.n	8008322 <__ssputs_r+0x6a>
 80082d4:	6965      	ldr	r5, [r4, #20]
 80082d6:	6909      	ldr	r1, [r1, #16]
 80082d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082dc:	eba3 0901 	sub.w	r9, r3, r1
 80082e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082e4:	1c7b      	adds	r3, r7, #1
 80082e6:	444b      	add	r3, r9
 80082e8:	106d      	asrs	r5, r5, #1
 80082ea:	429d      	cmp	r5, r3
 80082ec:	bf38      	it	cc
 80082ee:	461d      	movcc	r5, r3
 80082f0:	0553      	lsls	r3, r2, #21
 80082f2:	d527      	bpl.n	8008344 <__ssputs_r+0x8c>
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7ff ff53 	bl	80081a0 <_malloc_r>
 80082fa:	4606      	mov	r6, r0
 80082fc:	b360      	cbz	r0, 8008358 <__ssputs_r+0xa0>
 80082fe:	6921      	ldr	r1, [r4, #16]
 8008300:	464a      	mov	r2, r9
 8008302:	f000 faeb 	bl	80088dc <memcpy>
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800830c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008310:	81a3      	strh	r3, [r4, #12]
 8008312:	6126      	str	r6, [r4, #16]
 8008314:	6165      	str	r5, [r4, #20]
 8008316:	444e      	add	r6, r9
 8008318:	eba5 0509 	sub.w	r5, r5, r9
 800831c:	6026      	str	r6, [r4, #0]
 800831e:	60a5      	str	r5, [r4, #8]
 8008320:	463e      	mov	r6, r7
 8008322:	42be      	cmp	r6, r7
 8008324:	d900      	bls.n	8008328 <__ssputs_r+0x70>
 8008326:	463e      	mov	r6, r7
 8008328:	6820      	ldr	r0, [r4, #0]
 800832a:	4632      	mov	r2, r6
 800832c:	4641      	mov	r1, r8
 800832e:	f000 faab 	bl	8008888 <memmove>
 8008332:	68a3      	ldr	r3, [r4, #8]
 8008334:	1b9b      	subs	r3, r3, r6
 8008336:	60a3      	str	r3, [r4, #8]
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	4433      	add	r3, r6
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	2000      	movs	r0, #0
 8008340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008344:	462a      	mov	r2, r5
 8008346:	f000 fad7 	bl	80088f8 <_realloc_r>
 800834a:	4606      	mov	r6, r0
 800834c:	2800      	cmp	r0, #0
 800834e:	d1e0      	bne.n	8008312 <__ssputs_r+0x5a>
 8008350:	6921      	ldr	r1, [r4, #16]
 8008352:	4650      	mov	r0, sl
 8008354:	f7ff feb8 	bl	80080c8 <_free_r>
 8008358:	230c      	movs	r3, #12
 800835a:	f8ca 3000 	str.w	r3, [sl]
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008364:	81a3      	strh	r3, [r4, #12]
 8008366:	f04f 30ff 	mov.w	r0, #4294967295
 800836a:	e7e9      	b.n	8008340 <__ssputs_r+0x88>

0800836c <_svfiprintf_r>:
 800836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	4698      	mov	r8, r3
 8008372:	898b      	ldrh	r3, [r1, #12]
 8008374:	061b      	lsls	r3, r3, #24
 8008376:	b09d      	sub	sp, #116	; 0x74
 8008378:	4607      	mov	r7, r0
 800837a:	460d      	mov	r5, r1
 800837c:	4614      	mov	r4, r2
 800837e:	d50e      	bpl.n	800839e <_svfiprintf_r+0x32>
 8008380:	690b      	ldr	r3, [r1, #16]
 8008382:	b963      	cbnz	r3, 800839e <_svfiprintf_r+0x32>
 8008384:	2140      	movs	r1, #64	; 0x40
 8008386:	f7ff ff0b 	bl	80081a0 <_malloc_r>
 800838a:	6028      	str	r0, [r5, #0]
 800838c:	6128      	str	r0, [r5, #16]
 800838e:	b920      	cbnz	r0, 800839a <_svfiprintf_r+0x2e>
 8008390:	230c      	movs	r3, #12
 8008392:	603b      	str	r3, [r7, #0]
 8008394:	f04f 30ff 	mov.w	r0, #4294967295
 8008398:	e0d0      	b.n	800853c <_svfiprintf_r+0x1d0>
 800839a:	2340      	movs	r3, #64	; 0x40
 800839c:	616b      	str	r3, [r5, #20]
 800839e:	2300      	movs	r3, #0
 80083a0:	9309      	str	r3, [sp, #36]	; 0x24
 80083a2:	2320      	movs	r3, #32
 80083a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80083ac:	2330      	movs	r3, #48	; 0x30
 80083ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008554 <_svfiprintf_r+0x1e8>
 80083b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083b6:	f04f 0901 	mov.w	r9, #1
 80083ba:	4623      	mov	r3, r4
 80083bc:	469a      	mov	sl, r3
 80083be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083c2:	b10a      	cbz	r2, 80083c8 <_svfiprintf_r+0x5c>
 80083c4:	2a25      	cmp	r2, #37	; 0x25
 80083c6:	d1f9      	bne.n	80083bc <_svfiprintf_r+0x50>
 80083c8:	ebba 0b04 	subs.w	fp, sl, r4
 80083cc:	d00b      	beq.n	80083e6 <_svfiprintf_r+0x7a>
 80083ce:	465b      	mov	r3, fp
 80083d0:	4622      	mov	r2, r4
 80083d2:	4629      	mov	r1, r5
 80083d4:	4638      	mov	r0, r7
 80083d6:	f7ff ff6f 	bl	80082b8 <__ssputs_r>
 80083da:	3001      	adds	r0, #1
 80083dc:	f000 80a9 	beq.w	8008532 <_svfiprintf_r+0x1c6>
 80083e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083e2:	445a      	add	r2, fp
 80083e4:	9209      	str	r2, [sp, #36]	; 0x24
 80083e6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 80a1 	beq.w	8008532 <_svfiprintf_r+0x1c6>
 80083f0:	2300      	movs	r3, #0
 80083f2:	f04f 32ff 	mov.w	r2, #4294967295
 80083f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083fa:	f10a 0a01 	add.w	sl, sl, #1
 80083fe:	9304      	str	r3, [sp, #16]
 8008400:	9307      	str	r3, [sp, #28]
 8008402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008406:	931a      	str	r3, [sp, #104]	; 0x68
 8008408:	4654      	mov	r4, sl
 800840a:	2205      	movs	r2, #5
 800840c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008410:	4850      	ldr	r0, [pc, #320]	; (8008554 <_svfiprintf_r+0x1e8>)
 8008412:	f7f7 feed 	bl	80001f0 <memchr>
 8008416:	9a04      	ldr	r2, [sp, #16]
 8008418:	b9d8      	cbnz	r0, 8008452 <_svfiprintf_r+0xe6>
 800841a:	06d0      	lsls	r0, r2, #27
 800841c:	bf44      	itt	mi
 800841e:	2320      	movmi	r3, #32
 8008420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008424:	0711      	lsls	r1, r2, #28
 8008426:	bf44      	itt	mi
 8008428:	232b      	movmi	r3, #43	; 0x2b
 800842a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800842e:	f89a 3000 	ldrb.w	r3, [sl]
 8008432:	2b2a      	cmp	r3, #42	; 0x2a
 8008434:	d015      	beq.n	8008462 <_svfiprintf_r+0xf6>
 8008436:	9a07      	ldr	r2, [sp, #28]
 8008438:	4654      	mov	r4, sl
 800843a:	2000      	movs	r0, #0
 800843c:	f04f 0c0a 	mov.w	ip, #10
 8008440:	4621      	mov	r1, r4
 8008442:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008446:	3b30      	subs	r3, #48	; 0x30
 8008448:	2b09      	cmp	r3, #9
 800844a:	d94d      	bls.n	80084e8 <_svfiprintf_r+0x17c>
 800844c:	b1b0      	cbz	r0, 800847c <_svfiprintf_r+0x110>
 800844e:	9207      	str	r2, [sp, #28]
 8008450:	e014      	b.n	800847c <_svfiprintf_r+0x110>
 8008452:	eba0 0308 	sub.w	r3, r0, r8
 8008456:	fa09 f303 	lsl.w	r3, r9, r3
 800845a:	4313      	orrs	r3, r2
 800845c:	9304      	str	r3, [sp, #16]
 800845e:	46a2      	mov	sl, r4
 8008460:	e7d2      	b.n	8008408 <_svfiprintf_r+0x9c>
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	1d19      	adds	r1, r3, #4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	9103      	str	r1, [sp, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	bfbb      	ittet	lt
 800846e:	425b      	neglt	r3, r3
 8008470:	f042 0202 	orrlt.w	r2, r2, #2
 8008474:	9307      	strge	r3, [sp, #28]
 8008476:	9307      	strlt	r3, [sp, #28]
 8008478:	bfb8      	it	lt
 800847a:	9204      	strlt	r2, [sp, #16]
 800847c:	7823      	ldrb	r3, [r4, #0]
 800847e:	2b2e      	cmp	r3, #46	; 0x2e
 8008480:	d10c      	bne.n	800849c <_svfiprintf_r+0x130>
 8008482:	7863      	ldrb	r3, [r4, #1]
 8008484:	2b2a      	cmp	r3, #42	; 0x2a
 8008486:	d134      	bne.n	80084f2 <_svfiprintf_r+0x186>
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	1d1a      	adds	r2, r3, #4
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	9203      	str	r2, [sp, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	bfb8      	it	lt
 8008494:	f04f 33ff 	movlt.w	r3, #4294967295
 8008498:	3402      	adds	r4, #2
 800849a:	9305      	str	r3, [sp, #20]
 800849c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008564 <_svfiprintf_r+0x1f8>
 80084a0:	7821      	ldrb	r1, [r4, #0]
 80084a2:	2203      	movs	r2, #3
 80084a4:	4650      	mov	r0, sl
 80084a6:	f7f7 fea3 	bl	80001f0 <memchr>
 80084aa:	b138      	cbz	r0, 80084bc <_svfiprintf_r+0x150>
 80084ac:	9b04      	ldr	r3, [sp, #16]
 80084ae:	eba0 000a 	sub.w	r0, r0, sl
 80084b2:	2240      	movs	r2, #64	; 0x40
 80084b4:	4082      	lsls	r2, r0
 80084b6:	4313      	orrs	r3, r2
 80084b8:	3401      	adds	r4, #1
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c0:	4825      	ldr	r0, [pc, #148]	; (8008558 <_svfiprintf_r+0x1ec>)
 80084c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084c6:	2206      	movs	r2, #6
 80084c8:	f7f7 fe92 	bl	80001f0 <memchr>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d038      	beq.n	8008542 <_svfiprintf_r+0x1d6>
 80084d0:	4b22      	ldr	r3, [pc, #136]	; (800855c <_svfiprintf_r+0x1f0>)
 80084d2:	bb1b      	cbnz	r3, 800851c <_svfiprintf_r+0x1b0>
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	3307      	adds	r3, #7
 80084d8:	f023 0307 	bic.w	r3, r3, #7
 80084dc:	3308      	adds	r3, #8
 80084de:	9303      	str	r3, [sp, #12]
 80084e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e2:	4433      	add	r3, r6
 80084e4:	9309      	str	r3, [sp, #36]	; 0x24
 80084e6:	e768      	b.n	80083ba <_svfiprintf_r+0x4e>
 80084e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80084ec:	460c      	mov	r4, r1
 80084ee:	2001      	movs	r0, #1
 80084f0:	e7a6      	b.n	8008440 <_svfiprintf_r+0xd4>
 80084f2:	2300      	movs	r3, #0
 80084f4:	3401      	adds	r4, #1
 80084f6:	9305      	str	r3, [sp, #20]
 80084f8:	4619      	mov	r1, r3
 80084fa:	f04f 0c0a 	mov.w	ip, #10
 80084fe:	4620      	mov	r0, r4
 8008500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008504:	3a30      	subs	r2, #48	; 0x30
 8008506:	2a09      	cmp	r2, #9
 8008508:	d903      	bls.n	8008512 <_svfiprintf_r+0x1a6>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0c6      	beq.n	800849c <_svfiprintf_r+0x130>
 800850e:	9105      	str	r1, [sp, #20]
 8008510:	e7c4      	b.n	800849c <_svfiprintf_r+0x130>
 8008512:	fb0c 2101 	mla	r1, ip, r1, r2
 8008516:	4604      	mov	r4, r0
 8008518:	2301      	movs	r3, #1
 800851a:	e7f0      	b.n	80084fe <_svfiprintf_r+0x192>
 800851c:	ab03      	add	r3, sp, #12
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	462a      	mov	r2, r5
 8008522:	4b0f      	ldr	r3, [pc, #60]	; (8008560 <_svfiprintf_r+0x1f4>)
 8008524:	a904      	add	r1, sp, #16
 8008526:	4638      	mov	r0, r7
 8008528:	f3af 8000 	nop.w
 800852c:	1c42      	adds	r2, r0, #1
 800852e:	4606      	mov	r6, r0
 8008530:	d1d6      	bne.n	80084e0 <_svfiprintf_r+0x174>
 8008532:	89ab      	ldrh	r3, [r5, #12]
 8008534:	065b      	lsls	r3, r3, #25
 8008536:	f53f af2d 	bmi.w	8008394 <_svfiprintf_r+0x28>
 800853a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800853c:	b01d      	add	sp, #116	; 0x74
 800853e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008542:	ab03      	add	r3, sp, #12
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	462a      	mov	r2, r5
 8008548:	4b05      	ldr	r3, [pc, #20]	; (8008560 <_svfiprintf_r+0x1f4>)
 800854a:	a904      	add	r1, sp, #16
 800854c:	4638      	mov	r0, r7
 800854e:	f000 f879 	bl	8008644 <_printf_i>
 8008552:	e7eb      	b.n	800852c <_svfiprintf_r+0x1c0>
 8008554:	080089e8 	.word	0x080089e8
 8008558:	080089f2 	.word	0x080089f2
 800855c:	00000000 	.word	0x00000000
 8008560:	080082b9 	.word	0x080082b9
 8008564:	080089ee 	.word	0x080089ee

08008568 <_printf_common>:
 8008568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	4616      	mov	r6, r2
 800856e:	4699      	mov	r9, r3
 8008570:	688a      	ldr	r2, [r1, #8]
 8008572:	690b      	ldr	r3, [r1, #16]
 8008574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008578:	4293      	cmp	r3, r2
 800857a:	bfb8      	it	lt
 800857c:	4613      	movlt	r3, r2
 800857e:	6033      	str	r3, [r6, #0]
 8008580:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008584:	4607      	mov	r7, r0
 8008586:	460c      	mov	r4, r1
 8008588:	b10a      	cbz	r2, 800858e <_printf_common+0x26>
 800858a:	3301      	adds	r3, #1
 800858c:	6033      	str	r3, [r6, #0]
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	0699      	lsls	r1, r3, #26
 8008592:	bf42      	ittt	mi
 8008594:	6833      	ldrmi	r3, [r6, #0]
 8008596:	3302      	addmi	r3, #2
 8008598:	6033      	strmi	r3, [r6, #0]
 800859a:	6825      	ldr	r5, [r4, #0]
 800859c:	f015 0506 	ands.w	r5, r5, #6
 80085a0:	d106      	bne.n	80085b0 <_printf_common+0x48>
 80085a2:	f104 0a19 	add.w	sl, r4, #25
 80085a6:	68e3      	ldr	r3, [r4, #12]
 80085a8:	6832      	ldr	r2, [r6, #0]
 80085aa:	1a9b      	subs	r3, r3, r2
 80085ac:	42ab      	cmp	r3, r5
 80085ae:	dc26      	bgt.n	80085fe <_printf_common+0x96>
 80085b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085b4:	1e13      	subs	r3, r2, #0
 80085b6:	6822      	ldr	r2, [r4, #0]
 80085b8:	bf18      	it	ne
 80085ba:	2301      	movne	r3, #1
 80085bc:	0692      	lsls	r2, r2, #26
 80085be:	d42b      	bmi.n	8008618 <_printf_common+0xb0>
 80085c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085c4:	4649      	mov	r1, r9
 80085c6:	4638      	mov	r0, r7
 80085c8:	47c0      	blx	r8
 80085ca:	3001      	adds	r0, #1
 80085cc:	d01e      	beq.n	800860c <_printf_common+0xa4>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	6922      	ldr	r2, [r4, #16]
 80085d2:	f003 0306 	and.w	r3, r3, #6
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	bf02      	ittt	eq
 80085da:	68e5      	ldreq	r5, [r4, #12]
 80085dc:	6833      	ldreq	r3, [r6, #0]
 80085de:	1aed      	subeq	r5, r5, r3
 80085e0:	68a3      	ldr	r3, [r4, #8]
 80085e2:	bf0c      	ite	eq
 80085e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085e8:	2500      	movne	r5, #0
 80085ea:	4293      	cmp	r3, r2
 80085ec:	bfc4      	itt	gt
 80085ee:	1a9b      	subgt	r3, r3, r2
 80085f0:	18ed      	addgt	r5, r5, r3
 80085f2:	2600      	movs	r6, #0
 80085f4:	341a      	adds	r4, #26
 80085f6:	42b5      	cmp	r5, r6
 80085f8:	d11a      	bne.n	8008630 <_printf_common+0xc8>
 80085fa:	2000      	movs	r0, #0
 80085fc:	e008      	b.n	8008610 <_printf_common+0xa8>
 80085fe:	2301      	movs	r3, #1
 8008600:	4652      	mov	r2, sl
 8008602:	4649      	mov	r1, r9
 8008604:	4638      	mov	r0, r7
 8008606:	47c0      	blx	r8
 8008608:	3001      	adds	r0, #1
 800860a:	d103      	bne.n	8008614 <_printf_common+0xac>
 800860c:	f04f 30ff 	mov.w	r0, #4294967295
 8008610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008614:	3501      	adds	r5, #1
 8008616:	e7c6      	b.n	80085a6 <_printf_common+0x3e>
 8008618:	18e1      	adds	r1, r4, r3
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	2030      	movs	r0, #48	; 0x30
 800861e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008622:	4422      	add	r2, r4
 8008624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008628:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800862c:	3302      	adds	r3, #2
 800862e:	e7c7      	b.n	80085c0 <_printf_common+0x58>
 8008630:	2301      	movs	r3, #1
 8008632:	4622      	mov	r2, r4
 8008634:	4649      	mov	r1, r9
 8008636:	4638      	mov	r0, r7
 8008638:	47c0      	blx	r8
 800863a:	3001      	adds	r0, #1
 800863c:	d0e6      	beq.n	800860c <_printf_common+0xa4>
 800863e:	3601      	adds	r6, #1
 8008640:	e7d9      	b.n	80085f6 <_printf_common+0x8e>
	...

08008644 <_printf_i>:
 8008644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008648:	7e0f      	ldrb	r7, [r1, #24]
 800864a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800864c:	2f78      	cmp	r7, #120	; 0x78
 800864e:	4691      	mov	r9, r2
 8008650:	4680      	mov	r8, r0
 8008652:	460c      	mov	r4, r1
 8008654:	469a      	mov	sl, r3
 8008656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800865a:	d807      	bhi.n	800866c <_printf_i+0x28>
 800865c:	2f62      	cmp	r7, #98	; 0x62
 800865e:	d80a      	bhi.n	8008676 <_printf_i+0x32>
 8008660:	2f00      	cmp	r7, #0
 8008662:	f000 80d4 	beq.w	800880e <_printf_i+0x1ca>
 8008666:	2f58      	cmp	r7, #88	; 0x58
 8008668:	f000 80c0 	beq.w	80087ec <_printf_i+0x1a8>
 800866c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008674:	e03a      	b.n	80086ec <_printf_i+0xa8>
 8008676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800867a:	2b15      	cmp	r3, #21
 800867c:	d8f6      	bhi.n	800866c <_printf_i+0x28>
 800867e:	a101      	add	r1, pc, #4	; (adr r1, 8008684 <_printf_i+0x40>)
 8008680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008684:	080086dd 	.word	0x080086dd
 8008688:	080086f1 	.word	0x080086f1
 800868c:	0800866d 	.word	0x0800866d
 8008690:	0800866d 	.word	0x0800866d
 8008694:	0800866d 	.word	0x0800866d
 8008698:	0800866d 	.word	0x0800866d
 800869c:	080086f1 	.word	0x080086f1
 80086a0:	0800866d 	.word	0x0800866d
 80086a4:	0800866d 	.word	0x0800866d
 80086a8:	0800866d 	.word	0x0800866d
 80086ac:	0800866d 	.word	0x0800866d
 80086b0:	080087f5 	.word	0x080087f5
 80086b4:	0800871d 	.word	0x0800871d
 80086b8:	080087af 	.word	0x080087af
 80086bc:	0800866d 	.word	0x0800866d
 80086c0:	0800866d 	.word	0x0800866d
 80086c4:	08008817 	.word	0x08008817
 80086c8:	0800866d 	.word	0x0800866d
 80086cc:	0800871d 	.word	0x0800871d
 80086d0:	0800866d 	.word	0x0800866d
 80086d4:	0800866d 	.word	0x0800866d
 80086d8:	080087b7 	.word	0x080087b7
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	1d1a      	adds	r2, r3, #4
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	602a      	str	r2, [r5, #0]
 80086e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086ec:	2301      	movs	r3, #1
 80086ee:	e09f      	b.n	8008830 <_printf_i+0x1ec>
 80086f0:	6820      	ldr	r0, [r4, #0]
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	0607      	lsls	r7, r0, #24
 80086f6:	f103 0104 	add.w	r1, r3, #4
 80086fa:	6029      	str	r1, [r5, #0]
 80086fc:	d501      	bpl.n	8008702 <_printf_i+0xbe>
 80086fe:	681e      	ldr	r6, [r3, #0]
 8008700:	e003      	b.n	800870a <_printf_i+0xc6>
 8008702:	0646      	lsls	r6, r0, #25
 8008704:	d5fb      	bpl.n	80086fe <_printf_i+0xba>
 8008706:	f9b3 6000 	ldrsh.w	r6, [r3]
 800870a:	2e00      	cmp	r6, #0
 800870c:	da03      	bge.n	8008716 <_printf_i+0xd2>
 800870e:	232d      	movs	r3, #45	; 0x2d
 8008710:	4276      	negs	r6, r6
 8008712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008716:	485a      	ldr	r0, [pc, #360]	; (8008880 <_printf_i+0x23c>)
 8008718:	230a      	movs	r3, #10
 800871a:	e012      	b.n	8008742 <_printf_i+0xfe>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	6820      	ldr	r0, [r4, #0]
 8008720:	1d19      	adds	r1, r3, #4
 8008722:	6029      	str	r1, [r5, #0]
 8008724:	0605      	lsls	r5, r0, #24
 8008726:	d501      	bpl.n	800872c <_printf_i+0xe8>
 8008728:	681e      	ldr	r6, [r3, #0]
 800872a:	e002      	b.n	8008732 <_printf_i+0xee>
 800872c:	0641      	lsls	r1, r0, #25
 800872e:	d5fb      	bpl.n	8008728 <_printf_i+0xe4>
 8008730:	881e      	ldrh	r6, [r3, #0]
 8008732:	4853      	ldr	r0, [pc, #332]	; (8008880 <_printf_i+0x23c>)
 8008734:	2f6f      	cmp	r7, #111	; 0x6f
 8008736:	bf0c      	ite	eq
 8008738:	2308      	moveq	r3, #8
 800873a:	230a      	movne	r3, #10
 800873c:	2100      	movs	r1, #0
 800873e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008742:	6865      	ldr	r5, [r4, #4]
 8008744:	60a5      	str	r5, [r4, #8]
 8008746:	2d00      	cmp	r5, #0
 8008748:	bfa2      	ittt	ge
 800874a:	6821      	ldrge	r1, [r4, #0]
 800874c:	f021 0104 	bicge.w	r1, r1, #4
 8008750:	6021      	strge	r1, [r4, #0]
 8008752:	b90e      	cbnz	r6, 8008758 <_printf_i+0x114>
 8008754:	2d00      	cmp	r5, #0
 8008756:	d04b      	beq.n	80087f0 <_printf_i+0x1ac>
 8008758:	4615      	mov	r5, r2
 800875a:	fbb6 f1f3 	udiv	r1, r6, r3
 800875e:	fb03 6711 	mls	r7, r3, r1, r6
 8008762:	5dc7      	ldrb	r7, [r0, r7]
 8008764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008768:	4637      	mov	r7, r6
 800876a:	42bb      	cmp	r3, r7
 800876c:	460e      	mov	r6, r1
 800876e:	d9f4      	bls.n	800875a <_printf_i+0x116>
 8008770:	2b08      	cmp	r3, #8
 8008772:	d10b      	bne.n	800878c <_printf_i+0x148>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	07de      	lsls	r6, r3, #31
 8008778:	d508      	bpl.n	800878c <_printf_i+0x148>
 800877a:	6923      	ldr	r3, [r4, #16]
 800877c:	6861      	ldr	r1, [r4, #4]
 800877e:	4299      	cmp	r1, r3
 8008780:	bfde      	ittt	le
 8008782:	2330      	movle	r3, #48	; 0x30
 8008784:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008788:	f105 35ff 	addle.w	r5, r5, #4294967295
 800878c:	1b52      	subs	r2, r2, r5
 800878e:	6122      	str	r2, [r4, #16]
 8008790:	f8cd a000 	str.w	sl, [sp]
 8008794:	464b      	mov	r3, r9
 8008796:	aa03      	add	r2, sp, #12
 8008798:	4621      	mov	r1, r4
 800879a:	4640      	mov	r0, r8
 800879c:	f7ff fee4 	bl	8008568 <_printf_common>
 80087a0:	3001      	adds	r0, #1
 80087a2:	d14a      	bne.n	800883a <_printf_i+0x1f6>
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	b004      	add	sp, #16
 80087aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	f043 0320 	orr.w	r3, r3, #32
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	4833      	ldr	r0, [pc, #204]	; (8008884 <_printf_i+0x240>)
 80087b8:	2778      	movs	r7, #120	; 0x78
 80087ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	6829      	ldr	r1, [r5, #0]
 80087c2:	061f      	lsls	r7, r3, #24
 80087c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80087c8:	d402      	bmi.n	80087d0 <_printf_i+0x18c>
 80087ca:	065f      	lsls	r7, r3, #25
 80087cc:	bf48      	it	mi
 80087ce:	b2b6      	uxthmi	r6, r6
 80087d0:	07df      	lsls	r7, r3, #31
 80087d2:	bf48      	it	mi
 80087d4:	f043 0320 	orrmi.w	r3, r3, #32
 80087d8:	6029      	str	r1, [r5, #0]
 80087da:	bf48      	it	mi
 80087dc:	6023      	strmi	r3, [r4, #0]
 80087de:	b91e      	cbnz	r6, 80087e8 <_printf_i+0x1a4>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	f023 0320 	bic.w	r3, r3, #32
 80087e6:	6023      	str	r3, [r4, #0]
 80087e8:	2310      	movs	r3, #16
 80087ea:	e7a7      	b.n	800873c <_printf_i+0xf8>
 80087ec:	4824      	ldr	r0, [pc, #144]	; (8008880 <_printf_i+0x23c>)
 80087ee:	e7e4      	b.n	80087ba <_printf_i+0x176>
 80087f0:	4615      	mov	r5, r2
 80087f2:	e7bd      	b.n	8008770 <_printf_i+0x12c>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	6826      	ldr	r6, [r4, #0]
 80087f8:	6961      	ldr	r1, [r4, #20]
 80087fa:	1d18      	adds	r0, r3, #4
 80087fc:	6028      	str	r0, [r5, #0]
 80087fe:	0635      	lsls	r5, r6, #24
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	d501      	bpl.n	8008808 <_printf_i+0x1c4>
 8008804:	6019      	str	r1, [r3, #0]
 8008806:	e002      	b.n	800880e <_printf_i+0x1ca>
 8008808:	0670      	lsls	r0, r6, #25
 800880a:	d5fb      	bpl.n	8008804 <_printf_i+0x1c0>
 800880c:	8019      	strh	r1, [r3, #0]
 800880e:	2300      	movs	r3, #0
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	4615      	mov	r5, r2
 8008814:	e7bc      	b.n	8008790 <_printf_i+0x14c>
 8008816:	682b      	ldr	r3, [r5, #0]
 8008818:	1d1a      	adds	r2, r3, #4
 800881a:	602a      	str	r2, [r5, #0]
 800881c:	681d      	ldr	r5, [r3, #0]
 800881e:	6862      	ldr	r2, [r4, #4]
 8008820:	2100      	movs	r1, #0
 8008822:	4628      	mov	r0, r5
 8008824:	f7f7 fce4 	bl	80001f0 <memchr>
 8008828:	b108      	cbz	r0, 800882e <_printf_i+0x1ea>
 800882a:	1b40      	subs	r0, r0, r5
 800882c:	6060      	str	r0, [r4, #4]
 800882e:	6863      	ldr	r3, [r4, #4]
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	2300      	movs	r3, #0
 8008834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008838:	e7aa      	b.n	8008790 <_printf_i+0x14c>
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	462a      	mov	r2, r5
 800883e:	4649      	mov	r1, r9
 8008840:	4640      	mov	r0, r8
 8008842:	47d0      	blx	sl
 8008844:	3001      	adds	r0, #1
 8008846:	d0ad      	beq.n	80087a4 <_printf_i+0x160>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	079b      	lsls	r3, r3, #30
 800884c:	d413      	bmi.n	8008876 <_printf_i+0x232>
 800884e:	68e0      	ldr	r0, [r4, #12]
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	4298      	cmp	r0, r3
 8008854:	bfb8      	it	lt
 8008856:	4618      	movlt	r0, r3
 8008858:	e7a6      	b.n	80087a8 <_printf_i+0x164>
 800885a:	2301      	movs	r3, #1
 800885c:	4632      	mov	r2, r6
 800885e:	4649      	mov	r1, r9
 8008860:	4640      	mov	r0, r8
 8008862:	47d0      	blx	sl
 8008864:	3001      	adds	r0, #1
 8008866:	d09d      	beq.n	80087a4 <_printf_i+0x160>
 8008868:	3501      	adds	r5, #1
 800886a:	68e3      	ldr	r3, [r4, #12]
 800886c:	9903      	ldr	r1, [sp, #12]
 800886e:	1a5b      	subs	r3, r3, r1
 8008870:	42ab      	cmp	r3, r5
 8008872:	dcf2      	bgt.n	800885a <_printf_i+0x216>
 8008874:	e7eb      	b.n	800884e <_printf_i+0x20a>
 8008876:	2500      	movs	r5, #0
 8008878:	f104 0619 	add.w	r6, r4, #25
 800887c:	e7f5      	b.n	800886a <_printf_i+0x226>
 800887e:	bf00      	nop
 8008880:	080089f9 	.word	0x080089f9
 8008884:	08008a0a 	.word	0x08008a0a

08008888 <memmove>:
 8008888:	4288      	cmp	r0, r1
 800888a:	b510      	push	{r4, lr}
 800888c:	eb01 0402 	add.w	r4, r1, r2
 8008890:	d902      	bls.n	8008898 <memmove+0x10>
 8008892:	4284      	cmp	r4, r0
 8008894:	4623      	mov	r3, r4
 8008896:	d807      	bhi.n	80088a8 <memmove+0x20>
 8008898:	1e43      	subs	r3, r0, #1
 800889a:	42a1      	cmp	r1, r4
 800889c:	d008      	beq.n	80088b0 <memmove+0x28>
 800889e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088a6:	e7f8      	b.n	800889a <memmove+0x12>
 80088a8:	4402      	add	r2, r0
 80088aa:	4601      	mov	r1, r0
 80088ac:	428a      	cmp	r2, r1
 80088ae:	d100      	bne.n	80088b2 <memmove+0x2a>
 80088b0:	bd10      	pop	{r4, pc}
 80088b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088ba:	e7f7      	b.n	80088ac <memmove+0x24>

080088bc <_sbrk_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4d06      	ldr	r5, [pc, #24]	; (80088d8 <_sbrk_r+0x1c>)
 80088c0:	2300      	movs	r3, #0
 80088c2:	4604      	mov	r4, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	602b      	str	r3, [r5, #0]
 80088c8:	f7f8 f98e 	bl	8000be8 <_sbrk>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_sbrk_r+0x1a>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_sbrk_r+0x1a>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	2000214c 	.word	0x2000214c

080088dc <memcpy>:
 80088dc:	440a      	add	r2, r1
 80088de:	4291      	cmp	r1, r2
 80088e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80088e4:	d100      	bne.n	80088e8 <memcpy+0xc>
 80088e6:	4770      	bx	lr
 80088e8:	b510      	push	{r4, lr}
 80088ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088f2:	4291      	cmp	r1, r2
 80088f4:	d1f9      	bne.n	80088ea <memcpy+0xe>
 80088f6:	bd10      	pop	{r4, pc}

080088f8 <_realloc_r>:
 80088f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fc:	4680      	mov	r8, r0
 80088fe:	4614      	mov	r4, r2
 8008900:	460e      	mov	r6, r1
 8008902:	b921      	cbnz	r1, 800890e <_realloc_r+0x16>
 8008904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008908:	4611      	mov	r1, r2
 800890a:	f7ff bc49 	b.w	80081a0 <_malloc_r>
 800890e:	b92a      	cbnz	r2, 800891c <_realloc_r+0x24>
 8008910:	f7ff fbda 	bl	80080c8 <_free_r>
 8008914:	4625      	mov	r5, r4
 8008916:	4628      	mov	r0, r5
 8008918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800891c:	f000 f81b 	bl	8008956 <_malloc_usable_size_r>
 8008920:	4284      	cmp	r4, r0
 8008922:	4607      	mov	r7, r0
 8008924:	d802      	bhi.n	800892c <_realloc_r+0x34>
 8008926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800892a:	d812      	bhi.n	8008952 <_realloc_r+0x5a>
 800892c:	4621      	mov	r1, r4
 800892e:	4640      	mov	r0, r8
 8008930:	f7ff fc36 	bl	80081a0 <_malloc_r>
 8008934:	4605      	mov	r5, r0
 8008936:	2800      	cmp	r0, #0
 8008938:	d0ed      	beq.n	8008916 <_realloc_r+0x1e>
 800893a:	42bc      	cmp	r4, r7
 800893c:	4622      	mov	r2, r4
 800893e:	4631      	mov	r1, r6
 8008940:	bf28      	it	cs
 8008942:	463a      	movcs	r2, r7
 8008944:	f7ff ffca 	bl	80088dc <memcpy>
 8008948:	4631      	mov	r1, r6
 800894a:	4640      	mov	r0, r8
 800894c:	f7ff fbbc 	bl	80080c8 <_free_r>
 8008950:	e7e1      	b.n	8008916 <_realloc_r+0x1e>
 8008952:	4635      	mov	r5, r6
 8008954:	e7df      	b.n	8008916 <_realloc_r+0x1e>

08008956 <_malloc_usable_size_r>:
 8008956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800895a:	1f18      	subs	r0, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	bfbc      	itt	lt
 8008960:	580b      	ldrlt	r3, [r1, r0]
 8008962:	18c0      	addlt	r0, r0, r3
 8008964:	4770      	bx	lr
	...

08008968 <_init>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	bf00      	nop
 800896c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896e:	bc08      	pop	{r3}
 8008970:	469e      	mov	lr, r3
 8008972:	4770      	bx	lr

08008974 <_fini>:
 8008974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008976:	bf00      	nop
 8008978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897a:	bc08      	pop	{r3}
 800897c:	469e      	mov	lr, r3
 800897e:	4770      	bx	lr
