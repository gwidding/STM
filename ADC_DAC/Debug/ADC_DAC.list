
ADC_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f44  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005174  08005174  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800517c  0800517c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800517c  0800517c  0001517c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000094c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009b4  200009b4  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001081e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002300  00000000  00000000  000308f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dc0  00000000  00000000  00032c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a94  00000000  00000000  000339c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026807  00000000  00000000  00034454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fec1  00000000  00000000  0005ac5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9e6d  00000000  00000000  0006ab1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004184  00000000  00000000  0015498c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00158b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080050dc 	.word	0x080050dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	080050dc 	.word	0x080050dc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <_write>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_ADC1_Init(void);
static void MX_DAC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	b29a      	uxth	r2, r3
 800059c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005a0:	68b9      	ldr	r1, [r7, #8]
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <_write+0x28>)
 80005a4:	f002 ffeb 	bl	800357e <HAL_UART_Transmit>
	return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000308 	.word	0x20000308

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fd9d 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f84b 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f9df 	bl	8000988 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ca:	f000 f937 	bl	800083c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005ce:	f000 f983 	bl	80008d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d2:	f000 f9ab 	bl	800092c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005d6:	f000 f8ab 	bl	8000730 <MX_ADC1_Init>
  MX_DAC_Init();
 80005da:	f000 f8fb 	bl	80007d4 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  int adc_value;
  HAL_ADC_Start_IT(&hadc1);
 80005de:	481c      	ldr	r0, [pc, #112]	; (8000650 <main+0x98>)
 80005e0:	f000 fff6 	bl	80015d0 <HAL_ADC_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80005e4:	2100      	movs	r1, #0
 80005e6:	481b      	ldr	r0, [pc, #108]	; (8000654 <main+0x9c>)
 80005e8:	f001 fc13 	bl	8001e12 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80005ec:	2110      	movs	r1, #16
 80005ee:	4819      	ldr	r0, [pc, #100]	; (8000654 <main+0x9c>)
 80005f0:	f001 fc0f 	bl	8001e12 <HAL_DAC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
 80005f4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	4815      	ldr	r0, [pc, #84]	; (8000654 <main+0x9c>)
 80005fe:	f001 fc5a 	bl	8001eb6 <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095);
 8000602:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000606:	2200      	movs	r2, #0
 8000608:	2110      	movs	r1, #16
 800060a:	4812      	ldr	r0, [pc, #72]	; (8000654 <main+0x9c>)
 800060c:	f001 fc53 	bl	8001eb6 <HAL_DAC_SetValue>
	  HAL_Delay(1);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 fde5 	bl	80011e0 <HAL_Delay>

	  HAL_ADC_Start(&hadc1);
 8000616:	480e      	ldr	r0, [pc, #56]	; (8000650 <main+0x98>)
 8000618:	f000 fe4a 	bl	80012b0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 800061c:	210a      	movs	r1, #10
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <main+0x98>)
 8000620:	f000 ff4b 	bl	80014ba <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000624:	480a      	ldr	r0, [pc, #40]	; (8000650 <main+0x98>)
 8000626:	f001 f8b1 	bl	800178c <HAL_ADC_GetValue>
 800062a:	4603      	mov	r3, r0
 800062c:	607b      	str	r3, [r7, #4]
	  HAL_ADC_Stop(&hadc1);
 800062e:	4808      	ldr	r0, [pc, #32]	; (8000650 <main+0x98>)
 8000630:	f000 ff10 	bl	8001454 <HAL_ADC_Stop>

	  printf("ADC value : %d, DAC1 value : %d, DAC2 vale : %d \r\n", adc_value, adc_value, 4095-adc_value);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800063a:	330f      	adds	r3, #15
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <main+0xa0>)
 8000642:	f003 fed5 	bl	80043f0 <iprintf>
	  HAL_Delay(300);
 8000646:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800064a:	f000 fdc9 	bl	80011e0 <HAL_Delay>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
 800064e:	e7d1      	b.n	80005f4 <main+0x3c>
 8000650:	200001fc 	.word	0x200001fc
 8000654:	20000244 	.word	0x20000244
 8000658:	080050f4 	.word	0x080050f4

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 ff15 	bl	800449a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	; (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d0:	23a8      	movs	r3, #168	; 0xa8
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d8:	2307      	movs	r3, #7
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fa67 	bl	8002bb4 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f9fa 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2105      	movs	r1, #5
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fcc8 	bl	80030a4 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 f9e3 	bl	8000ae4 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <MX_ADC1_Init+0x9c>)
 8000746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_ADC1_Init+0x98>)
 800074a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800074e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_ADC1_Init+0xa0>)
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_ADC1_Init+0x98>)
 800077e:	2201      	movs	r2, #1
 8000780:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ADC1_Init+0x98>)
 800078c:	2201      	movs	r2, #1
 800078e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000792:	f000 fd49 	bl	8001228 <HAL_ADC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800079c:	f000 f9a2 	bl	8000ae4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007a0:	2303      	movs	r3, #3
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_ADC1_Init+0x98>)
 80007b2:	f000 fff9 	bl	80017a8 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007bc:	f000 f992 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200001fc 	.word	0x200001fc
 80007cc:	40012000 	.word	0x40012000
 80007d0:	0f000001 	.word	0x0f000001

080007d4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_DAC_Init+0x60>)
 80007e4:	4a14      	ldr	r2, [pc, #80]	; (8000838 <MX_DAC_Init+0x64>)
 80007e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007e8:	4812      	ldr	r0, [pc, #72]	; (8000834 <MX_DAC_Init+0x60>)
 80007ea:	f001 faf0 	bl	8001dce <HAL_DAC_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007f4:	f000 f976 	bl	8000ae4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	4619      	mov	r1, r3
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <MX_DAC_Init+0x60>)
 8000808:	f001 fb7a 	bl	8001f00 <HAL_DAC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000812:	f000 f967 	bl	8000ae4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	2210      	movs	r2, #16
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_DAC_Init+0x60>)
 800081e:	f001 fb6f 	bl	8001f00 <HAL_DAC_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000828:	f000 f95c 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000244 	.word	0x20000244
 8000838:	40007400 	.word	0x40007400

0800083c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_ETH_Init+0x84>)
 8000842:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <MX_ETH_Init+0x88>)
 8000844:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_ETH_Init+0x8c>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_ETH_Init+0x8c>)
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_ETH_Init+0x8c>)
 8000854:	22e1      	movs	r2, #225	; 0xe1
 8000856:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_ETH_Init+0x8c>)
 800085a:	2200      	movs	r2, #0
 800085c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_ETH_Init+0x8c>)
 8000860:	2200      	movs	r2, #0
 8000862:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_ETH_Init+0x8c>)
 8000866:	2200      	movs	r2, #0
 8000868:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_ETH_Init+0x84>)
 800086c:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <MX_ETH_Init+0x8c>)
 800086e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_ETH_Init+0x84>)
 8000872:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000876:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_ETH_Init+0x84>)
 800087a:	4a14      	ldr	r2, [pc, #80]	; (80008cc <MX_ETH_Init+0x90>)
 800087c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_ETH_Init+0x84>)
 8000880:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <MX_ETH_Init+0x94>)
 8000882:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_ETH_Init+0x84>)
 8000886:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800088a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_ETH_Init+0x84>)
 800088e:	f001 fb87 	bl	8001fa0 <HAL_ETH_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000898:	f000 f924 	bl	8000ae4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800089c:	2238      	movs	r2, #56	; 0x38
 800089e:	2100      	movs	r1, #0
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_ETH_Init+0x98>)
 80008a2:	f003 fdfa 	bl	800449a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_ETH_Init+0x98>)
 80008a8:	2221      	movs	r2, #33	; 0x21
 80008aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_ETH_Init+0x98>)
 80008ae:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_ETH_Init+0x98>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000258 	.word	0x20000258
 80008c4:	40028000 	.word	0x40028000
 80008c8:	20000858 	.word	0x20000858
 80008cc:	2000015c 	.word	0x2000015c
 80008d0:	200000bc 	.word	0x200000bc
 80008d4:	20000084 	.word	0x20000084

080008d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART3_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 8000910:	f002 fde8 	bl	80034e4 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f000 f8e3 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000308 	.word	0x20000308
 8000928:	40004800 	.word	0x40004800

0800092c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000936:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2204      	movs	r2, #4
 800093c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	2202      	movs	r2, #2
 8000942:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2202      	movs	r2, #2
 800094e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2201      	movs	r2, #1
 8000954:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2201      	movs	r2, #1
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	f002 f803 	bl	800297a <HAL_PCD_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800097a:	f000 f8b3 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000034c 	.word	0x2000034c

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
 80009a2:	4b4c      	ldr	r3, [pc, #304]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a4b      	ldr	r2, [pc, #300]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b49      	ldr	r3, [pc, #292]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	4b45      	ldr	r3, [pc, #276]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a44      	ldr	r2, [pc, #272]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b42      	ldr	r3, [pc, #264]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b3e      	ldr	r3, [pc, #248]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a3d      	ldr	r2, [pc, #244]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b3b      	ldr	r3, [pc, #236]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a36      	ldr	r2, [pc, #216]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a2f      	ldr	r2, [pc, #188]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 8000a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <MX_GPIO_Init+0x14c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a4c:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <MX_GPIO_Init+0x150>)
 8000a4e:	f001 ff7b 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2140      	movs	r1, #64	; 0x40
 8000a56:	4821      	ldr	r0, [pc, #132]	; (8000adc <MX_GPIO_Init+0x154>)
 8000a58:	f001 ff76 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	481b      	ldr	r0, [pc, #108]	; (8000ae0 <MX_GPIO_Init+0x158>)
 8000a74:	f001 fdbc 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a78:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4811      	ldr	r0, [pc, #68]	; (8000ad8 <MX_GPIO_Init+0x150>)
 8000a92:	f001 fdad 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a96:	2340      	movs	r3, #64	; 0x40
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <MX_GPIO_Init+0x154>)
 8000aae:	f001 fd9f 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_GPIO_Init+0x154>)
 8000ac6:	f001 fd93 	bl	80025f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aca:	bf00      	nop
 8000acc:	3730      	adds	r7, #48	; 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40021800 	.word	0x40021800
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <HAL_ADC_MspInit+0x7c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d127      	bne.n	8000bb2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <HAL_ADC_MspInit+0x84>)
 8000bae:	f001 fd1f 	bl	80025f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40012000 	.word	0x40012000
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_DAC_MspInit+0x7c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d127      	bne.n	8000c3a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_DAC_MspInit+0x80>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <HAL_DAC_MspInit+0x80>)
 8000bf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <HAL_DAC_MspInit+0x80>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_DAC_MspInit+0x80>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_DAC_MspInit+0x80>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_DAC_MspInit+0x80>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c22:	2330      	movs	r3, #48	; 0x30
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c26:	2303      	movs	r3, #3
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_DAC_MspInit+0x84>)
 8000c36:	f001 fcdb 	bl	80025f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40007400 	.word	0x40007400
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000

08000c50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a55      	ldr	r2, [pc, #340]	; (8000dc4 <HAL_ETH_MspInit+0x174>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	f040 80a4 	bne.w	8000dbc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
 8000c78:	4b53      	ldr	r3, [pc, #332]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	4a52      	ldr	r2, [pc, #328]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c82:	6313      	str	r3, [r2, #48]	; 0x30
 8000c84:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c8c:	623b      	str	r3, [r7, #32]
 8000c8e:	6a3b      	ldr	r3, [r7, #32]
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	4b4c      	ldr	r3, [pc, #304]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	4a4b      	ldr	r2, [pc, #300]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000c9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca0:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ca8:	61fb      	str	r3, [r7, #28]
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	4b45      	ldr	r3, [pc, #276]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	4a44      	ldr	r2, [pc, #272]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000cb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbc:	4b42      	ldr	r3, [pc, #264]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cc4:	61bb      	str	r3, [r7, #24]
 8000cc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a3d      	ldr	r2, [pc, #244]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd8:	4b3b      	ldr	r3, [pc, #236]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	4a36      	ldr	r2, [pc, #216]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf4:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d10:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	4a28      	ldr	r2, [pc, #160]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <HAL_ETH_MspInit+0x178>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d38:	2332      	movs	r3, #50	; 0x32
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d48:	230b      	movs	r3, #11
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	481e      	ldr	r0, [pc, #120]	; (8000dcc <HAL_ETH_MspInit+0x17c>)
 8000d54:	f001 fc4c 	bl	80025f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d58:	2386      	movs	r3, #134	; 0x86
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d68:	230b      	movs	r3, #11
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	4619      	mov	r1, r3
 8000d72:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <HAL_ETH_MspInit+0x180>)
 8000d74:	f001 fc3c 	bl	80025f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8a:	230b      	movs	r3, #11
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <HAL_ETH_MspInit+0x184>)
 8000d96:	f001 fc2b 	bl	80025f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dac:	230b      	movs	r3, #11
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <HAL_ETH_MspInit+0x188>)
 8000db8:	f001 fc1a 	bl	80025f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3738      	adds	r7, #56	; 0x38
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40028000 	.word	0x40028000
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	40021800 	.word	0x40021800

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a19      	ldr	r2, [pc, #100]	; (8000e60 <HAL_UART_MspInit+0x84>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d12c      	bne.n	8000e58 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_UART_MspInit+0x88>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <HAL_UART_MspInit+0x88>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_UART_MspInit+0x88>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_UART_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <HAL_UART_MspInit+0x88>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_UART_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <HAL_UART_MspInit+0x8c>)
 8000e54:	f001 fbcc 	bl	80025f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	; 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40004800 	.word	0x40004800
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020c00 	.word	0x40020c00

08000e6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e8c:	d13f      	bne.n	8000f0e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <HAL_PCD_MspInit+0xac>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <HAL_PCD_MspInit+0xac>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <HAL_PCD_MspInit+0xac>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eaa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4815      	ldr	r0, [pc, #84]	; (8000f1c <HAL_PCD_MspInit+0xb0>)
 8000ec8:	f001 fb92 	bl	80025f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480e      	ldr	r0, [pc, #56]	; (8000f1c <HAL_PCD_MspInit+0xb0>)
 8000ee2:	f001 fb85 	bl	80025f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_PCD_MspInit+0xac>)
 8000ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <HAL_PCD_MspInit+0xac>)
 8000eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef0:	6353      	str	r3, [r2, #52]	; 0x34
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_PCD_MspInit+0xac>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_PCD_MspInit+0xac>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_PCD_MspInit+0xac>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f918 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e00a      	b.n	8000f9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f86:	f3af 8000 	nop.w
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf0      	blt.n	8000f86 <_read+0x12>
  }

  return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd6:	605a      	str	r2, [r3, #4]
  return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <_isatty>:

int _isatty(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001020:	4a14      	ldr	r2, [pc, #80]	; (8001074 <_sbrk+0x5c>)
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <_sbrk+0x60>)
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <_sbrk+0x64>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <_sbrk+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	429a      	cmp	r2, r3
 8001046:	d207      	bcs.n	8001058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001048:	f003 fa76 	bl	8004538 <__errno>
 800104c:	4603      	mov	r3, r0
 800104e:	220c      	movs	r2, #12
 8001050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e009      	b.n	800106c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <_sbrk+0x64>)
 8001068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20030000 	.word	0x20030000
 8001078:	00000400 	.word	0x00000400
 800107c:	20000860 	.word	0x20000860
 8001080:	200009b8 	.word	0x200009b8

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ae:	490e      	ldr	r1, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b0:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c4:	4c0b      	ldr	r4, [pc, #44]	; (80010f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010d2:	f7ff ffd7 	bl	8001084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f003 fa35 	bl	8004544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff fa6d 	bl	80005b8 <main>
  bx  lr    
 80010de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010ec:	08005184 	.word	0x08005184
  ldr r2, =_sbss
 80010f0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010f4:	200009b4 	.word	0x200009b4

080010f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_Init+0x40>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_Init+0x40>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x40>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 fe1f 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	2000      	movs	r0, #0
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fcde 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fe29 	bl	8001db6 <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 fdff 	bl	8001d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000000 	.word	0x20000000
 8001198:	20000008 	.word	0x20000008
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000864 	.word	0x20000864

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000864 	.word	0x20000864

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff ffee 	bl	80011c8 <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_Delay+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffde 	bl	80011c8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008

08001228 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e033      	b.n	80012a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	2b00      	cmp	r3, #0
 8001244:	d109      	bne.n	800125a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fc7a 	bl	8000b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	2b00      	cmp	r3, #0
 8001264:	d118      	bne.n	8001298 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800126e:	f023 0302 	bic.w	r3, r3, #2
 8001272:	f043 0202 	orr.w	r2, r3, #2
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 fbc6 	bl	8001a0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f023 0303 	bic.w	r3, r3, #3
 800128e:	f043 0201 	orr.w	r2, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
 8001296:	e001      	b.n	800129c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Start+0x1a>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e0b2      	b.n	8001430 <HAL_ADC_Start+0x180>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d018      	beq.n	8001312 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012f0:	4b52      	ldr	r3, [pc, #328]	; (800143c <HAL_ADC_Start+0x18c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a52      	ldr	r2, [pc, #328]	; (8001440 <HAL_ADC_Start+0x190>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0c9a      	lsrs	r2, r3, #18
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001304:	e002      	b.n	800130c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	3b01      	subs	r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f9      	bne.n	8001306 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b01      	cmp	r3, #1
 800131e:	d17a      	bne.n	8001416 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800134a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800135a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800135e:	d106      	bne.n	800136e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001364:	f023 0206 	bic.w	r2, r3, #6
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	645a      	str	r2, [r3, #68]	; 0x44
 800136c:	e002      	b.n	8001374 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800137c:	4b31      	ldr	r3, [pc, #196]	; (8001444 <HAL_ADC_Start+0x194>)
 800137e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001388:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 031f 	and.w	r3, r3, #31
 8001392:	2b00      	cmp	r3, #0
 8001394:	d12a      	bne.n	80013ec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a2b      	ldr	r2, [pc, #172]	; (8001448 <HAL_ADC_Start+0x198>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d015      	beq.n	80013cc <HAL_ADC_Start+0x11c>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a29      	ldr	r2, [pc, #164]	; (800144c <HAL_ADC_Start+0x19c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d105      	bne.n	80013b6 <HAL_ADC_Start+0x106>
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <HAL_ADC_Start+0x194>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 031f 	and.w	r3, r3, #31
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00a      	beq.n	80013cc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a25      	ldr	r2, [pc, #148]	; (8001450 <HAL_ADC_Start+0x1a0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d136      	bne.n	800142e <HAL_ADC_Start+0x17e>
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_ADC_Start+0x194>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d130      	bne.n	800142e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d129      	bne.n	800142e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	e020      	b.n	800142e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a15      	ldr	r2, [pc, #84]	; (8001448 <HAL_ADC_Start+0x198>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d11b      	bne.n	800142e <HAL_ADC_Start+0x17e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d114      	bne.n	800142e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	e00b      	b.n	800142e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f043 0210 	orr.w	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f043 0201 	orr.w	r2, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000000 	.word	0x20000000
 8001440:	431bde83 	.word	0x431bde83
 8001444:	40012300 	.word	0x40012300
 8001448:	40012000 	.word	0x40012000
 800144c:	40012100 	.word	0x40012100
 8001450:	40012200 	.word	0x40012200

08001454 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001462:	2b01      	cmp	r3, #1
 8001464:	d101      	bne.n	800146a <HAL_ADC_Stop+0x16>
 8001466:	2302      	movs	r3, #2
 8001468:	e021      	b.n	80014ae <HAL_ADC_Stop+0x5a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0201 	bic.w	r2, r2, #1
 8001480:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d109      	bne.n	80014a4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	f043 0201 	orr.w	r2, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d6:	d113      	bne.n	8001500 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014e6:	d10b      	bne.n	8001500 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f043 0220 	orr.w	r2, r3, #32
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e063      	b.n	80015c8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001500:	f7ff fe62 	bl	80011c8 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001506:	e021      	b.n	800154c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150e:	d01d      	beq.n	800154c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <HAL_ADC_PollForConversion+0x6c>
 8001516:	f7ff fe57 	bl	80011c8 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d212      	bcs.n	800154c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b02      	cmp	r3, #2
 8001532:	d00b      	beq.n	800154c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f043 0204 	orr.w	r2, r3, #4
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e03d      	b.n	80015c8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b02      	cmp	r3, #2
 8001558:	d1d6      	bne.n	8001508 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f06f 0212 	mvn.w	r2, #18
 8001562:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d123      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001582:	2b00      	cmp	r3, #0
 8001584:	d11f      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d111      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d105      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_Start_IT+0x1a>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e0bd      	b.n	8001766 <HAL_ADC_Start_IT+0x196>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d018      	beq.n	8001632 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001610:	4b58      	ldr	r3, [pc, #352]	; (8001774 <HAL_ADC_Start_IT+0x1a4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a58      	ldr	r2, [pc, #352]	; (8001778 <HAL_ADC_Start_IT+0x1a8>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0c9a      	lsrs	r2, r3, #18
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001624:	e002      	b.n	800162c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	3b01      	subs	r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f9      	bne.n	8001626 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b01      	cmp	r3, #1
 800163e:	f040 8085 	bne.w	800174c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800166c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001680:	d106      	bne.n	8001690 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f023 0206 	bic.w	r2, r3, #6
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	645a      	str	r2, [r3, #68]	; 0x44
 800168e:	e002      	b.n	8001696 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <HAL_ADC_Start_IT+0x1ac>)
 80016a0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016aa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016ba:	f043 0320 	orr.w	r3, r3, #32
 80016be:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d12a      	bne.n	8001722 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2b      	ldr	r2, [pc, #172]	; (8001780 <HAL_ADC_Start_IT+0x1b0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d015      	beq.n	8001702 <HAL_ADC_Start_IT+0x132>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a2a      	ldr	r2, [pc, #168]	; (8001784 <HAL_ADC_Start_IT+0x1b4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d105      	bne.n	80016ec <HAL_ADC_Start_IT+0x11c>
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <HAL_ADC_Start_IT+0x1ac>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00a      	beq.n	8001702 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a25      	ldr	r2, [pc, #148]	; (8001788 <HAL_ADC_Start_IT+0x1b8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d136      	bne.n	8001764 <HAL_ADC_Start_IT+0x194>
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_ADC_Start_IT+0x1ac>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d130      	bne.n	8001764 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d129      	bne.n	8001764 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	e020      	b.n	8001764 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a16      	ldr	r2, [pc, #88]	; (8001780 <HAL_ADC_Start_IT+0x1b0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d11b      	bne.n	8001764 <HAL_ADC_Start_IT+0x194>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d114      	bne.n	8001764 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	e00b      	b.n	8001764 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f043 0210 	orr.w	r2, r3, #16
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	f043 0201 	orr.w	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000000 	.word	0x20000000
 8001778:	431bde83 	.word	0x431bde83
 800177c:	40012300 	.word	0x40012300
 8001780:	40012000 	.word	0x40012000
 8001784:	40012100 	.word	0x40012100
 8001788:	40012200 	.word	0x40012200

0800178c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1c>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e113      	b.n	80019ec <HAL_ADC_ConfigChannel+0x244>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b09      	cmp	r3, #9
 80017d2:	d925      	bls.n	8001820 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68d9      	ldr	r1, [r3, #12]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	3b1e      	subs	r3, #30
 80017ea:	2207      	movs	r2, #7
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43da      	mvns	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	400a      	ands	r2, r1
 80017f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68d9      	ldr	r1, [r3, #12]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b29b      	uxth	r3, r3
 800180a:	4618      	mov	r0, r3
 800180c:	4603      	mov	r3, r0
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4403      	add	r3, r0
 8001812:	3b1e      	subs	r3, #30
 8001814:	409a      	lsls	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	e022      	b.n	8001866 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6919      	ldr	r1, [r3, #16]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b29b      	uxth	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	2207      	movs	r2, #7
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	400a      	ands	r2, r1
 8001842:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6919      	ldr	r1, [r3, #16]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	b29b      	uxth	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	4603      	mov	r3, r0
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4403      	add	r3, r0
 800185c:	409a      	lsls	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b06      	cmp	r3, #6
 800186c:	d824      	bhi.n	80018b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	3b05      	subs	r3, #5
 8001880:	221f      	movs	r2, #31
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	400a      	ands	r2, r1
 800188e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	3b05      	subs	r3, #5
 80018aa:	fa00 f203 	lsl.w	r2, r0, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
 80018b6:	e04c      	b.n	8001952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b0c      	cmp	r3, #12
 80018be:	d824      	bhi.n	800190a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	3b23      	subs	r3, #35	; 0x23
 80018d2:	221f      	movs	r2, #31
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43da      	mvns	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	400a      	ands	r2, r1
 80018e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	3b23      	subs	r3, #35	; 0x23
 80018fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	631a      	str	r2, [r3, #48]	; 0x30
 8001908:	e023      	b.n	8001952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	3b41      	subs	r3, #65	; 0x41
 800191c:	221f      	movs	r2, #31
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	400a      	ands	r2, r1
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	3b41      	subs	r3, #65	; 0x41
 8001946:	fa00 f203 	lsl.w	r2, r0, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_ADC_ConfigChannel+0x250>)
 8001954:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a28      	ldr	r2, [pc, #160]	; (80019fc <HAL_ADC_ConfigChannel+0x254>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d10f      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1d8>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b12      	cmp	r3, #18
 8001966:	d10b      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <HAL_ADC_ConfigChannel+0x254>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d12b      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x23a>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <HAL_ADC_ConfigChannel+0x258>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d003      	beq.n	800199c <HAL_ADC_ConfigChannel+0x1f4>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b11      	cmp	r3, #17
 800199a:	d122      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_ADC_ConfigChannel+0x258>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d111      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_ADC_ConfigChannel+0x25c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_ADC_ConfigChannel+0x260>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	0c9a      	lsrs	r2, r3, #18
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019d4:	e002      	b.n	80019dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	3b01      	subs	r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f9      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40012300 	.word	0x40012300
 80019fc:	40012000 	.word	0x40012000
 8001a00:	10000012 	.word	0x10000012
 8001a04:	20000000 	.word	0x20000000
 8001a08:	431bde83 	.word	0x431bde83

08001a0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a14:	4b79      	ldr	r3, [pc, #484]	; (8001bfc <ADC_Init+0x1f0>)
 8001a16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	021a      	lsls	r2, r3, #8
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6899      	ldr	r1, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <ADC_Init+0x1f4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d022      	beq.n	8001aea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ab2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6899      	ldr	r1, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6899      	ldr	r1, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	e00f      	b.n	8001b0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0202 	bic.w	r2, r2, #2
 8001b18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6899      	ldr	r1, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7e1b      	ldrb	r3, [r3, #24]
 8001b24:	005a      	lsls	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01b      	beq.n	8001b70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6859      	ldr	r1, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	3b01      	subs	r3, #1
 8001b64:	035a      	lsls	r2, r3, #13
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	e007      	b.n	8001b80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	051a      	lsls	r2, r3, #20
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6899      	ldr	r1, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bc2:	025a      	lsls	r2, r3, #9
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6899      	ldr	r1, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	029a      	lsls	r2, r3, #10
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	609a      	str	r2, [r3, #8]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40012300 	.word	0x40012300
 8001c00:	0f000001 	.word	0x0f000001

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff8e 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff47 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff5c 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff8e 	bl	8001cbc <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5d 	bl	8001c68 <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffb0 	bl	8001d24 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e014      	b.n	8001e0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	791b      	ldrb	r3, [r3, #4]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7fe fee9 	bl	8000bc8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	795b      	ldrb	r3, [r3, #5]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_DAC_Start+0x16>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e040      	b.n	8001eaa <HAL_DAC_Start+0x98>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2201      	movs	r2, #1
 8001e42:	409a      	lsls	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10f      	bne.n	8001e72 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001e5c:	2b3c      	cmp	r3, #60	; 0x3c
 8001e5e:	d11d      	bne.n	8001e9c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	e014      	b.n	8001e9c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	213c      	movs	r1, #60	; 0x3c
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d107      	bne.n	8001e9c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0202 	orr.w	r2, r2, #2
 8001e9a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b087      	sub	sp, #28
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	3308      	adds	r3, #8
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e004      	b.n	8001eea <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3314      	adds	r3, #20
 8001ee8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	461a      	mov	r2, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	795b      	ldrb	r3, [r3, #5]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_DAC_ConfigChannel+0x18>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e03c      	b.n	8001f92 <HAL_DAC_ConfigChannel+0x92>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2202      	movs	r2, #2
 8001f22:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6819      	ldr	r1, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	22c0      	movs	r2, #192	; 0xc0
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	400a      	ands	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2201      	movs	r2, #1
 8001f88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e06c      	b.n	800208c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2223      	movs	r2, #35	; 0x23
 8001fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7fe fe43 	bl	8000c50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_ETH_Init+0xf4>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	4a30      	ldr	r2, [pc, #192]	; (8002094 <HAL_ETH_Init+0xf4>)
 8001fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fda:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <HAL_ETH_Init+0xf4>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001fe6:	4b2c      	ldr	r3, [pc, #176]	; (8002098 <HAL_ETH_Init+0xf8>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <HAL_ETH_Init+0xf8>)
 8001fec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ff0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ff2:	4b29      	ldr	r3, [pc, #164]	; (8002098 <HAL_ETH_Init+0xf8>)
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	4927      	ldr	r1, [pc, #156]	; (8002098 <HAL_ETH_Init+0xf8>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002000:	4b25      	ldr	r3, [pc, #148]	; (8002098 <HAL_ETH_Init+0xf8>)
 8002002:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800201a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800201c:	f7ff f8d4 	bl	80011c8 <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002022:	e011      	b.n	8002048 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002024:	f7ff f8d0 	bl	80011c8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002032:	d909      	bls.n	8002048 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2204      	movs	r2, #4
 8002038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	22e0      	movs	r2, #224	; 0xe0
 8002040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e021      	b.n	800208c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e4      	bne.n	8002024 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f958 	bl	8002310 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f9ff 	bl	8002464 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fa55 	bl	8002516 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	461a      	mov	r2, r3
 8002072:	2100      	movs	r1, #0
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f9bd 	bl	80023f4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2210      	movs	r2, #16
 8002086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	40013800 	.word	0x40013800

0800209c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <ETH_SetMACConfig+0x15c>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	7c1b      	ldrb	r3, [r3, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <ETH_SetMACConfig+0x28>
 80020be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80020c2:	e000      	b.n	80020c6 <ETH_SetMACConfig+0x2a>
 80020c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	7c5b      	ldrb	r3, [r3, #17]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <ETH_SetMACConfig+0x38>
 80020ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020d2:	e000      	b.n	80020d6 <ETH_SetMACConfig+0x3a>
 80020d4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020d6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	7fdb      	ldrb	r3, [r3, #31]
 80020e2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80020e4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	7f92      	ldrb	r2, [r2, #30]
 80020f0:	2a00      	cmp	r2, #0
 80020f2:	d102      	bne.n	80020fa <ETH_SetMACConfig+0x5e>
 80020f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020f8:	e000      	b.n	80020fc <ETH_SetMACConfig+0x60>
 80020fa:	2200      	movs	r2, #0
                        macconf->Speed |
 80020fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	7f1b      	ldrb	r3, [r3, #28]
 8002102:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002104:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800210a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	791b      	ldrb	r3, [r3, #4]
 8002110:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002112:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	f892 2020 	ldrb.w	r2, [r2, #32]
 800211a:	2a00      	cmp	r2, #0
 800211c:	d102      	bne.n	8002124 <ETH_SetMACConfig+0x88>
 800211e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002122:	e000      	b.n	8002126 <ETH_SetMACConfig+0x8a>
 8002124:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002126:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	7bdb      	ldrb	r3, [r3, #15]
 800212c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800212e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002134:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800213c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800213e:	4313      	orrs	r3, r2
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002156:	2001      	movs	r0, #1
 8002158:	f7ff f842 	bl	80011e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002172:	4013      	ands	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002182:	2a00      	cmp	r2, #0
 8002184:	d101      	bne.n	800218a <ETH_SetMACConfig+0xee>
 8002186:	2280      	movs	r2, #128	; 0x80
 8002188:	e000      	b.n	800218c <ETH_SetMACConfig+0xf0>
 800218a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800218c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002192:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800219a:	2a01      	cmp	r2, #1
 800219c:	d101      	bne.n	80021a2 <ETH_SetMACConfig+0x106>
 800219e:	2208      	movs	r2, #8
 80021a0:	e000      	b.n	80021a4 <ETH_SetMACConfig+0x108>
 80021a2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80021a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80021ac:	2a01      	cmp	r2, #1
 80021ae:	d101      	bne.n	80021b4 <ETH_SetMACConfig+0x118>
 80021b0:	2204      	movs	r2, #4
 80021b2:	e000      	b.n	80021b6 <ETH_SetMACConfig+0x11a>
 80021b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80021be:	2a01      	cmp	r2, #1
 80021c0:	d101      	bne.n	80021c6 <ETH_SetMACConfig+0x12a>
 80021c2:	2202      	movs	r2, #2
 80021c4:	e000      	b.n	80021c8 <ETH_SetMACConfig+0x12c>
 80021c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021c8:	4313      	orrs	r3, r2
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021e0:	2001      	movs	r0, #1
 80021e2:	f7fe fffd 	bl	80011e0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	619a      	str	r2, [r3, #24]
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	ff20810f 	.word	0xff20810f

080021fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4b3d      	ldr	r3, [pc, #244]	; (800230c <ETH_SetDMAConfig+0x110>)
 8002216:	4013      	ands	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	7b1b      	ldrb	r3, [r3, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <ETH_SetDMAConfig+0x2c>
 8002222:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002226:	e000      	b.n	800222a <ETH_SetDMAConfig+0x2e>
 8002228:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	7b5b      	ldrb	r3, [r3, #13]
 800222e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002230:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	7f52      	ldrb	r2, [r2, #29]
 8002236:	2a00      	cmp	r2, #0
 8002238:	d102      	bne.n	8002240 <ETH_SetDMAConfig+0x44>
 800223a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800223e:	e000      	b.n	8002242 <ETH_SetDMAConfig+0x46>
 8002240:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002242:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	7b9b      	ldrb	r3, [r3, #14]
 8002248:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800224a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002250:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	7f1b      	ldrb	r3, [r3, #28]
 8002256:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002258:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	7f9b      	ldrb	r3, [r3, #30]
 800225e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002260:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002266:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800226e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002270:	4313      	orrs	r3, r2
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002280:	461a      	mov	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002292:	2001      	movs	r0, #1
 8002294:	f7fe ffa4 	bl	80011e0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a0:	461a      	mov	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	791b      	ldrb	r3, [r3, #4]
 80022aa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022b0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80022b6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022bc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022c4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80022c6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022ce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022d4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022e2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7fe ff75 	bl	80011e0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6013      	str	r3, [r2, #0]
}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	f8de3f23 	.word	0xf8de3f23

08002310 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b0a6      	sub	sp, #152	; 0x98
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002318:	2301      	movs	r3, #1
 800231a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002324:	2300      	movs	r3, #0
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800232e:	2301      	movs	r3, #1
 8002330:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800233a:	2301      	movs	r3, #1
 800233c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002346:	2300      	movs	r3, #0
 8002348:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800234c:	2300      	movs	r3, #0
 800234e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002350:	2300      	movs	r3, #0
 8002352:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002356:	2300      	movs	r3, #0
 8002358:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002372:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002376:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002378:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800237c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002384:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002388:	4619      	mov	r1, r3
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff fe86 	bl	800209c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002390:	2301      	movs	r3, #1
 8002392:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002394:	2301      	movs	r3, #1
 8002396:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002398:	2301      	movs	r3, #1
 800239a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800239e:	2301      	movs	r3, #1
 80023a0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023bc:	2301      	movs	r3, #1
 80023be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023c4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023e0:	f107 0308 	add.w	r3, r7, #8
 80023e4:	4619      	mov	r1, r3
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ff08 	bl	80021fc <ETH_SetDMAConfig>
}
 80023ec:	bf00      	nop
 80023ee:	3798      	adds	r7, #152	; 0x98
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3305      	adds	r3, #5
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	3204      	adds	r2, #4
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <ETH_MACAddressConfig+0x68>)
 8002416:	4413      	add	r3, r2
 8002418:	461a      	mov	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3303      	adds	r3, #3
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	061a      	lsls	r2, r3, #24
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3302      	adds	r3, #2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3301      	adds	r3, #1
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	4313      	orrs	r3, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <ETH_MACAddressConfig+0x6c>)
 8002446:	4413      	add	r3, r2
 8002448:	461a      	mov	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	6013      	str	r3, [r2, #0]
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40028040 	.word	0x40028040
 8002460:	40028044 	.word	0x40028044

08002464 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	e03e      	b.n	80024f0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68d9      	ldr	r1, [r3, #12]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	440b      	add	r3, r1
 8002482:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2200      	movs	r2, #0
 800248e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2200      	movs	r2, #0
 800249a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	3206      	adds	r2, #6
 80024a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d80c      	bhi.n	80024d4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68d9      	ldr	r1, [r3, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	e004      	b.n	80024de <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	461a      	mov	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3301      	adds	r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d9bd      	bls.n	8002472 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002508:	611a      	str	r2, [r3, #16]
}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	e046      	b.n	80025b2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6919      	ldr	r1, [r3, #16]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2200      	movs	r2, #0
 8002540:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2200      	movs	r2, #0
 8002552:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2200      	movs	r2, #0
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002560:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002568:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	3212      	adds	r2, #18
 800257e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d80c      	bhi.n	80025a2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6919      	ldr	r1, [r3, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	60da      	str	r2, [r3, #12]
 80025a0:	e004      	b.n	80025ac <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3301      	adds	r3, #1
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d9b5      	bls.n	8002524 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e2:	60da      	str	r2, [r3, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	e177      	b.n	80028fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800260c:	2201      	movs	r2, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	429a      	cmp	r2, r3
 8002626:	f040 8166 	bne.w	80028f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b01      	cmp	r3, #1
 8002634:	d005      	beq.n	8002642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263e:	2b02      	cmp	r3, #2
 8002640:	d130      	bne.n	80026a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	2203      	movs	r2, #3
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002678:	2201      	movs	r2, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 0201 	and.w	r2, r3, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d017      	beq.n	80026e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d123      	bne.n	8002734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	08da      	lsrs	r2, r3, #3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3208      	adds	r2, #8
 80026f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	220f      	movs	r2, #15
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	08da      	lsrs	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3208      	adds	r2, #8
 800272e:	69b9      	ldr	r1, [r7, #24]
 8002730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2203      	movs	r2, #3
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0203 	and.w	r2, r3, #3
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80c0 	beq.w	80028f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b66      	ldr	r3, [pc, #408]	; (8002914 <HAL_GPIO_Init+0x324>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	4a65      	ldr	r2, [pc, #404]	; (8002914 <HAL_GPIO_Init+0x324>)
 8002780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002784:	6453      	str	r3, [r2, #68]	; 0x44
 8002786:	4b63      	ldr	r3, [pc, #396]	; (8002914 <HAL_GPIO_Init+0x324>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002792:	4a61      	ldr	r2, [pc, #388]	; (8002918 <HAL_GPIO_Init+0x328>)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	3302      	adds	r3, #2
 800279a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	220f      	movs	r2, #15
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a58      	ldr	r2, [pc, #352]	; (800291c <HAL_GPIO_Init+0x32c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d037      	beq.n	800282e <HAL_GPIO_Init+0x23e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a57      	ldr	r2, [pc, #348]	; (8002920 <HAL_GPIO_Init+0x330>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d031      	beq.n	800282a <HAL_GPIO_Init+0x23a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a56      	ldr	r2, [pc, #344]	; (8002924 <HAL_GPIO_Init+0x334>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d02b      	beq.n	8002826 <HAL_GPIO_Init+0x236>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a55      	ldr	r2, [pc, #340]	; (8002928 <HAL_GPIO_Init+0x338>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d025      	beq.n	8002822 <HAL_GPIO_Init+0x232>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a54      	ldr	r2, [pc, #336]	; (800292c <HAL_GPIO_Init+0x33c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01f      	beq.n	800281e <HAL_GPIO_Init+0x22e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a53      	ldr	r2, [pc, #332]	; (8002930 <HAL_GPIO_Init+0x340>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d019      	beq.n	800281a <HAL_GPIO_Init+0x22a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_GPIO_Init+0x344>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_GPIO_Init+0x226>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a51      	ldr	r2, [pc, #324]	; (8002938 <HAL_GPIO_Init+0x348>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00d      	beq.n	8002812 <HAL_GPIO_Init+0x222>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a50      	ldr	r2, [pc, #320]	; (800293c <HAL_GPIO_Init+0x34c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d007      	beq.n	800280e <HAL_GPIO_Init+0x21e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4f      	ldr	r2, [pc, #316]	; (8002940 <HAL_GPIO_Init+0x350>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_GPIO_Init+0x21a>
 8002806:	2309      	movs	r3, #9
 8002808:	e012      	b.n	8002830 <HAL_GPIO_Init+0x240>
 800280a:	230a      	movs	r3, #10
 800280c:	e010      	b.n	8002830 <HAL_GPIO_Init+0x240>
 800280e:	2308      	movs	r3, #8
 8002810:	e00e      	b.n	8002830 <HAL_GPIO_Init+0x240>
 8002812:	2307      	movs	r3, #7
 8002814:	e00c      	b.n	8002830 <HAL_GPIO_Init+0x240>
 8002816:	2306      	movs	r3, #6
 8002818:	e00a      	b.n	8002830 <HAL_GPIO_Init+0x240>
 800281a:	2305      	movs	r3, #5
 800281c:	e008      	b.n	8002830 <HAL_GPIO_Init+0x240>
 800281e:	2304      	movs	r3, #4
 8002820:	e006      	b.n	8002830 <HAL_GPIO_Init+0x240>
 8002822:	2303      	movs	r3, #3
 8002824:	e004      	b.n	8002830 <HAL_GPIO_Init+0x240>
 8002826:	2302      	movs	r3, #2
 8002828:	e002      	b.n	8002830 <HAL_GPIO_Init+0x240>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_GPIO_Init+0x240>
 800282e:	2300      	movs	r3, #0
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	f002 0203 	and.w	r2, r2, #3
 8002836:	0092      	lsls	r2, r2, #2
 8002838:	4093      	lsls	r3, r2
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002840:	4935      	ldr	r1, [pc, #212]	; (8002918 <HAL_GPIO_Init+0x328>)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	3302      	adds	r3, #2
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800284e:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <HAL_GPIO_Init+0x354>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002872:	4a34      	ldr	r2, [pc, #208]	; (8002944 <HAL_GPIO_Init+0x354>)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002878:	4b32      	ldr	r3, [pc, #200]	; (8002944 <HAL_GPIO_Init+0x354>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800289c:	4a29      	ldr	r2, [pc, #164]	; (8002944 <HAL_GPIO_Init+0x354>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028a2:	4b28      	ldr	r3, [pc, #160]	; (8002944 <HAL_GPIO_Init+0x354>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028c6:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <HAL_GPIO_Init+0x354>)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_GPIO_Init+0x354>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f0:	4a14      	ldr	r2, [pc, #80]	; (8002944 <HAL_GPIO_Init+0x354>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3301      	adds	r3, #1
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	2b0f      	cmp	r3, #15
 8002900:	f67f ae84 	bls.w	800260c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3724      	adds	r7, #36	; 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800
 8002918:	40013800 	.word	0x40013800
 800291c:	40020000 	.word	0x40020000
 8002920:	40020400 	.word	0x40020400
 8002924:	40020800 	.word	0x40020800
 8002928:	40020c00 	.word	0x40020c00
 800292c:	40021000 	.word	0x40021000
 8002930:	40021400 	.word	0x40021400
 8002934:	40021800 	.word	0x40021800
 8002938:	40021c00 	.word	0x40021c00
 800293c:	40022000 	.word	0x40022000
 8002940:	40022400 	.word	0x40022400
 8002944:	40013c00 	.word	0x40013c00

08002948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
 8002954:	4613      	mov	r3, r2
 8002956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002958:	787b      	ldrb	r3, [r7, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002964:	e003      	b.n	800296e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	041a      	lsls	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800297a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297c:	b08f      	sub	sp, #60	; 0x3c
 800297e:	af0a      	add	r7, sp, #40	; 0x28
 8002980:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e10f      	b.n	8002bac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fa60 	bl	8000e6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2203      	movs	r2, #3
 80029b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 f9ad 	bl	8003d2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	687e      	ldr	r6, [r7, #4]
 80029d8:	466d      	mov	r5, sp
 80029da:	f106 0410 	add.w	r4, r6, #16
 80029de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80029ee:	1d33      	adds	r3, r6, #4
 80029f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f2:	6838      	ldr	r0, [r7, #0]
 80029f4:	f001 f938 	bl	8003c68 <USB_CoreInit>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2202      	movs	r2, #2
 8002a02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0d0      	b.n	8002bac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f001 f99b 	bl	8003d4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	e04a      	b.n	8002ab2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	333d      	adds	r3, #61	; 0x3d
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	333c      	adds	r3, #60	; 0x3c
 8002a40:	7bfa      	ldrb	r2, [r7, #15]
 8002a42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	b298      	uxth	r0, r3
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	3344      	adds	r3, #68	; 0x44
 8002a58:	4602      	mov	r2, r0
 8002a5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	3340      	adds	r3, #64	; 0x40
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3348      	adds	r3, #72	; 0x48
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	334c      	adds	r3, #76	; 0x4c
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3354      	adds	r3, #84	; 0x54
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d3af      	bcc.n	8002a1c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e044      	b.n	8002b4c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b30:	7bfa      	ldrb	r2, [r7, #15]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d3b5      	bcc.n	8002ac2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	687e      	ldr	r6, [r7, #4]
 8002b5e:	466d      	mov	r5, sp
 8002b60:	f106 0410 	add.w	r4, r6, #16
 8002b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b70:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b74:	1d33      	adds	r3, r6, #4
 8002b76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b78:	6838      	ldr	r0, [r7, #0]
 8002b7a:	f001 f933 	bl	8003de4 <USB_DevInit>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e00d      	b.n	8002bac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fafe 	bl	80041a6 <USB_DevDisconnect>

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e267      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d075      	beq.n	8002cbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bd2:	4b88      	ldr	r3, [pc, #544]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bde:	4b85      	ldr	r3, [pc, #532]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d112      	bne.n	8002c10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bea:	4b82      	ldr	r3, [pc, #520]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf6:	d10b      	bne.n	8002c10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf8:	4b7e      	ldr	r3, [pc, #504]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d05b      	beq.n	8002cbc <HAL_RCC_OscConfig+0x108>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d157      	bne.n	8002cbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e242      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c18:	d106      	bne.n	8002c28 <HAL_RCC_OscConfig+0x74>
 8002c1a:	4b76      	ldr	r3, [pc, #472]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a75      	ldr	r2, [pc, #468]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e01d      	b.n	8002c64 <HAL_RCC_OscConfig+0xb0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x98>
 8002c32:	4b70      	ldr	r3, [pc, #448]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6f      	ldr	r2, [pc, #444]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b6d      	ldr	r3, [pc, #436]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a6c      	ldr	r2, [pc, #432]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0xb0>
 8002c4c:	4b69      	ldr	r3, [pc, #420]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a68      	ldr	r2, [pc, #416]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	4b66      	ldr	r3, [pc, #408]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a65      	ldr	r2, [pc, #404]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d013      	beq.n	8002c94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6c:	f7fe faac 	bl	80011c8 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe faa8 	bl	80011c8 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e207      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	4b5b      	ldr	r3, [pc, #364]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0xc0>
 8002c92:	e014      	b.n	8002cbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fe fa98 	bl	80011c8 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7fe fa94 	bl	80011c8 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e1f3      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	4b51      	ldr	r3, [pc, #324]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0xe8>
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d063      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cca:	4b4a      	ldr	r3, [pc, #296]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd6:	4b47      	ldr	r3, [pc, #284]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d11c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce2:	4b44      	ldr	r3, [pc, #272]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d116      	bne.n	8002d1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cee:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_RCC_OscConfig+0x152>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d001      	beq.n	8002d06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e1c7      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d06:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4937      	ldr	r1, [pc, #220]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	e03a      	b.n	8002d92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d24:	4b34      	ldr	r3, [pc, #208]	; (8002df8 <HAL_RCC_OscConfig+0x244>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fa4d 	bl	80011c8 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d32:	f7fe fa49 	bl	80011c8 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e1a8      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d50:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4925      	ldr	r1, [pc, #148]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
 8002d64:	e015      	b.n	8002d92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_RCC_OscConfig+0x244>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fa2c 	bl	80011c8 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d74:	f7fe fa28 	bl	80011c8 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e187      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d036      	beq.n	8002e0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_RCC_OscConfig+0x248>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fe fa0c 	bl	80011c8 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe fa08 	bl	80011c8 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e167      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x200>
 8002dd2:	e01b      	b.n	8002e0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_RCC_OscConfig+0x248>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dda:	f7fe f9f5 	bl	80011c8 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	e00e      	b.n	8002e00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de2:	f7fe f9f1 	bl	80011c8 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d907      	bls.n	8002e00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e150      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
 8002df4:	40023800 	.word	0x40023800
 8002df8:	42470000 	.word	0x42470000
 8002dfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	4b88      	ldr	r3, [pc, #544]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ea      	bne.n	8002de2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8097 	beq.w	8002f48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b81      	ldr	r3, [pc, #516]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	4b7d      	ldr	r3, [pc, #500]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a7c      	ldr	r2, [pc, #496]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b7a      	ldr	r3, [pc, #488]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4a:	4b77      	ldr	r3, [pc, #476]	; (8003028 <HAL_RCC_OscConfig+0x474>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d118      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e56:	4b74      	ldr	r3, [pc, #464]	; (8003028 <HAL_RCC_OscConfig+0x474>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a73      	ldr	r2, [pc, #460]	; (8003028 <HAL_RCC_OscConfig+0x474>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e62:	f7fe f9b1 	bl	80011c8 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6a:	f7fe f9ad 	bl	80011c8 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e10c      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <HAL_RCC_OscConfig+0x474>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x2ea>
 8002e90:	4b64      	ldr	r3, [pc, #400]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a63      	ldr	r2, [pc, #396]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9c:	e01c      	b.n	8002ed8 <HAL_RCC_OscConfig+0x324>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b05      	cmp	r3, #5
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x30c>
 8002ea6:	4b5f      	ldr	r3, [pc, #380]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4a5e      	ldr	r2, [pc, #376]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002eac:	f043 0304 	orr.w	r3, r3, #4
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb2:	4b5c      	ldr	r3, [pc, #368]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	4a5b      	ldr	r2, [pc, #364]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x324>
 8002ec0:	4b58      	ldr	r3, [pc, #352]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4a57      	ldr	r2, [pc, #348]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	6713      	str	r3, [r2, #112]	; 0x70
 8002ecc:	4b55      	ldr	r3, [pc, #340]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a54      	ldr	r2, [pc, #336]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ed2:	f023 0304 	bic.w	r3, r3, #4
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d015      	beq.n	8002f0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fe f972 	bl	80011c8 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7fe f96e 	bl	80011c8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0cb      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efe:	4b49      	ldr	r3, [pc, #292]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ee      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x334>
 8002f0a:	e014      	b.n	8002f36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0c:	f7fe f95c 	bl	80011c8 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe f958 	bl	80011c8 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0b5      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1ee      	bne.n	8002f14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3c:	4b39      	ldr	r3, [pc, #228]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	4a38      	ldr	r2, [pc, #224]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80a1 	beq.w	8003094 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f52:	4b34      	ldr	r3, [pc, #208]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d05c      	beq.n	8003018 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d141      	bne.n	8002fea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f66:	4b31      	ldr	r3, [pc, #196]	; (800302c <HAL_RCC_OscConfig+0x478>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fe f92c 	bl	80011c8 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fe f928 	bl	80011c8 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e087      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	4b27      	ldr	r3, [pc, #156]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	019b      	lsls	r3, r3, #6
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	3b01      	subs	r3, #1
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	061b      	lsls	r3, r3, #24
 8002fb6:	491b      	ldr	r1, [pc, #108]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_RCC_OscConfig+0x478>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe f901 	bl	80011c8 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fca:	f7fe f8fd 	bl	80011c8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e05c      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x416>
 8002fe8:	e054      	b.n	8003094 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <HAL_RCC_OscConfig+0x478>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fe f8ea 	bl	80011c8 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fe f8e6 	bl	80011c8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e045      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x444>
 8003016:	e03d      	b.n	8003094 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d107      	bne.n	8003030 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e038      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
 8003024:	40023800 	.word	0x40023800
 8003028:	40007000 	.word	0x40007000
 800302c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x4ec>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d028      	beq.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d121      	bne.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d11a      	bne.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003060:	4013      	ands	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003066:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003068:	4293      	cmp	r3, r2
 800306a:	d111      	bne.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	3b01      	subs	r3, #1
 800307a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d107      	bne.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800

080030a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0cc      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b8:	4b68      	ldr	r3, [pc, #416]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d90c      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b65      	ldr	r3, [pc, #404]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b63      	ldr	r3, [pc, #396]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b8      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f8:	4b59      	ldr	r3, [pc, #356]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a58      	ldr	r2, [pc, #352]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003102:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4a52      	ldr	r2, [pc, #328]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800311a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b50      	ldr	r3, [pc, #320]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	494d      	ldr	r1, [pc, #308]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d044      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d119      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d003      	beq.n	8003162 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315e:	2b03      	cmp	r3, #3
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003162:	4b3f      	ldr	r3, [pc, #252]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e06f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	4b3b      	ldr	r3, [pc, #236]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e067      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003182:	4b37      	ldr	r3, [pc, #220]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f023 0203 	bic.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4934      	ldr	r1, [pc, #208]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003194:	f7fe f818 	bl	80011c8 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319c:	f7fe f814 	bl	80011c8 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e04f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 020c 	and.w	r2, r3, #12
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1eb      	bne.n	800319c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c4:	4b25      	ldr	r3, [pc, #148]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d20c      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e032      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4916      	ldr	r1, [pc, #88]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003216:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	490e      	ldr	r1, [pc, #56]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800322a:	f000 f821 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490a      	ldr	r1, [pc, #40]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RCC_ClockConfig+0x1c8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd ff78 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023c00 	.word	0x40023c00
 8003260:	40023800 	.word	0x40023800
 8003264:	08005128 	.word	0x08005128
 8003268:	20000000 	.word	0x20000000
 800326c:	20000004 	.word	0x20000004

08003270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003274:	b094      	sub	sp, #80	; 0x50
 8003276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	647b      	str	r3, [r7, #68]	; 0x44
 800327c:	2300      	movs	r3, #0
 800327e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003280:	2300      	movs	r3, #0
 8003282:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003288:	4b79      	ldr	r3, [pc, #484]	; (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d00d      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003294:	2b08      	cmp	r3, #8
 8003296:	f200 80e1 	bhi.w	800345c <HAL_RCC_GetSysClockFreq+0x1ec>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x34>
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x3a>
 80032a2:	e0db      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b73      	ldr	r3, [pc, #460]	; (8003474 <HAL_RCC_GetSysClockFreq+0x204>)
 80032a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032a8:	e0db      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032aa:	4b73      	ldr	r3, [pc, #460]	; (8003478 <HAL_RCC_GetSysClockFreq+0x208>)
 80032ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ae:	e0d8      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b0:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ba:	4b6d      	ldr	r3, [pc, #436]	; (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d063      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c6:	4b6a      	ldr	r3, [pc, #424]	; (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	2200      	movs	r2, #0
 80032ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80032d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d8:	633b      	str	r3, [r7, #48]	; 0x30
 80032da:	2300      	movs	r3, #0
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
 80032de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032e2:	4622      	mov	r2, r4
 80032e4:	462b      	mov	r3, r5
 80032e6:	f04f 0000 	mov.w	r0, #0
 80032ea:	f04f 0100 	mov.w	r1, #0
 80032ee:	0159      	lsls	r1, r3, #5
 80032f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f4:	0150      	lsls	r0, r2, #5
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4621      	mov	r1, r4
 80032fc:	1a51      	subs	r1, r2, r1
 80032fe:	6139      	str	r1, [r7, #16]
 8003300:	4629      	mov	r1, r5
 8003302:	eb63 0301 	sbc.w	r3, r3, r1
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003314:	4659      	mov	r1, fp
 8003316:	018b      	lsls	r3, r1, #6
 8003318:	4651      	mov	r1, sl
 800331a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800331e:	4651      	mov	r1, sl
 8003320:	018a      	lsls	r2, r1, #6
 8003322:	4651      	mov	r1, sl
 8003324:	ebb2 0801 	subs.w	r8, r2, r1
 8003328:	4659      	mov	r1, fp
 800332a:	eb63 0901 	sbc.w	r9, r3, r1
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800333a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800333e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003342:	4690      	mov	r8, r2
 8003344:	4699      	mov	r9, r3
 8003346:	4623      	mov	r3, r4
 8003348:	eb18 0303 	adds.w	r3, r8, r3
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	462b      	mov	r3, r5
 8003350:	eb49 0303 	adc.w	r3, r9, r3
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003362:	4629      	mov	r1, r5
 8003364:	024b      	lsls	r3, r1, #9
 8003366:	4621      	mov	r1, r4
 8003368:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800336c:	4621      	mov	r1, r4
 800336e:	024a      	lsls	r2, r1, #9
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003376:	2200      	movs	r2, #0
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
 800337a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800337c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003380:	f7fc ff86 	bl	8000290 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4613      	mov	r3, r2
 800338a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800338c:	e058      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338e:	4b38      	ldr	r3, [pc, #224]	; (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	2200      	movs	r2, #0
 8003396:	4618      	mov	r0, r3
 8003398:	4611      	mov	r1, r2
 800339a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800339e:	623b      	str	r3, [r7, #32]
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
 80033a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033a8:	4642      	mov	r2, r8
 80033aa:	464b      	mov	r3, r9
 80033ac:	f04f 0000 	mov.w	r0, #0
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	0159      	lsls	r1, r3, #5
 80033b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ba:	0150      	lsls	r0, r2, #5
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4641      	mov	r1, r8
 80033c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033c6:	4649      	mov	r1, r9
 80033c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033e0:	ebb2 040a 	subs.w	r4, r2, sl
 80033e4:	eb63 050b 	sbc.w	r5, r3, fp
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	00eb      	lsls	r3, r5, #3
 80033f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033f6:	00e2      	lsls	r2, r4, #3
 80033f8:	4614      	mov	r4, r2
 80033fa:	461d      	mov	r5, r3
 80033fc:	4643      	mov	r3, r8
 80033fe:	18e3      	adds	r3, r4, r3
 8003400:	603b      	str	r3, [r7, #0]
 8003402:	464b      	mov	r3, r9
 8003404:	eb45 0303 	adc.w	r3, r5, r3
 8003408:	607b      	str	r3, [r7, #4]
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003416:	4629      	mov	r1, r5
 8003418:	028b      	lsls	r3, r1, #10
 800341a:	4621      	mov	r1, r4
 800341c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003420:	4621      	mov	r1, r4
 8003422:	028a      	lsls	r2, r1, #10
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800342a:	2200      	movs	r2, #0
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	61fa      	str	r2, [r7, #28]
 8003430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003434:	f7fc ff2c 	bl	8000290 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4613      	mov	r3, r2
 800343e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	3301      	adds	r3, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003450:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_RCC_GetSysClockFreq+0x204>)
 800345e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003464:	4618      	mov	r0, r3
 8003466:	3750      	adds	r7, #80	; 0x50
 8003468:	46bd      	mov	sp, r7
 800346a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800
 8003474:	00f42400 	.word	0x00f42400
 8003478:	007a1200 	.word	0x007a1200

0800347c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003480:	4b03      	ldr	r3, [pc, #12]	; (8003490 <HAL_RCC_GetHCLKFreq+0x14>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000000 	.word	0x20000000

08003494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003498:	f7ff fff0 	bl	800347c <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	0a9b      	lsrs	r3, r3, #10
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4903      	ldr	r1, [pc, #12]	; (80034b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40023800 	.word	0x40023800
 80034b8:	08005138 	.word	0x08005138

080034bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034c0:	f7ff ffdc 	bl	800347c <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	0b5b      	lsrs	r3, r3, #13
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4903      	ldr	r1, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40023800 	.word	0x40023800
 80034e0:	08005138 	.word	0x08005138

080034e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e03f      	b.n	8003576 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd fc66 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2224      	movs	r2, #36	; 0x24
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f929 	bl	8003780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800353c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800354c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800355c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b08a      	sub	sp, #40	; 0x28
 8003582:	af02      	add	r7, sp, #8
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	603b      	str	r3, [r7, #0]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b20      	cmp	r3, #32
 800359c:	d17c      	bne.n	8003698 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_UART_Transmit+0x2c>
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e075      	b.n	800369a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_UART_Transmit+0x3e>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e06e      	b.n	800369a <HAL_UART_Transmit+0x11c>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2221      	movs	r2, #33	; 0x21
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035d2:	f7fd fdf9 	bl	80011c8 <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	88fa      	ldrh	r2, [r7, #6]
 80035e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ec:	d108      	bne.n	8003600 <HAL_UART_Transmit+0x82>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d104      	bne.n	8003600 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e003      	b.n	8003608 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003610:	e02a      	b.n	8003668 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2200      	movs	r2, #0
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f840 	bl	80036a2 <UART_WaitOnFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e036      	b.n	800369a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003640:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	3302      	adds	r3, #2
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	e007      	b.n	800365a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	3301      	adds	r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1cf      	bne.n	8003612 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2200      	movs	r2, #0
 800367a:	2140      	movs	r1, #64	; 0x40
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f810 	bl	80036a2 <UART_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e006      	b.n	800369a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
  }
}
 800369a:	4618      	mov	r0, r3
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b090      	sub	sp, #64	; 0x40
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b2:	e050      	b.n	8003756 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	d04c      	beq.n	8003756 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80036c2:	f7fd fd81 	bl	80011c8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d241      	bcs.n	8003756 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	330c      	adds	r3, #12
 80036f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036f2:	637a      	str	r2, [r7, #52]	; 0x34
 80036f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e5      	bne.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3314      	adds	r3, #20
 800370c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	613b      	str	r3, [r7, #16]
   return(result);
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	63bb      	str	r3, [r7, #56]	; 0x38
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3314      	adds	r3, #20
 8003724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003726:	623a      	str	r2, [r7, #32]
 8003728:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	69f9      	ldr	r1, [r7, #28]
 800372c:	6a3a      	ldr	r2, [r7, #32]
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	61bb      	str	r3, [r7, #24]
   return(result);
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e5      	bne.n	8003706 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e00f      	b.n	8003776 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4013      	ands	r3, r2
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	429a      	cmp	r2, r3
 8003764:	bf0c      	ite	eq
 8003766:	2301      	moveq	r3, #1
 8003768:	2300      	movne	r3, #0
 800376a:	b2db      	uxtb	r3, r3
 800376c:	461a      	mov	r2, r3
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	429a      	cmp	r2, r3
 8003772:	d09f      	beq.n	80036b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3740      	adds	r7, #64	; 0x40
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003784:	b0c0      	sub	sp, #256	; 0x100
 8003786:	af00      	add	r7, sp, #0
 8003788:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	68d9      	ldr	r1, [r3, #12]
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	ea40 0301 	orr.w	r3, r0, r1
 80037a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	431a      	orrs	r2, r3
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037d8:	f021 010c 	bic.w	r1, r1, #12
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037e6:	430b      	orrs	r3, r1
 80037e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fa:	6999      	ldr	r1, [r3, #24]
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	ea40 0301 	orr.w	r3, r0, r1
 8003806:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	4b8f      	ldr	r3, [pc, #572]	; (8003a4c <UART_SetConfig+0x2cc>)
 8003810:	429a      	cmp	r2, r3
 8003812:	d005      	beq.n	8003820 <UART_SetConfig+0xa0>
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b8d      	ldr	r3, [pc, #564]	; (8003a50 <UART_SetConfig+0x2d0>)
 800381c:	429a      	cmp	r2, r3
 800381e:	d104      	bne.n	800382a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003820:	f7ff fe4c 	bl	80034bc <HAL_RCC_GetPCLK2Freq>
 8003824:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003828:	e003      	b.n	8003832 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800382a:	f7ff fe33 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 800382e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383c:	f040 810c 	bne.w	8003a58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003844:	2200      	movs	r2, #0
 8003846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800384a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800384e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003852:	4622      	mov	r2, r4
 8003854:	462b      	mov	r3, r5
 8003856:	1891      	adds	r1, r2, r2
 8003858:	65b9      	str	r1, [r7, #88]	; 0x58
 800385a:	415b      	adcs	r3, r3
 800385c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800385e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003862:	4621      	mov	r1, r4
 8003864:	eb12 0801 	adds.w	r8, r2, r1
 8003868:	4629      	mov	r1, r5
 800386a:	eb43 0901 	adc.w	r9, r3, r1
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800387a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800387e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003882:	4690      	mov	r8, r2
 8003884:	4699      	mov	r9, r3
 8003886:	4623      	mov	r3, r4
 8003888:	eb18 0303 	adds.w	r3, r8, r3
 800388c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003890:	462b      	mov	r3, r5
 8003892:	eb49 0303 	adc.w	r3, r9, r3
 8003896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800389a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038ae:	460b      	mov	r3, r1
 80038b0:	18db      	adds	r3, r3, r3
 80038b2:	653b      	str	r3, [r7, #80]	; 0x50
 80038b4:	4613      	mov	r3, r2
 80038b6:	eb42 0303 	adc.w	r3, r2, r3
 80038ba:	657b      	str	r3, [r7, #84]	; 0x54
 80038bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038c4:	f7fc fce4 	bl	8000290 <__aeabi_uldivmod>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4b61      	ldr	r3, [pc, #388]	; (8003a54 <UART_SetConfig+0x2d4>)
 80038ce:	fba3 2302 	umull	r2, r3, r3, r2
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	011c      	lsls	r4, r3, #4
 80038d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038e8:	4642      	mov	r2, r8
 80038ea:	464b      	mov	r3, r9
 80038ec:	1891      	adds	r1, r2, r2
 80038ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80038f0:	415b      	adcs	r3, r3
 80038f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038f8:	4641      	mov	r1, r8
 80038fa:	eb12 0a01 	adds.w	sl, r2, r1
 80038fe:	4649      	mov	r1, r9
 8003900:	eb43 0b01 	adc.w	fp, r3, r1
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003910:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003918:	4692      	mov	sl, r2
 800391a:	469b      	mov	fp, r3
 800391c:	4643      	mov	r3, r8
 800391e:	eb1a 0303 	adds.w	r3, sl, r3
 8003922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003926:	464b      	mov	r3, r9
 8003928:	eb4b 0303 	adc.w	r3, fp, r3
 800392c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800393c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003940:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003944:	460b      	mov	r3, r1
 8003946:	18db      	adds	r3, r3, r3
 8003948:	643b      	str	r3, [r7, #64]	; 0x40
 800394a:	4613      	mov	r3, r2
 800394c:	eb42 0303 	adc.w	r3, r2, r3
 8003950:	647b      	str	r3, [r7, #68]	; 0x44
 8003952:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003956:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800395a:	f7fc fc99 	bl	8000290 <__aeabi_uldivmod>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4611      	mov	r1, r2
 8003964:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <UART_SetConfig+0x2d4>)
 8003966:	fba3 2301 	umull	r2, r3, r3, r1
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	2264      	movs	r2, #100	; 0x64
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	1acb      	subs	r3, r1, r3
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800397a:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <UART_SetConfig+0x2d4>)
 800397c:	fba3 2302 	umull	r2, r3, r3, r2
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003988:	441c      	add	r4, r3
 800398a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800398e:	2200      	movs	r2, #0
 8003990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003994:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003998:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800399c:	4642      	mov	r2, r8
 800399e:	464b      	mov	r3, r9
 80039a0:	1891      	adds	r1, r2, r2
 80039a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80039a4:	415b      	adcs	r3, r3
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039ac:	4641      	mov	r1, r8
 80039ae:	1851      	adds	r1, r2, r1
 80039b0:	6339      	str	r1, [r7, #48]	; 0x30
 80039b2:	4649      	mov	r1, r9
 80039b4:	414b      	adcs	r3, r1
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039c4:	4659      	mov	r1, fp
 80039c6:	00cb      	lsls	r3, r1, #3
 80039c8:	4651      	mov	r1, sl
 80039ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ce:	4651      	mov	r1, sl
 80039d0:	00ca      	lsls	r2, r1, #3
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	4603      	mov	r3, r0
 80039d8:	4642      	mov	r2, r8
 80039da:	189b      	adds	r3, r3, r2
 80039dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039e0:	464b      	mov	r3, r9
 80039e2:	460a      	mov	r2, r1
 80039e4:	eb42 0303 	adc.w	r3, r2, r3
 80039e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a00:	460b      	mov	r3, r1
 8003a02:	18db      	adds	r3, r3, r3
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a06:	4613      	mov	r3, r2
 8003a08:	eb42 0303 	adc.w	r3, r2, r3
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a16:	f7fc fc3b 	bl	8000290 <__aeabi_uldivmod>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <UART_SetConfig+0x2d4>)
 8003a20:	fba3 1302 	umull	r1, r3, r3, r2
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	2164      	movs	r1, #100	; 0x64
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	3332      	adds	r3, #50	; 0x32
 8003a32:	4a08      	ldr	r2, [pc, #32]	; (8003a54 <UART_SetConfig+0x2d4>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	f003 0207 	and.w	r2, r3, #7
 8003a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4422      	add	r2, r4
 8003a46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a48:	e106      	b.n	8003c58 <UART_SetConfig+0x4d8>
 8003a4a:	bf00      	nop
 8003a4c:	40011000 	.word	0x40011000
 8003a50:	40011400 	.word	0x40011400
 8003a54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a6a:	4642      	mov	r2, r8
 8003a6c:	464b      	mov	r3, r9
 8003a6e:	1891      	adds	r1, r2, r2
 8003a70:	6239      	str	r1, [r7, #32]
 8003a72:	415b      	adcs	r3, r3
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
 8003a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a7a:	4641      	mov	r1, r8
 8003a7c:	1854      	adds	r4, r2, r1
 8003a7e:	4649      	mov	r1, r9
 8003a80:	eb43 0501 	adc.w	r5, r3, r1
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	00eb      	lsls	r3, r5, #3
 8003a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a92:	00e2      	lsls	r2, r4, #3
 8003a94:	4614      	mov	r4, r2
 8003a96:	461d      	mov	r5, r3
 8003a98:	4643      	mov	r3, r8
 8003a9a:	18e3      	adds	r3, r4, r3
 8003a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	eb45 0303 	adc.w	r3, r5, r3
 8003aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ab6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	008b      	lsls	r3, r1, #2
 8003aca:	4621      	mov	r1, r4
 8003acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	008a      	lsls	r2, r1, #2
 8003ad4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ad8:	f7fc fbda 	bl	8000290 <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4b60      	ldr	r3, [pc, #384]	; (8003c64 <UART_SetConfig+0x4e4>)
 8003ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	011c      	lsls	r4, r3, #4
 8003aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003af4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003af8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	1891      	adds	r1, r2, r2
 8003b02:	61b9      	str	r1, [r7, #24]
 8003b04:	415b      	adcs	r3, r3
 8003b06:	61fb      	str	r3, [r7, #28]
 8003b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	1851      	adds	r1, r2, r1
 8003b10:	6139      	str	r1, [r7, #16]
 8003b12:	4649      	mov	r1, r9
 8003b14:	414b      	adcs	r3, r1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b24:	4659      	mov	r1, fp
 8003b26:	00cb      	lsls	r3, r1, #3
 8003b28:	4651      	mov	r1, sl
 8003b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2e:	4651      	mov	r1, sl
 8003b30:	00ca      	lsls	r2, r1, #3
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	4642      	mov	r2, r8
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b40:	464b      	mov	r3, r9
 8003b42:	460a      	mov	r2, r1
 8003b44:	eb42 0303 	adc.w	r3, r2, r3
 8003b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b64:	4649      	mov	r1, r9
 8003b66:	008b      	lsls	r3, r1, #2
 8003b68:	4641      	mov	r1, r8
 8003b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b6e:	4641      	mov	r1, r8
 8003b70:	008a      	lsls	r2, r1, #2
 8003b72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b76:	f7fc fb8b 	bl	8000290 <__aeabi_uldivmod>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4b38      	ldr	r3, [pc, #224]	; (8003c64 <UART_SetConfig+0x4e4>)
 8003b82:	fba3 2301 	umull	r2, r3, r3, r1
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2264      	movs	r2, #100	; 0x64
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	1acb      	subs	r3, r1, r3
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	3332      	adds	r3, #50	; 0x32
 8003b94:	4a33      	ldr	r2, [pc, #204]	; (8003c64 <UART_SetConfig+0x4e4>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba0:	441c      	add	r4, r3
 8003ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	673b      	str	r3, [r7, #112]	; 0x70
 8003baa:	677a      	str	r2, [r7, #116]	; 0x74
 8003bac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bb0:	4642      	mov	r2, r8
 8003bb2:	464b      	mov	r3, r9
 8003bb4:	1891      	adds	r1, r2, r2
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	415b      	adcs	r3, r3
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	1851      	adds	r1, r2, r1
 8003bc4:	6039      	str	r1, [r7, #0]
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	414b      	adcs	r3, r1
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bd8:	4659      	mov	r1, fp
 8003bda:	00cb      	lsls	r3, r1, #3
 8003bdc:	4651      	mov	r1, sl
 8003bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be2:	4651      	mov	r1, sl
 8003be4:	00ca      	lsls	r2, r1, #3
 8003be6:	4610      	mov	r0, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	4642      	mov	r2, r8
 8003bee:	189b      	adds	r3, r3, r2
 8003bf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bf2:	464b      	mov	r3, r9
 8003bf4:	460a      	mov	r2, r1
 8003bf6:	eb42 0303 	adc.w	r3, r2, r3
 8003bfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	663b      	str	r3, [r7, #96]	; 0x60
 8003c06:	667a      	str	r2, [r7, #100]	; 0x64
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c14:	4649      	mov	r1, r9
 8003c16:	008b      	lsls	r3, r1, #2
 8003c18:	4641      	mov	r1, r8
 8003c1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c1e:	4641      	mov	r1, r8
 8003c20:	008a      	lsls	r2, r1, #2
 8003c22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c26:	f7fc fb33 	bl	8000290 <__aeabi_uldivmod>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <UART_SetConfig+0x4e4>)
 8003c30:	fba3 1302 	umull	r1, r3, r3, r2
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	2164      	movs	r1, #100	; 0x64
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	3332      	adds	r3, #50	; 0x32
 8003c42:	4a08      	ldr	r2, [pc, #32]	; (8003c64 <UART_SetConfig+0x4e4>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	f003 020f 	and.w	r2, r3, #15
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4422      	add	r2, r4
 8003c56:	609a      	str	r2, [r3, #8]
}
 8003c58:	bf00      	nop
 8003c5a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c64:	51eb851f 	.word	0x51eb851f

08003c68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c68:	b084      	sub	sp, #16
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	f107 001c 	add.w	r0, r7, #28
 8003c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d122      	bne.n	8003cc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d105      	bne.n	8003cba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 faa2 	bl	8004204 <USB_CoreReset>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]
 8003cc4:	e01a      	b.n	8003cfc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fa96 	bl	8004204 <USB_CoreReset>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38
 8003cee:	e005      	b.n	8003cfc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d10b      	bne.n	8003d1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f043 0206 	orr.w	r2, r3, #6
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f043 0220 	orr.w	r2, r3, #32
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d26:	b004      	add	sp, #16
 8003d28:	4770      	bx	lr

08003d2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d115      	bne.n	8003d9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	f7fd fa30 	bl	80011e0 <HAL_Delay>
      ms++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3301      	adds	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fa2e 	bl	80041e8 <USB_GetMode>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d01e      	beq.n	8003dd0 <USB_SetCurrentMode+0x84>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b31      	cmp	r3, #49	; 0x31
 8003d96:	d9f0      	bls.n	8003d7a <USB_SetCurrentMode+0x2e>
 8003d98:	e01a      	b.n	8003dd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d115      	bne.n	8003dcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003dac:	2001      	movs	r0, #1
 8003dae:	f7fd fa17 	bl	80011e0 <HAL_Delay>
      ms++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fa15 	bl	80041e8 <USB_GetMode>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <USB_SetCurrentMode+0x84>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b31      	cmp	r3, #49	; 0x31
 8003dc8:	d9f0      	bls.n	8003dac <USB_SetCurrentMode+0x60>
 8003dca:	e001      	b.n	8003dd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e005      	b.n	8003ddc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b32      	cmp	r3, #50	; 0x32
 8003dd4:	d101      	bne.n	8003dda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003de4:	b084      	sub	sp, #16
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	e009      	b.n	8003e18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	3340      	adds	r3, #64	; 0x40
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	2200      	movs	r2, #0
 8003e10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	3301      	adds	r3, #1
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b0e      	cmp	r3, #14
 8003e1c:	d9f2      	bls.n	8003e04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d11c      	bne.n	8003e5e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e32:	f043 0302 	orr.w	r3, r3, #2
 8003e36:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38
 8003e5c:	e00b      	b.n	8003e76 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e88:	4619      	mov	r1, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e90:	461a      	mov	r2, r3
 8003e92:	680b      	ldr	r3, [r1, #0]
 8003e94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10c      	bne.n	8003eb6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f965 	bl	8004174 <USB_SetDevSpeed>
 8003eaa:	e008      	b.n	8003ebe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003eac:	2101      	movs	r1, #1
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f960 	bl	8004174 <USB_SetDevSpeed>
 8003eb4:	e003      	b.n	8003ebe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003eb6:	2103      	movs	r1, #3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f95b 	bl	8004174 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ebe:	2110      	movs	r1, #16
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f8f3 	bl	80040ac <USB_FlushTxFifo>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f91f 	bl	8004114 <USB_FlushRxFifo>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efe:	461a      	mov	r2, r3
 8003f00:	2300      	movs	r3, #0
 8003f02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e043      	b.n	8003f92 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f20:	d118      	bne.n	8003f54 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	461a      	mov	r2, r3
 8003f36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	e013      	b.n	8003f66 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e008      	b.n	8003f66 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f60:	461a      	mov	r2, r3
 8003f62:	2300      	movs	r3, #0
 8003f64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f72:	461a      	mov	r2, r3
 8003f74:	2300      	movs	r3, #0
 8003f76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f84:	461a      	mov	r2, r3
 8003f86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d3b7      	bcc.n	8003f0a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	e043      	b.n	8004028 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb6:	d118      	bne.n	8003fea <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e013      	b.n	8003ffc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	e008      	b.n	8003ffc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004008:	461a      	mov	r2, r3
 800400a:	2300      	movs	r3, #0
 800400c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401a:	461a      	mov	r2, r3
 800401c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004020:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	3301      	adds	r3, #1
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	429a      	cmp	r2, r3
 800402e:	d3b7      	bcc.n	8003fa0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004042:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004050:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	2b00      	cmp	r3, #0
 8004056:	d105      	bne.n	8004064 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f043 0210 	orr.w	r2, r3, #16
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <USB_DevInit+0x2c4>)
 800406a:	4313      	orrs	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f043 0208 	orr.w	r2, r3, #8
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d107      	bne.n	8004098 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004090:	f043 0304 	orr.w	r3, r3, #4
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004098:	7dfb      	ldrb	r3, [r7, #23]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a4:	b004      	add	sp, #16
 80040a6:	4770      	bx	lr
 80040a8:	803c3800 	.word	0x803c3800

080040ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a13      	ldr	r2, [pc, #76]	; (8004110 <USB_FlushTxFifo+0x64>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e01b      	b.n	8004104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	daf2      	bge.n	80040ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	019b      	lsls	r3, r3, #6
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a08      	ldr	r2, [pc, #32]	; (8004110 <USB_FlushTxFifo+0x64>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e006      	b.n	8004104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d0f0      	beq.n	80040e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	00030d40 	.word	0x00030d40

08004114 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4a11      	ldr	r2, [pc, #68]	; (8004170 <USB_FlushRxFifo+0x5c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e018      	b.n	8004164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	daf2      	bge.n	8004120 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2210      	movs	r2, #16
 8004142:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a08      	ldr	r2, [pc, #32]	; (8004170 <USB_FlushRxFifo+0x5c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e006      	b.n	8004164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b10      	cmp	r3, #16
 8004160:	d0f0      	beq.n	8004144 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	00030d40 	.word	0x00030d40

08004174 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	68f9      	ldr	r1, [r7, #12]
 8004190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004194:	4313      	orrs	r3, r2
 8004196:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041c0:	f023 0303 	bic.w	r3, r3, #3
 80041c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041d4:	f043 0302 	orr.w	r3, r3, #2
 80041d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f003 0301 	and.w	r3, r3, #1
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3301      	adds	r3, #1
 8004214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a13      	ldr	r2, [pc, #76]	; (8004268 <USB_CoreReset+0x64>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e01b      	b.n	800425a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	daf2      	bge.n	8004210 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3301      	adds	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4a09      	ldr	r2, [pc, #36]	; (8004268 <USB_CoreReset+0x64>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e006      	b.n	800425a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d0f0      	beq.n	800423a <USB_CoreReset+0x36>

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	00030d40 	.word	0x00030d40

0800426c <std>:
 800426c:	2300      	movs	r3, #0
 800426e:	b510      	push	{r4, lr}
 8004270:	4604      	mov	r4, r0
 8004272:	e9c0 3300 	strd	r3, r3, [r0]
 8004276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800427a:	6083      	str	r3, [r0, #8]
 800427c:	8181      	strh	r1, [r0, #12]
 800427e:	6643      	str	r3, [r0, #100]	; 0x64
 8004280:	81c2      	strh	r2, [r0, #14]
 8004282:	6183      	str	r3, [r0, #24]
 8004284:	4619      	mov	r1, r3
 8004286:	2208      	movs	r2, #8
 8004288:	305c      	adds	r0, #92	; 0x5c
 800428a:	f000 f906 	bl	800449a <memset>
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <std+0x58>)
 8004290:	6263      	str	r3, [r4, #36]	; 0x24
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <std+0x5c>)
 8004294:	62a3      	str	r3, [r4, #40]	; 0x28
 8004296:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <std+0x60>)
 8004298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <std+0x64>)
 800429c:	6323      	str	r3, [r4, #48]	; 0x30
 800429e:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <std+0x68>)
 80042a0:	6224      	str	r4, [r4, #32]
 80042a2:	429c      	cmp	r4, r3
 80042a4:	d006      	beq.n	80042b4 <std+0x48>
 80042a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80042aa:	4294      	cmp	r4, r2
 80042ac:	d002      	beq.n	80042b4 <std+0x48>
 80042ae:	33d0      	adds	r3, #208	; 0xd0
 80042b0:	429c      	cmp	r4, r3
 80042b2:	d105      	bne.n	80042c0 <std+0x54>
 80042b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042bc:	f000 b966 	b.w	800458c <__retarget_lock_init_recursive>
 80042c0:	bd10      	pop	{r4, pc}
 80042c2:	bf00      	nop
 80042c4:	08004415 	.word	0x08004415
 80042c8:	08004437 	.word	0x08004437
 80042cc:	0800446f 	.word	0x0800446f
 80042d0:	08004493 	.word	0x08004493
 80042d4:	20000868 	.word	0x20000868

080042d8 <stdio_exit_handler>:
 80042d8:	4a02      	ldr	r2, [pc, #8]	; (80042e4 <stdio_exit_handler+0xc>)
 80042da:	4903      	ldr	r1, [pc, #12]	; (80042e8 <stdio_exit_handler+0x10>)
 80042dc:	4803      	ldr	r0, [pc, #12]	; (80042ec <stdio_exit_handler+0x14>)
 80042de:	f000 b869 	b.w	80043b4 <_fwalk_sglue>
 80042e2:	bf00      	nop
 80042e4:	2000000c 	.word	0x2000000c
 80042e8:	08004e39 	.word	0x08004e39
 80042ec:	20000018 	.word	0x20000018

080042f0 <cleanup_stdio>:
 80042f0:	6841      	ldr	r1, [r0, #4]
 80042f2:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <cleanup_stdio+0x34>)
 80042f4:	4299      	cmp	r1, r3
 80042f6:	b510      	push	{r4, lr}
 80042f8:	4604      	mov	r4, r0
 80042fa:	d001      	beq.n	8004300 <cleanup_stdio+0x10>
 80042fc:	f000 fd9c 	bl	8004e38 <_fflush_r>
 8004300:	68a1      	ldr	r1, [r4, #8]
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <cleanup_stdio+0x38>)
 8004304:	4299      	cmp	r1, r3
 8004306:	d002      	beq.n	800430e <cleanup_stdio+0x1e>
 8004308:	4620      	mov	r0, r4
 800430a:	f000 fd95 	bl	8004e38 <_fflush_r>
 800430e:	68e1      	ldr	r1, [r4, #12]
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <cleanup_stdio+0x3c>)
 8004312:	4299      	cmp	r1, r3
 8004314:	d004      	beq.n	8004320 <cleanup_stdio+0x30>
 8004316:	4620      	mov	r0, r4
 8004318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800431c:	f000 bd8c 	b.w	8004e38 <_fflush_r>
 8004320:	bd10      	pop	{r4, pc}
 8004322:	bf00      	nop
 8004324:	20000868 	.word	0x20000868
 8004328:	200008d0 	.word	0x200008d0
 800432c:	20000938 	.word	0x20000938

08004330 <global_stdio_init.part.0>:
 8004330:	b510      	push	{r4, lr}
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <global_stdio_init.part.0+0x30>)
 8004334:	4c0b      	ldr	r4, [pc, #44]	; (8004364 <global_stdio_init.part.0+0x34>)
 8004336:	4a0c      	ldr	r2, [pc, #48]	; (8004368 <global_stdio_init.part.0+0x38>)
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	4620      	mov	r0, r4
 800433c:	2200      	movs	r2, #0
 800433e:	2104      	movs	r1, #4
 8004340:	f7ff ff94 	bl	800426c <std>
 8004344:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004348:	2201      	movs	r2, #1
 800434a:	2109      	movs	r1, #9
 800434c:	f7ff ff8e 	bl	800426c <std>
 8004350:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004354:	2202      	movs	r2, #2
 8004356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800435a:	2112      	movs	r1, #18
 800435c:	f7ff bf86 	b.w	800426c <std>
 8004360:	200009a0 	.word	0x200009a0
 8004364:	20000868 	.word	0x20000868
 8004368:	080042d9 	.word	0x080042d9

0800436c <__sfp_lock_acquire>:
 800436c:	4801      	ldr	r0, [pc, #4]	; (8004374 <__sfp_lock_acquire+0x8>)
 800436e:	f000 b90e 	b.w	800458e <__retarget_lock_acquire_recursive>
 8004372:	bf00      	nop
 8004374:	200009a9 	.word	0x200009a9

08004378 <__sfp_lock_release>:
 8004378:	4801      	ldr	r0, [pc, #4]	; (8004380 <__sfp_lock_release+0x8>)
 800437a:	f000 b909 	b.w	8004590 <__retarget_lock_release_recursive>
 800437e:	bf00      	nop
 8004380:	200009a9 	.word	0x200009a9

08004384 <__sinit>:
 8004384:	b510      	push	{r4, lr}
 8004386:	4604      	mov	r4, r0
 8004388:	f7ff fff0 	bl	800436c <__sfp_lock_acquire>
 800438c:	6a23      	ldr	r3, [r4, #32]
 800438e:	b11b      	cbz	r3, 8004398 <__sinit+0x14>
 8004390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004394:	f7ff bff0 	b.w	8004378 <__sfp_lock_release>
 8004398:	4b04      	ldr	r3, [pc, #16]	; (80043ac <__sinit+0x28>)
 800439a:	6223      	str	r3, [r4, #32]
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <__sinit+0x2c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f5      	bne.n	8004390 <__sinit+0xc>
 80043a4:	f7ff ffc4 	bl	8004330 <global_stdio_init.part.0>
 80043a8:	e7f2      	b.n	8004390 <__sinit+0xc>
 80043aa:	bf00      	nop
 80043ac:	080042f1 	.word	0x080042f1
 80043b0:	200009a0 	.word	0x200009a0

080043b4 <_fwalk_sglue>:
 80043b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043b8:	4607      	mov	r7, r0
 80043ba:	4688      	mov	r8, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	2600      	movs	r6, #0
 80043c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043c4:	f1b9 0901 	subs.w	r9, r9, #1
 80043c8:	d505      	bpl.n	80043d6 <_fwalk_sglue+0x22>
 80043ca:	6824      	ldr	r4, [r4, #0]
 80043cc:	2c00      	cmp	r4, #0
 80043ce:	d1f7      	bne.n	80043c0 <_fwalk_sglue+0xc>
 80043d0:	4630      	mov	r0, r6
 80043d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043d6:	89ab      	ldrh	r3, [r5, #12]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d907      	bls.n	80043ec <_fwalk_sglue+0x38>
 80043dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043e0:	3301      	adds	r3, #1
 80043e2:	d003      	beq.n	80043ec <_fwalk_sglue+0x38>
 80043e4:	4629      	mov	r1, r5
 80043e6:	4638      	mov	r0, r7
 80043e8:	47c0      	blx	r8
 80043ea:	4306      	orrs	r6, r0
 80043ec:	3568      	adds	r5, #104	; 0x68
 80043ee:	e7e9      	b.n	80043c4 <_fwalk_sglue+0x10>

080043f0 <iprintf>:
 80043f0:	b40f      	push	{r0, r1, r2, r3}
 80043f2:	b507      	push	{r0, r1, r2, lr}
 80043f4:	4906      	ldr	r1, [pc, #24]	; (8004410 <iprintf+0x20>)
 80043f6:	ab04      	add	r3, sp, #16
 80043f8:	6808      	ldr	r0, [r1, #0]
 80043fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80043fe:	6881      	ldr	r1, [r0, #8]
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	f000 f9e9 	bl	80047d8 <_vfiprintf_r>
 8004406:	b003      	add	sp, #12
 8004408:	f85d eb04 	ldr.w	lr, [sp], #4
 800440c:	b004      	add	sp, #16
 800440e:	4770      	bx	lr
 8004410:	20000064 	.word	0x20000064

08004414 <__sread>:
 8004414:	b510      	push	{r4, lr}
 8004416:	460c      	mov	r4, r1
 8004418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800441c:	f000 f868 	bl	80044f0 <_read_r>
 8004420:	2800      	cmp	r0, #0
 8004422:	bfab      	itete	ge
 8004424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004426:	89a3      	ldrhlt	r3, [r4, #12]
 8004428:	181b      	addge	r3, r3, r0
 800442a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800442e:	bfac      	ite	ge
 8004430:	6563      	strge	r3, [r4, #84]	; 0x54
 8004432:	81a3      	strhlt	r3, [r4, #12]
 8004434:	bd10      	pop	{r4, pc}

08004436 <__swrite>:
 8004436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800443a:	461f      	mov	r7, r3
 800443c:	898b      	ldrh	r3, [r1, #12]
 800443e:	05db      	lsls	r3, r3, #23
 8004440:	4605      	mov	r5, r0
 8004442:	460c      	mov	r4, r1
 8004444:	4616      	mov	r6, r2
 8004446:	d505      	bpl.n	8004454 <__swrite+0x1e>
 8004448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800444c:	2302      	movs	r3, #2
 800444e:	2200      	movs	r2, #0
 8004450:	f000 f83c 	bl	80044cc <_lseek_r>
 8004454:	89a3      	ldrh	r3, [r4, #12]
 8004456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800445a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800445e:	81a3      	strh	r3, [r4, #12]
 8004460:	4632      	mov	r2, r6
 8004462:	463b      	mov	r3, r7
 8004464:	4628      	mov	r0, r5
 8004466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800446a:	f000 b853 	b.w	8004514 <_write_r>

0800446e <__sseek>:
 800446e:	b510      	push	{r4, lr}
 8004470:	460c      	mov	r4, r1
 8004472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004476:	f000 f829 	bl	80044cc <_lseek_r>
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	bf15      	itete	ne
 8004480:	6560      	strne	r0, [r4, #84]	; 0x54
 8004482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800448a:	81a3      	strheq	r3, [r4, #12]
 800448c:	bf18      	it	ne
 800448e:	81a3      	strhne	r3, [r4, #12]
 8004490:	bd10      	pop	{r4, pc}

08004492 <__sclose>:
 8004492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004496:	f000 b809 	b.w	80044ac <_close_r>

0800449a <memset>:
 800449a:	4402      	add	r2, r0
 800449c:	4603      	mov	r3, r0
 800449e:	4293      	cmp	r3, r2
 80044a0:	d100      	bne.n	80044a4 <memset+0xa>
 80044a2:	4770      	bx	lr
 80044a4:	f803 1b01 	strb.w	r1, [r3], #1
 80044a8:	e7f9      	b.n	800449e <memset+0x4>
	...

080044ac <_close_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4d06      	ldr	r5, [pc, #24]	; (80044c8 <_close_r+0x1c>)
 80044b0:	2300      	movs	r3, #0
 80044b2:	4604      	mov	r4, r0
 80044b4:	4608      	mov	r0, r1
 80044b6:	602b      	str	r3, [r5, #0]
 80044b8:	f7fc fd79 	bl	8000fae <_close>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d102      	bne.n	80044c6 <_close_r+0x1a>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	b103      	cbz	r3, 80044c6 <_close_r+0x1a>
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	bd38      	pop	{r3, r4, r5, pc}
 80044c8:	200009a4 	.word	0x200009a4

080044cc <_lseek_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	4d07      	ldr	r5, [pc, #28]	; (80044ec <_lseek_r+0x20>)
 80044d0:	4604      	mov	r4, r0
 80044d2:	4608      	mov	r0, r1
 80044d4:	4611      	mov	r1, r2
 80044d6:	2200      	movs	r2, #0
 80044d8:	602a      	str	r2, [r5, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	f7fc fd8e 	bl	8000ffc <_lseek>
 80044e0:	1c43      	adds	r3, r0, #1
 80044e2:	d102      	bne.n	80044ea <_lseek_r+0x1e>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	b103      	cbz	r3, 80044ea <_lseek_r+0x1e>
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	bd38      	pop	{r3, r4, r5, pc}
 80044ec:	200009a4 	.word	0x200009a4

080044f0 <_read_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4d07      	ldr	r5, [pc, #28]	; (8004510 <_read_r+0x20>)
 80044f4:	4604      	mov	r4, r0
 80044f6:	4608      	mov	r0, r1
 80044f8:	4611      	mov	r1, r2
 80044fa:	2200      	movs	r2, #0
 80044fc:	602a      	str	r2, [r5, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	f7fc fd38 	bl	8000f74 <_read>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d102      	bne.n	800450e <_read_r+0x1e>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	b103      	cbz	r3, 800450e <_read_r+0x1e>
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	bd38      	pop	{r3, r4, r5, pc}
 8004510:	200009a4 	.word	0x200009a4

08004514 <_write_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4d07      	ldr	r5, [pc, #28]	; (8004534 <_write_r+0x20>)
 8004518:	4604      	mov	r4, r0
 800451a:	4608      	mov	r0, r1
 800451c:	4611      	mov	r1, r2
 800451e:	2200      	movs	r2, #0
 8004520:	602a      	str	r2, [r5, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	f7fc f832 	bl	800058c <_write>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_write_r+0x1e>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	b103      	cbz	r3, 8004532 <_write_r+0x1e>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	200009a4 	.word	0x200009a4

08004538 <__errno>:
 8004538:	4b01      	ldr	r3, [pc, #4]	; (8004540 <__errno+0x8>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000064 	.word	0x20000064

08004544 <__libc_init_array>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4d0d      	ldr	r5, [pc, #52]	; (800457c <__libc_init_array+0x38>)
 8004548:	4c0d      	ldr	r4, [pc, #52]	; (8004580 <__libc_init_array+0x3c>)
 800454a:	1b64      	subs	r4, r4, r5
 800454c:	10a4      	asrs	r4, r4, #2
 800454e:	2600      	movs	r6, #0
 8004550:	42a6      	cmp	r6, r4
 8004552:	d109      	bne.n	8004568 <__libc_init_array+0x24>
 8004554:	4d0b      	ldr	r5, [pc, #44]	; (8004584 <__libc_init_array+0x40>)
 8004556:	4c0c      	ldr	r4, [pc, #48]	; (8004588 <__libc_init_array+0x44>)
 8004558:	f000 fdc0 	bl	80050dc <_init>
 800455c:	1b64      	subs	r4, r4, r5
 800455e:	10a4      	asrs	r4, r4, #2
 8004560:	2600      	movs	r6, #0
 8004562:	42a6      	cmp	r6, r4
 8004564:	d105      	bne.n	8004572 <__libc_init_array+0x2e>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	f855 3b04 	ldr.w	r3, [r5], #4
 800456c:	4798      	blx	r3
 800456e:	3601      	adds	r6, #1
 8004570:	e7ee      	b.n	8004550 <__libc_init_array+0xc>
 8004572:	f855 3b04 	ldr.w	r3, [r5], #4
 8004576:	4798      	blx	r3
 8004578:	3601      	adds	r6, #1
 800457a:	e7f2      	b.n	8004562 <__libc_init_array+0x1e>
 800457c:	0800517c 	.word	0x0800517c
 8004580:	0800517c 	.word	0x0800517c
 8004584:	0800517c 	.word	0x0800517c
 8004588:	08005180 	.word	0x08005180

0800458c <__retarget_lock_init_recursive>:
 800458c:	4770      	bx	lr

0800458e <__retarget_lock_acquire_recursive>:
 800458e:	4770      	bx	lr

08004590 <__retarget_lock_release_recursive>:
 8004590:	4770      	bx	lr
	...

08004594 <_free_r>:
 8004594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004596:	2900      	cmp	r1, #0
 8004598:	d044      	beq.n	8004624 <_free_r+0x90>
 800459a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800459e:	9001      	str	r0, [sp, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f1a1 0404 	sub.w	r4, r1, #4
 80045a6:	bfb8      	it	lt
 80045a8:	18e4      	addlt	r4, r4, r3
 80045aa:	f000 f8df 	bl	800476c <__malloc_lock>
 80045ae:	4a1e      	ldr	r2, [pc, #120]	; (8004628 <_free_r+0x94>)
 80045b0:	9801      	ldr	r0, [sp, #4]
 80045b2:	6813      	ldr	r3, [r2, #0]
 80045b4:	b933      	cbnz	r3, 80045c4 <_free_r+0x30>
 80045b6:	6063      	str	r3, [r4, #4]
 80045b8:	6014      	str	r4, [r2, #0]
 80045ba:	b003      	add	sp, #12
 80045bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045c0:	f000 b8da 	b.w	8004778 <__malloc_unlock>
 80045c4:	42a3      	cmp	r3, r4
 80045c6:	d908      	bls.n	80045da <_free_r+0x46>
 80045c8:	6825      	ldr	r5, [r4, #0]
 80045ca:	1961      	adds	r1, r4, r5
 80045cc:	428b      	cmp	r3, r1
 80045ce:	bf01      	itttt	eq
 80045d0:	6819      	ldreq	r1, [r3, #0]
 80045d2:	685b      	ldreq	r3, [r3, #4]
 80045d4:	1949      	addeq	r1, r1, r5
 80045d6:	6021      	streq	r1, [r4, #0]
 80045d8:	e7ed      	b.n	80045b6 <_free_r+0x22>
 80045da:	461a      	mov	r2, r3
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	b10b      	cbz	r3, 80045e4 <_free_r+0x50>
 80045e0:	42a3      	cmp	r3, r4
 80045e2:	d9fa      	bls.n	80045da <_free_r+0x46>
 80045e4:	6811      	ldr	r1, [r2, #0]
 80045e6:	1855      	adds	r5, r2, r1
 80045e8:	42a5      	cmp	r5, r4
 80045ea:	d10b      	bne.n	8004604 <_free_r+0x70>
 80045ec:	6824      	ldr	r4, [r4, #0]
 80045ee:	4421      	add	r1, r4
 80045f0:	1854      	adds	r4, r2, r1
 80045f2:	42a3      	cmp	r3, r4
 80045f4:	6011      	str	r1, [r2, #0]
 80045f6:	d1e0      	bne.n	80045ba <_free_r+0x26>
 80045f8:	681c      	ldr	r4, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	6053      	str	r3, [r2, #4]
 80045fe:	440c      	add	r4, r1
 8004600:	6014      	str	r4, [r2, #0]
 8004602:	e7da      	b.n	80045ba <_free_r+0x26>
 8004604:	d902      	bls.n	800460c <_free_r+0x78>
 8004606:	230c      	movs	r3, #12
 8004608:	6003      	str	r3, [r0, #0]
 800460a:	e7d6      	b.n	80045ba <_free_r+0x26>
 800460c:	6825      	ldr	r5, [r4, #0]
 800460e:	1961      	adds	r1, r4, r5
 8004610:	428b      	cmp	r3, r1
 8004612:	bf04      	itt	eq
 8004614:	6819      	ldreq	r1, [r3, #0]
 8004616:	685b      	ldreq	r3, [r3, #4]
 8004618:	6063      	str	r3, [r4, #4]
 800461a:	bf04      	itt	eq
 800461c:	1949      	addeq	r1, r1, r5
 800461e:	6021      	streq	r1, [r4, #0]
 8004620:	6054      	str	r4, [r2, #4]
 8004622:	e7ca      	b.n	80045ba <_free_r+0x26>
 8004624:	b003      	add	sp, #12
 8004626:	bd30      	pop	{r4, r5, pc}
 8004628:	200009ac 	.word	0x200009ac

0800462c <sbrk_aligned>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	4e0e      	ldr	r6, [pc, #56]	; (8004668 <sbrk_aligned+0x3c>)
 8004630:	460c      	mov	r4, r1
 8004632:	6831      	ldr	r1, [r6, #0]
 8004634:	4605      	mov	r5, r0
 8004636:	b911      	cbnz	r1, 800463e <sbrk_aligned+0x12>
 8004638:	f000 fcbc 	bl	8004fb4 <_sbrk_r>
 800463c:	6030      	str	r0, [r6, #0]
 800463e:	4621      	mov	r1, r4
 8004640:	4628      	mov	r0, r5
 8004642:	f000 fcb7 	bl	8004fb4 <_sbrk_r>
 8004646:	1c43      	adds	r3, r0, #1
 8004648:	d00a      	beq.n	8004660 <sbrk_aligned+0x34>
 800464a:	1cc4      	adds	r4, r0, #3
 800464c:	f024 0403 	bic.w	r4, r4, #3
 8004650:	42a0      	cmp	r0, r4
 8004652:	d007      	beq.n	8004664 <sbrk_aligned+0x38>
 8004654:	1a21      	subs	r1, r4, r0
 8004656:	4628      	mov	r0, r5
 8004658:	f000 fcac 	bl	8004fb4 <_sbrk_r>
 800465c:	3001      	adds	r0, #1
 800465e:	d101      	bne.n	8004664 <sbrk_aligned+0x38>
 8004660:	f04f 34ff 	mov.w	r4, #4294967295
 8004664:	4620      	mov	r0, r4
 8004666:	bd70      	pop	{r4, r5, r6, pc}
 8004668:	200009b0 	.word	0x200009b0

0800466c <_malloc_r>:
 800466c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004670:	1ccd      	adds	r5, r1, #3
 8004672:	f025 0503 	bic.w	r5, r5, #3
 8004676:	3508      	adds	r5, #8
 8004678:	2d0c      	cmp	r5, #12
 800467a:	bf38      	it	cc
 800467c:	250c      	movcc	r5, #12
 800467e:	2d00      	cmp	r5, #0
 8004680:	4607      	mov	r7, r0
 8004682:	db01      	blt.n	8004688 <_malloc_r+0x1c>
 8004684:	42a9      	cmp	r1, r5
 8004686:	d905      	bls.n	8004694 <_malloc_r+0x28>
 8004688:	230c      	movs	r3, #12
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	2600      	movs	r6, #0
 800468e:	4630      	mov	r0, r6
 8004690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004694:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004768 <_malloc_r+0xfc>
 8004698:	f000 f868 	bl	800476c <__malloc_lock>
 800469c:	f8d8 3000 	ldr.w	r3, [r8]
 80046a0:	461c      	mov	r4, r3
 80046a2:	bb5c      	cbnz	r4, 80046fc <_malloc_r+0x90>
 80046a4:	4629      	mov	r1, r5
 80046a6:	4638      	mov	r0, r7
 80046a8:	f7ff ffc0 	bl	800462c <sbrk_aligned>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	4604      	mov	r4, r0
 80046b0:	d155      	bne.n	800475e <_malloc_r+0xf2>
 80046b2:	f8d8 4000 	ldr.w	r4, [r8]
 80046b6:	4626      	mov	r6, r4
 80046b8:	2e00      	cmp	r6, #0
 80046ba:	d145      	bne.n	8004748 <_malloc_r+0xdc>
 80046bc:	2c00      	cmp	r4, #0
 80046be:	d048      	beq.n	8004752 <_malloc_r+0xe6>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	4631      	mov	r1, r6
 80046c4:	4638      	mov	r0, r7
 80046c6:	eb04 0903 	add.w	r9, r4, r3
 80046ca:	f000 fc73 	bl	8004fb4 <_sbrk_r>
 80046ce:	4581      	cmp	r9, r0
 80046d0:	d13f      	bne.n	8004752 <_malloc_r+0xe6>
 80046d2:	6821      	ldr	r1, [r4, #0]
 80046d4:	1a6d      	subs	r5, r5, r1
 80046d6:	4629      	mov	r1, r5
 80046d8:	4638      	mov	r0, r7
 80046da:	f7ff ffa7 	bl	800462c <sbrk_aligned>
 80046de:	3001      	adds	r0, #1
 80046e0:	d037      	beq.n	8004752 <_malloc_r+0xe6>
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	442b      	add	r3, r5
 80046e6:	6023      	str	r3, [r4, #0]
 80046e8:	f8d8 3000 	ldr.w	r3, [r8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d038      	beq.n	8004762 <_malloc_r+0xf6>
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	42a2      	cmp	r2, r4
 80046f4:	d12b      	bne.n	800474e <_malloc_r+0xe2>
 80046f6:	2200      	movs	r2, #0
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	e00f      	b.n	800471c <_malloc_r+0xb0>
 80046fc:	6822      	ldr	r2, [r4, #0]
 80046fe:	1b52      	subs	r2, r2, r5
 8004700:	d41f      	bmi.n	8004742 <_malloc_r+0xd6>
 8004702:	2a0b      	cmp	r2, #11
 8004704:	d917      	bls.n	8004736 <_malloc_r+0xca>
 8004706:	1961      	adds	r1, r4, r5
 8004708:	42a3      	cmp	r3, r4
 800470a:	6025      	str	r5, [r4, #0]
 800470c:	bf18      	it	ne
 800470e:	6059      	strne	r1, [r3, #4]
 8004710:	6863      	ldr	r3, [r4, #4]
 8004712:	bf08      	it	eq
 8004714:	f8c8 1000 	streq.w	r1, [r8]
 8004718:	5162      	str	r2, [r4, r5]
 800471a:	604b      	str	r3, [r1, #4]
 800471c:	4638      	mov	r0, r7
 800471e:	f104 060b 	add.w	r6, r4, #11
 8004722:	f000 f829 	bl	8004778 <__malloc_unlock>
 8004726:	f026 0607 	bic.w	r6, r6, #7
 800472a:	1d23      	adds	r3, r4, #4
 800472c:	1af2      	subs	r2, r6, r3
 800472e:	d0ae      	beq.n	800468e <_malloc_r+0x22>
 8004730:	1b9b      	subs	r3, r3, r6
 8004732:	50a3      	str	r3, [r4, r2]
 8004734:	e7ab      	b.n	800468e <_malloc_r+0x22>
 8004736:	42a3      	cmp	r3, r4
 8004738:	6862      	ldr	r2, [r4, #4]
 800473a:	d1dd      	bne.n	80046f8 <_malloc_r+0x8c>
 800473c:	f8c8 2000 	str.w	r2, [r8]
 8004740:	e7ec      	b.n	800471c <_malloc_r+0xb0>
 8004742:	4623      	mov	r3, r4
 8004744:	6864      	ldr	r4, [r4, #4]
 8004746:	e7ac      	b.n	80046a2 <_malloc_r+0x36>
 8004748:	4634      	mov	r4, r6
 800474a:	6876      	ldr	r6, [r6, #4]
 800474c:	e7b4      	b.n	80046b8 <_malloc_r+0x4c>
 800474e:	4613      	mov	r3, r2
 8004750:	e7cc      	b.n	80046ec <_malloc_r+0x80>
 8004752:	230c      	movs	r3, #12
 8004754:	603b      	str	r3, [r7, #0]
 8004756:	4638      	mov	r0, r7
 8004758:	f000 f80e 	bl	8004778 <__malloc_unlock>
 800475c:	e797      	b.n	800468e <_malloc_r+0x22>
 800475e:	6025      	str	r5, [r4, #0]
 8004760:	e7dc      	b.n	800471c <_malloc_r+0xb0>
 8004762:	605b      	str	r3, [r3, #4]
 8004764:	deff      	udf	#255	; 0xff
 8004766:	bf00      	nop
 8004768:	200009ac 	.word	0x200009ac

0800476c <__malloc_lock>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__malloc_lock+0x8>)
 800476e:	f7ff bf0e 	b.w	800458e <__retarget_lock_acquire_recursive>
 8004772:	bf00      	nop
 8004774:	200009a8 	.word	0x200009a8

08004778 <__malloc_unlock>:
 8004778:	4801      	ldr	r0, [pc, #4]	; (8004780 <__malloc_unlock+0x8>)
 800477a:	f7ff bf09 	b.w	8004590 <__retarget_lock_release_recursive>
 800477e:	bf00      	nop
 8004780:	200009a8 	.word	0x200009a8

08004784 <__sfputc_r>:
 8004784:	6893      	ldr	r3, [r2, #8]
 8004786:	3b01      	subs	r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	b410      	push	{r4}
 800478c:	6093      	str	r3, [r2, #8]
 800478e:	da08      	bge.n	80047a2 <__sfputc_r+0x1e>
 8004790:	6994      	ldr	r4, [r2, #24]
 8004792:	42a3      	cmp	r3, r4
 8004794:	db01      	blt.n	800479a <__sfputc_r+0x16>
 8004796:	290a      	cmp	r1, #10
 8004798:	d103      	bne.n	80047a2 <__sfputc_r+0x1e>
 800479a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800479e:	f000 bb73 	b.w	8004e88 <__swbuf_r>
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	1c58      	adds	r0, r3, #1
 80047a6:	6010      	str	r0, [r2, #0]
 80047a8:	7019      	strb	r1, [r3, #0]
 80047aa:	4608      	mov	r0, r1
 80047ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <__sfputs_r>:
 80047b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	4614      	mov	r4, r2
 80047ba:	18d5      	adds	r5, r2, r3
 80047bc:	42ac      	cmp	r4, r5
 80047be:	d101      	bne.n	80047c4 <__sfputs_r+0x12>
 80047c0:	2000      	movs	r0, #0
 80047c2:	e007      	b.n	80047d4 <__sfputs_r+0x22>
 80047c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c8:	463a      	mov	r2, r7
 80047ca:	4630      	mov	r0, r6
 80047cc:	f7ff ffda 	bl	8004784 <__sfputc_r>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d1f3      	bne.n	80047bc <__sfputs_r+0xa>
 80047d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047d8 <_vfiprintf_r>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	460d      	mov	r5, r1
 80047de:	b09d      	sub	sp, #116	; 0x74
 80047e0:	4614      	mov	r4, r2
 80047e2:	4698      	mov	r8, r3
 80047e4:	4606      	mov	r6, r0
 80047e6:	b118      	cbz	r0, 80047f0 <_vfiprintf_r+0x18>
 80047e8:	6a03      	ldr	r3, [r0, #32]
 80047ea:	b90b      	cbnz	r3, 80047f0 <_vfiprintf_r+0x18>
 80047ec:	f7ff fdca 	bl	8004384 <__sinit>
 80047f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047f2:	07d9      	lsls	r1, r3, #31
 80047f4:	d405      	bmi.n	8004802 <_vfiprintf_r+0x2a>
 80047f6:	89ab      	ldrh	r3, [r5, #12]
 80047f8:	059a      	lsls	r2, r3, #22
 80047fa:	d402      	bmi.n	8004802 <_vfiprintf_r+0x2a>
 80047fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047fe:	f7ff fec6 	bl	800458e <__retarget_lock_acquire_recursive>
 8004802:	89ab      	ldrh	r3, [r5, #12]
 8004804:	071b      	lsls	r3, r3, #28
 8004806:	d501      	bpl.n	800480c <_vfiprintf_r+0x34>
 8004808:	692b      	ldr	r3, [r5, #16]
 800480a:	b99b      	cbnz	r3, 8004834 <_vfiprintf_r+0x5c>
 800480c:	4629      	mov	r1, r5
 800480e:	4630      	mov	r0, r6
 8004810:	f000 fb78 	bl	8004f04 <__swsetup_r>
 8004814:	b170      	cbz	r0, 8004834 <_vfiprintf_r+0x5c>
 8004816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004818:	07dc      	lsls	r4, r3, #31
 800481a:	d504      	bpl.n	8004826 <_vfiprintf_r+0x4e>
 800481c:	f04f 30ff 	mov.w	r0, #4294967295
 8004820:	b01d      	add	sp, #116	; 0x74
 8004822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004826:	89ab      	ldrh	r3, [r5, #12]
 8004828:	0598      	lsls	r0, r3, #22
 800482a:	d4f7      	bmi.n	800481c <_vfiprintf_r+0x44>
 800482c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800482e:	f7ff feaf 	bl	8004590 <__retarget_lock_release_recursive>
 8004832:	e7f3      	b.n	800481c <_vfiprintf_r+0x44>
 8004834:	2300      	movs	r3, #0
 8004836:	9309      	str	r3, [sp, #36]	; 0x24
 8004838:	2320      	movs	r3, #32
 800483a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800483e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004842:	2330      	movs	r3, #48	; 0x30
 8004844:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80049f8 <_vfiprintf_r+0x220>
 8004848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800484c:	f04f 0901 	mov.w	r9, #1
 8004850:	4623      	mov	r3, r4
 8004852:	469a      	mov	sl, r3
 8004854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004858:	b10a      	cbz	r2, 800485e <_vfiprintf_r+0x86>
 800485a:	2a25      	cmp	r2, #37	; 0x25
 800485c:	d1f9      	bne.n	8004852 <_vfiprintf_r+0x7a>
 800485e:	ebba 0b04 	subs.w	fp, sl, r4
 8004862:	d00b      	beq.n	800487c <_vfiprintf_r+0xa4>
 8004864:	465b      	mov	r3, fp
 8004866:	4622      	mov	r2, r4
 8004868:	4629      	mov	r1, r5
 800486a:	4630      	mov	r0, r6
 800486c:	f7ff ffa1 	bl	80047b2 <__sfputs_r>
 8004870:	3001      	adds	r0, #1
 8004872:	f000 80a9 	beq.w	80049c8 <_vfiprintf_r+0x1f0>
 8004876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004878:	445a      	add	r2, fp
 800487a:	9209      	str	r2, [sp, #36]	; 0x24
 800487c:	f89a 3000 	ldrb.w	r3, [sl]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80a1 	beq.w	80049c8 <_vfiprintf_r+0x1f0>
 8004886:	2300      	movs	r3, #0
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004890:	f10a 0a01 	add.w	sl, sl, #1
 8004894:	9304      	str	r3, [sp, #16]
 8004896:	9307      	str	r3, [sp, #28]
 8004898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800489c:	931a      	str	r3, [sp, #104]	; 0x68
 800489e:	4654      	mov	r4, sl
 80048a0:	2205      	movs	r2, #5
 80048a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a6:	4854      	ldr	r0, [pc, #336]	; (80049f8 <_vfiprintf_r+0x220>)
 80048a8:	f7fb fca2 	bl	80001f0 <memchr>
 80048ac:	9a04      	ldr	r2, [sp, #16]
 80048ae:	b9d8      	cbnz	r0, 80048e8 <_vfiprintf_r+0x110>
 80048b0:	06d1      	lsls	r1, r2, #27
 80048b2:	bf44      	itt	mi
 80048b4:	2320      	movmi	r3, #32
 80048b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ba:	0713      	lsls	r3, r2, #28
 80048bc:	bf44      	itt	mi
 80048be:	232b      	movmi	r3, #43	; 0x2b
 80048c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048c4:	f89a 3000 	ldrb.w	r3, [sl]
 80048c8:	2b2a      	cmp	r3, #42	; 0x2a
 80048ca:	d015      	beq.n	80048f8 <_vfiprintf_r+0x120>
 80048cc:	9a07      	ldr	r2, [sp, #28]
 80048ce:	4654      	mov	r4, sl
 80048d0:	2000      	movs	r0, #0
 80048d2:	f04f 0c0a 	mov.w	ip, #10
 80048d6:	4621      	mov	r1, r4
 80048d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048dc:	3b30      	subs	r3, #48	; 0x30
 80048de:	2b09      	cmp	r3, #9
 80048e0:	d94d      	bls.n	800497e <_vfiprintf_r+0x1a6>
 80048e2:	b1b0      	cbz	r0, 8004912 <_vfiprintf_r+0x13a>
 80048e4:	9207      	str	r2, [sp, #28]
 80048e6:	e014      	b.n	8004912 <_vfiprintf_r+0x13a>
 80048e8:	eba0 0308 	sub.w	r3, r0, r8
 80048ec:	fa09 f303 	lsl.w	r3, r9, r3
 80048f0:	4313      	orrs	r3, r2
 80048f2:	9304      	str	r3, [sp, #16]
 80048f4:	46a2      	mov	sl, r4
 80048f6:	e7d2      	b.n	800489e <_vfiprintf_r+0xc6>
 80048f8:	9b03      	ldr	r3, [sp, #12]
 80048fa:	1d19      	adds	r1, r3, #4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	9103      	str	r1, [sp, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	bfbb      	ittet	lt
 8004904:	425b      	neglt	r3, r3
 8004906:	f042 0202 	orrlt.w	r2, r2, #2
 800490a:	9307      	strge	r3, [sp, #28]
 800490c:	9307      	strlt	r3, [sp, #28]
 800490e:	bfb8      	it	lt
 8004910:	9204      	strlt	r2, [sp, #16]
 8004912:	7823      	ldrb	r3, [r4, #0]
 8004914:	2b2e      	cmp	r3, #46	; 0x2e
 8004916:	d10c      	bne.n	8004932 <_vfiprintf_r+0x15a>
 8004918:	7863      	ldrb	r3, [r4, #1]
 800491a:	2b2a      	cmp	r3, #42	; 0x2a
 800491c:	d134      	bne.n	8004988 <_vfiprintf_r+0x1b0>
 800491e:	9b03      	ldr	r3, [sp, #12]
 8004920:	1d1a      	adds	r2, r3, #4
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	9203      	str	r2, [sp, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	bfb8      	it	lt
 800492a:	f04f 33ff 	movlt.w	r3, #4294967295
 800492e:	3402      	adds	r4, #2
 8004930:	9305      	str	r3, [sp, #20]
 8004932:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004a08 <_vfiprintf_r+0x230>
 8004936:	7821      	ldrb	r1, [r4, #0]
 8004938:	2203      	movs	r2, #3
 800493a:	4650      	mov	r0, sl
 800493c:	f7fb fc58 	bl	80001f0 <memchr>
 8004940:	b138      	cbz	r0, 8004952 <_vfiprintf_r+0x17a>
 8004942:	9b04      	ldr	r3, [sp, #16]
 8004944:	eba0 000a 	sub.w	r0, r0, sl
 8004948:	2240      	movs	r2, #64	; 0x40
 800494a:	4082      	lsls	r2, r0
 800494c:	4313      	orrs	r3, r2
 800494e:	3401      	adds	r4, #1
 8004950:	9304      	str	r3, [sp, #16]
 8004952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004956:	4829      	ldr	r0, [pc, #164]	; (80049fc <_vfiprintf_r+0x224>)
 8004958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800495c:	2206      	movs	r2, #6
 800495e:	f7fb fc47 	bl	80001f0 <memchr>
 8004962:	2800      	cmp	r0, #0
 8004964:	d03f      	beq.n	80049e6 <_vfiprintf_r+0x20e>
 8004966:	4b26      	ldr	r3, [pc, #152]	; (8004a00 <_vfiprintf_r+0x228>)
 8004968:	bb1b      	cbnz	r3, 80049b2 <_vfiprintf_r+0x1da>
 800496a:	9b03      	ldr	r3, [sp, #12]
 800496c:	3307      	adds	r3, #7
 800496e:	f023 0307 	bic.w	r3, r3, #7
 8004972:	3308      	adds	r3, #8
 8004974:	9303      	str	r3, [sp, #12]
 8004976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004978:	443b      	add	r3, r7
 800497a:	9309      	str	r3, [sp, #36]	; 0x24
 800497c:	e768      	b.n	8004850 <_vfiprintf_r+0x78>
 800497e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004982:	460c      	mov	r4, r1
 8004984:	2001      	movs	r0, #1
 8004986:	e7a6      	b.n	80048d6 <_vfiprintf_r+0xfe>
 8004988:	2300      	movs	r3, #0
 800498a:	3401      	adds	r4, #1
 800498c:	9305      	str	r3, [sp, #20]
 800498e:	4619      	mov	r1, r3
 8004990:	f04f 0c0a 	mov.w	ip, #10
 8004994:	4620      	mov	r0, r4
 8004996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800499a:	3a30      	subs	r2, #48	; 0x30
 800499c:	2a09      	cmp	r2, #9
 800499e:	d903      	bls.n	80049a8 <_vfiprintf_r+0x1d0>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0c6      	beq.n	8004932 <_vfiprintf_r+0x15a>
 80049a4:	9105      	str	r1, [sp, #20]
 80049a6:	e7c4      	b.n	8004932 <_vfiprintf_r+0x15a>
 80049a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ac:	4604      	mov	r4, r0
 80049ae:	2301      	movs	r3, #1
 80049b0:	e7f0      	b.n	8004994 <_vfiprintf_r+0x1bc>
 80049b2:	ab03      	add	r3, sp, #12
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	462a      	mov	r2, r5
 80049b8:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <_vfiprintf_r+0x22c>)
 80049ba:	a904      	add	r1, sp, #16
 80049bc:	4630      	mov	r0, r6
 80049be:	f3af 8000 	nop.w
 80049c2:	4607      	mov	r7, r0
 80049c4:	1c78      	adds	r0, r7, #1
 80049c6:	d1d6      	bne.n	8004976 <_vfiprintf_r+0x19e>
 80049c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049ca:	07d9      	lsls	r1, r3, #31
 80049cc:	d405      	bmi.n	80049da <_vfiprintf_r+0x202>
 80049ce:	89ab      	ldrh	r3, [r5, #12]
 80049d0:	059a      	lsls	r2, r3, #22
 80049d2:	d402      	bmi.n	80049da <_vfiprintf_r+0x202>
 80049d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049d6:	f7ff fddb 	bl	8004590 <__retarget_lock_release_recursive>
 80049da:	89ab      	ldrh	r3, [r5, #12]
 80049dc:	065b      	lsls	r3, r3, #25
 80049de:	f53f af1d 	bmi.w	800481c <_vfiprintf_r+0x44>
 80049e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049e4:	e71c      	b.n	8004820 <_vfiprintf_r+0x48>
 80049e6:	ab03      	add	r3, sp, #12
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	462a      	mov	r2, r5
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <_vfiprintf_r+0x22c>)
 80049ee:	a904      	add	r1, sp, #16
 80049f0:	4630      	mov	r0, r6
 80049f2:	f000 f879 	bl	8004ae8 <_printf_i>
 80049f6:	e7e4      	b.n	80049c2 <_vfiprintf_r+0x1ea>
 80049f8:	08005140 	.word	0x08005140
 80049fc:	0800514a 	.word	0x0800514a
 8004a00:	00000000 	.word	0x00000000
 8004a04:	080047b3 	.word	0x080047b3
 8004a08:	08005146 	.word	0x08005146

08004a0c <_printf_common>:
 8004a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a10:	4616      	mov	r6, r2
 8004a12:	4699      	mov	r9, r3
 8004a14:	688a      	ldr	r2, [r1, #8]
 8004a16:	690b      	ldr	r3, [r1, #16]
 8004a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	bfb8      	it	lt
 8004a20:	4613      	movlt	r3, r2
 8004a22:	6033      	str	r3, [r6, #0]
 8004a24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a28:	4607      	mov	r7, r0
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	b10a      	cbz	r2, 8004a32 <_printf_common+0x26>
 8004a2e:	3301      	adds	r3, #1
 8004a30:	6033      	str	r3, [r6, #0]
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	0699      	lsls	r1, r3, #26
 8004a36:	bf42      	ittt	mi
 8004a38:	6833      	ldrmi	r3, [r6, #0]
 8004a3a:	3302      	addmi	r3, #2
 8004a3c:	6033      	strmi	r3, [r6, #0]
 8004a3e:	6825      	ldr	r5, [r4, #0]
 8004a40:	f015 0506 	ands.w	r5, r5, #6
 8004a44:	d106      	bne.n	8004a54 <_printf_common+0x48>
 8004a46:	f104 0a19 	add.w	sl, r4, #25
 8004a4a:	68e3      	ldr	r3, [r4, #12]
 8004a4c:	6832      	ldr	r2, [r6, #0]
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	42ab      	cmp	r3, r5
 8004a52:	dc26      	bgt.n	8004aa2 <_printf_common+0x96>
 8004a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a58:	1e13      	subs	r3, r2, #0
 8004a5a:	6822      	ldr	r2, [r4, #0]
 8004a5c:	bf18      	it	ne
 8004a5e:	2301      	movne	r3, #1
 8004a60:	0692      	lsls	r2, r2, #26
 8004a62:	d42b      	bmi.n	8004abc <_printf_common+0xb0>
 8004a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a68:	4649      	mov	r1, r9
 8004a6a:	4638      	mov	r0, r7
 8004a6c:	47c0      	blx	r8
 8004a6e:	3001      	adds	r0, #1
 8004a70:	d01e      	beq.n	8004ab0 <_printf_common+0xa4>
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	6922      	ldr	r2, [r4, #16]
 8004a76:	f003 0306 	and.w	r3, r3, #6
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	bf02      	ittt	eq
 8004a7e:	68e5      	ldreq	r5, [r4, #12]
 8004a80:	6833      	ldreq	r3, [r6, #0]
 8004a82:	1aed      	subeq	r5, r5, r3
 8004a84:	68a3      	ldr	r3, [r4, #8]
 8004a86:	bf0c      	ite	eq
 8004a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a8c:	2500      	movne	r5, #0
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	bfc4      	itt	gt
 8004a92:	1a9b      	subgt	r3, r3, r2
 8004a94:	18ed      	addgt	r5, r5, r3
 8004a96:	2600      	movs	r6, #0
 8004a98:	341a      	adds	r4, #26
 8004a9a:	42b5      	cmp	r5, r6
 8004a9c:	d11a      	bne.n	8004ad4 <_printf_common+0xc8>
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	e008      	b.n	8004ab4 <_printf_common+0xa8>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4652      	mov	r2, sl
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	4638      	mov	r0, r7
 8004aaa:	47c0      	blx	r8
 8004aac:	3001      	adds	r0, #1
 8004aae:	d103      	bne.n	8004ab8 <_printf_common+0xac>
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab8:	3501      	adds	r5, #1
 8004aba:	e7c6      	b.n	8004a4a <_printf_common+0x3e>
 8004abc:	18e1      	adds	r1, r4, r3
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	2030      	movs	r0, #48	; 0x30
 8004ac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ac6:	4422      	add	r2, r4
 8004ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ad0:	3302      	adds	r3, #2
 8004ad2:	e7c7      	b.n	8004a64 <_printf_common+0x58>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	4649      	mov	r1, r9
 8004ada:	4638      	mov	r0, r7
 8004adc:	47c0      	blx	r8
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d0e6      	beq.n	8004ab0 <_printf_common+0xa4>
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	e7d9      	b.n	8004a9a <_printf_common+0x8e>
	...

08004ae8 <_printf_i>:
 8004ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aec:	7e0f      	ldrb	r7, [r1, #24]
 8004aee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004af0:	2f78      	cmp	r7, #120	; 0x78
 8004af2:	4691      	mov	r9, r2
 8004af4:	4680      	mov	r8, r0
 8004af6:	460c      	mov	r4, r1
 8004af8:	469a      	mov	sl, r3
 8004afa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004afe:	d807      	bhi.n	8004b10 <_printf_i+0x28>
 8004b00:	2f62      	cmp	r7, #98	; 0x62
 8004b02:	d80a      	bhi.n	8004b1a <_printf_i+0x32>
 8004b04:	2f00      	cmp	r7, #0
 8004b06:	f000 80d4 	beq.w	8004cb2 <_printf_i+0x1ca>
 8004b0a:	2f58      	cmp	r7, #88	; 0x58
 8004b0c:	f000 80c0 	beq.w	8004c90 <_printf_i+0x1a8>
 8004b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b18:	e03a      	b.n	8004b90 <_printf_i+0xa8>
 8004b1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b1e:	2b15      	cmp	r3, #21
 8004b20:	d8f6      	bhi.n	8004b10 <_printf_i+0x28>
 8004b22:	a101      	add	r1, pc, #4	; (adr r1, 8004b28 <_printf_i+0x40>)
 8004b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b28:	08004b81 	.word	0x08004b81
 8004b2c:	08004b95 	.word	0x08004b95
 8004b30:	08004b11 	.word	0x08004b11
 8004b34:	08004b11 	.word	0x08004b11
 8004b38:	08004b11 	.word	0x08004b11
 8004b3c:	08004b11 	.word	0x08004b11
 8004b40:	08004b95 	.word	0x08004b95
 8004b44:	08004b11 	.word	0x08004b11
 8004b48:	08004b11 	.word	0x08004b11
 8004b4c:	08004b11 	.word	0x08004b11
 8004b50:	08004b11 	.word	0x08004b11
 8004b54:	08004c99 	.word	0x08004c99
 8004b58:	08004bc1 	.word	0x08004bc1
 8004b5c:	08004c53 	.word	0x08004c53
 8004b60:	08004b11 	.word	0x08004b11
 8004b64:	08004b11 	.word	0x08004b11
 8004b68:	08004cbb 	.word	0x08004cbb
 8004b6c:	08004b11 	.word	0x08004b11
 8004b70:	08004bc1 	.word	0x08004bc1
 8004b74:	08004b11 	.word	0x08004b11
 8004b78:	08004b11 	.word	0x08004b11
 8004b7c:	08004c5b 	.word	0x08004c5b
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	1d1a      	adds	r2, r3, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	602a      	str	r2, [r5, #0]
 8004b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b90:	2301      	movs	r3, #1
 8004b92:	e09f      	b.n	8004cd4 <_printf_i+0x1ec>
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	682b      	ldr	r3, [r5, #0]
 8004b98:	0607      	lsls	r7, r0, #24
 8004b9a:	f103 0104 	add.w	r1, r3, #4
 8004b9e:	6029      	str	r1, [r5, #0]
 8004ba0:	d501      	bpl.n	8004ba6 <_printf_i+0xbe>
 8004ba2:	681e      	ldr	r6, [r3, #0]
 8004ba4:	e003      	b.n	8004bae <_printf_i+0xc6>
 8004ba6:	0646      	lsls	r6, r0, #25
 8004ba8:	d5fb      	bpl.n	8004ba2 <_printf_i+0xba>
 8004baa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bae:	2e00      	cmp	r6, #0
 8004bb0:	da03      	bge.n	8004bba <_printf_i+0xd2>
 8004bb2:	232d      	movs	r3, #45	; 0x2d
 8004bb4:	4276      	negs	r6, r6
 8004bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bba:	485a      	ldr	r0, [pc, #360]	; (8004d24 <_printf_i+0x23c>)
 8004bbc:	230a      	movs	r3, #10
 8004bbe:	e012      	b.n	8004be6 <_printf_i+0xfe>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	6820      	ldr	r0, [r4, #0]
 8004bc4:	1d19      	adds	r1, r3, #4
 8004bc6:	6029      	str	r1, [r5, #0]
 8004bc8:	0605      	lsls	r5, r0, #24
 8004bca:	d501      	bpl.n	8004bd0 <_printf_i+0xe8>
 8004bcc:	681e      	ldr	r6, [r3, #0]
 8004bce:	e002      	b.n	8004bd6 <_printf_i+0xee>
 8004bd0:	0641      	lsls	r1, r0, #25
 8004bd2:	d5fb      	bpl.n	8004bcc <_printf_i+0xe4>
 8004bd4:	881e      	ldrh	r6, [r3, #0]
 8004bd6:	4853      	ldr	r0, [pc, #332]	; (8004d24 <_printf_i+0x23c>)
 8004bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8004bda:	bf0c      	ite	eq
 8004bdc:	2308      	moveq	r3, #8
 8004bde:	230a      	movne	r3, #10
 8004be0:	2100      	movs	r1, #0
 8004be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004be6:	6865      	ldr	r5, [r4, #4]
 8004be8:	60a5      	str	r5, [r4, #8]
 8004bea:	2d00      	cmp	r5, #0
 8004bec:	bfa2      	ittt	ge
 8004bee:	6821      	ldrge	r1, [r4, #0]
 8004bf0:	f021 0104 	bicge.w	r1, r1, #4
 8004bf4:	6021      	strge	r1, [r4, #0]
 8004bf6:	b90e      	cbnz	r6, 8004bfc <_printf_i+0x114>
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	d04b      	beq.n	8004c94 <_printf_i+0x1ac>
 8004bfc:	4615      	mov	r5, r2
 8004bfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c02:	fb03 6711 	mls	r7, r3, r1, r6
 8004c06:	5dc7      	ldrb	r7, [r0, r7]
 8004c08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c0c:	4637      	mov	r7, r6
 8004c0e:	42bb      	cmp	r3, r7
 8004c10:	460e      	mov	r6, r1
 8004c12:	d9f4      	bls.n	8004bfe <_printf_i+0x116>
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d10b      	bne.n	8004c30 <_printf_i+0x148>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	07de      	lsls	r6, r3, #31
 8004c1c:	d508      	bpl.n	8004c30 <_printf_i+0x148>
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	6861      	ldr	r1, [r4, #4]
 8004c22:	4299      	cmp	r1, r3
 8004c24:	bfde      	ittt	le
 8004c26:	2330      	movle	r3, #48	; 0x30
 8004c28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c30:	1b52      	subs	r2, r2, r5
 8004c32:	6122      	str	r2, [r4, #16]
 8004c34:	f8cd a000 	str.w	sl, [sp]
 8004c38:	464b      	mov	r3, r9
 8004c3a:	aa03      	add	r2, sp, #12
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4640      	mov	r0, r8
 8004c40:	f7ff fee4 	bl	8004a0c <_printf_common>
 8004c44:	3001      	adds	r0, #1
 8004c46:	d14a      	bne.n	8004cde <_printf_i+0x1f6>
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	b004      	add	sp, #16
 8004c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	f043 0320 	orr.w	r3, r3, #32
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	4833      	ldr	r0, [pc, #204]	; (8004d28 <_printf_i+0x240>)
 8004c5c:	2778      	movs	r7, #120	; 0x78
 8004c5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	6829      	ldr	r1, [r5, #0]
 8004c66:	061f      	lsls	r7, r3, #24
 8004c68:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c6c:	d402      	bmi.n	8004c74 <_printf_i+0x18c>
 8004c6e:	065f      	lsls	r7, r3, #25
 8004c70:	bf48      	it	mi
 8004c72:	b2b6      	uxthmi	r6, r6
 8004c74:	07df      	lsls	r7, r3, #31
 8004c76:	bf48      	it	mi
 8004c78:	f043 0320 	orrmi.w	r3, r3, #32
 8004c7c:	6029      	str	r1, [r5, #0]
 8004c7e:	bf48      	it	mi
 8004c80:	6023      	strmi	r3, [r4, #0]
 8004c82:	b91e      	cbnz	r6, 8004c8c <_printf_i+0x1a4>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	f023 0320 	bic.w	r3, r3, #32
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	e7a7      	b.n	8004be0 <_printf_i+0xf8>
 8004c90:	4824      	ldr	r0, [pc, #144]	; (8004d24 <_printf_i+0x23c>)
 8004c92:	e7e4      	b.n	8004c5e <_printf_i+0x176>
 8004c94:	4615      	mov	r5, r2
 8004c96:	e7bd      	b.n	8004c14 <_printf_i+0x12c>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	6826      	ldr	r6, [r4, #0]
 8004c9c:	6961      	ldr	r1, [r4, #20]
 8004c9e:	1d18      	adds	r0, r3, #4
 8004ca0:	6028      	str	r0, [r5, #0]
 8004ca2:	0635      	lsls	r5, r6, #24
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	d501      	bpl.n	8004cac <_printf_i+0x1c4>
 8004ca8:	6019      	str	r1, [r3, #0]
 8004caa:	e002      	b.n	8004cb2 <_printf_i+0x1ca>
 8004cac:	0670      	lsls	r0, r6, #25
 8004cae:	d5fb      	bpl.n	8004ca8 <_printf_i+0x1c0>
 8004cb0:	8019      	strh	r1, [r3, #0]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	6123      	str	r3, [r4, #16]
 8004cb6:	4615      	mov	r5, r2
 8004cb8:	e7bc      	b.n	8004c34 <_printf_i+0x14c>
 8004cba:	682b      	ldr	r3, [r5, #0]
 8004cbc:	1d1a      	adds	r2, r3, #4
 8004cbe:	602a      	str	r2, [r5, #0]
 8004cc0:	681d      	ldr	r5, [r3, #0]
 8004cc2:	6862      	ldr	r2, [r4, #4]
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f7fb fa92 	bl	80001f0 <memchr>
 8004ccc:	b108      	cbz	r0, 8004cd2 <_printf_i+0x1ea>
 8004cce:	1b40      	subs	r0, r0, r5
 8004cd0:	6060      	str	r0, [r4, #4]
 8004cd2:	6863      	ldr	r3, [r4, #4]
 8004cd4:	6123      	str	r3, [r4, #16]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cdc:	e7aa      	b.n	8004c34 <_printf_i+0x14c>
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	462a      	mov	r2, r5
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	47d0      	blx	sl
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d0ad      	beq.n	8004c48 <_printf_i+0x160>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	079b      	lsls	r3, r3, #30
 8004cf0:	d413      	bmi.n	8004d1a <_printf_i+0x232>
 8004cf2:	68e0      	ldr	r0, [r4, #12]
 8004cf4:	9b03      	ldr	r3, [sp, #12]
 8004cf6:	4298      	cmp	r0, r3
 8004cf8:	bfb8      	it	lt
 8004cfa:	4618      	movlt	r0, r3
 8004cfc:	e7a6      	b.n	8004c4c <_printf_i+0x164>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4632      	mov	r2, r6
 8004d02:	4649      	mov	r1, r9
 8004d04:	4640      	mov	r0, r8
 8004d06:	47d0      	blx	sl
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d09d      	beq.n	8004c48 <_printf_i+0x160>
 8004d0c:	3501      	adds	r5, #1
 8004d0e:	68e3      	ldr	r3, [r4, #12]
 8004d10:	9903      	ldr	r1, [sp, #12]
 8004d12:	1a5b      	subs	r3, r3, r1
 8004d14:	42ab      	cmp	r3, r5
 8004d16:	dcf2      	bgt.n	8004cfe <_printf_i+0x216>
 8004d18:	e7eb      	b.n	8004cf2 <_printf_i+0x20a>
 8004d1a:	2500      	movs	r5, #0
 8004d1c:	f104 0619 	add.w	r6, r4, #25
 8004d20:	e7f5      	b.n	8004d0e <_printf_i+0x226>
 8004d22:	bf00      	nop
 8004d24:	08005151 	.word	0x08005151
 8004d28:	08005162 	.word	0x08005162

08004d2c <__sflush_r>:
 8004d2c:	898a      	ldrh	r2, [r1, #12]
 8004d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d32:	4605      	mov	r5, r0
 8004d34:	0710      	lsls	r0, r2, #28
 8004d36:	460c      	mov	r4, r1
 8004d38:	d458      	bmi.n	8004dec <__sflush_r+0xc0>
 8004d3a:	684b      	ldr	r3, [r1, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	dc05      	bgt.n	8004d4c <__sflush_r+0x20>
 8004d40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	dc02      	bgt.n	8004d4c <__sflush_r+0x20>
 8004d46:	2000      	movs	r0, #0
 8004d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	d0f9      	beq.n	8004d46 <__sflush_r+0x1a>
 8004d52:	2300      	movs	r3, #0
 8004d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d58:	682f      	ldr	r7, [r5, #0]
 8004d5a:	6a21      	ldr	r1, [r4, #32]
 8004d5c:	602b      	str	r3, [r5, #0]
 8004d5e:	d032      	beq.n	8004dc6 <__sflush_r+0x9a>
 8004d60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	075a      	lsls	r2, r3, #29
 8004d66:	d505      	bpl.n	8004d74 <__sflush_r+0x48>
 8004d68:	6863      	ldr	r3, [r4, #4]
 8004d6a:	1ac0      	subs	r0, r0, r3
 8004d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d6e:	b10b      	cbz	r3, 8004d74 <__sflush_r+0x48>
 8004d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d72:	1ac0      	subs	r0, r0, r3
 8004d74:	2300      	movs	r3, #0
 8004d76:	4602      	mov	r2, r0
 8004d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d7a:	6a21      	ldr	r1, [r4, #32]
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b0      	blx	r6
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	d106      	bne.n	8004d94 <__sflush_r+0x68>
 8004d86:	6829      	ldr	r1, [r5, #0]
 8004d88:	291d      	cmp	r1, #29
 8004d8a:	d82b      	bhi.n	8004de4 <__sflush_r+0xb8>
 8004d8c:	4a29      	ldr	r2, [pc, #164]	; (8004e34 <__sflush_r+0x108>)
 8004d8e:	410a      	asrs	r2, r1
 8004d90:	07d6      	lsls	r6, r2, #31
 8004d92:	d427      	bmi.n	8004de4 <__sflush_r+0xb8>
 8004d94:	2200      	movs	r2, #0
 8004d96:	6062      	str	r2, [r4, #4]
 8004d98:	04d9      	lsls	r1, r3, #19
 8004d9a:	6922      	ldr	r2, [r4, #16]
 8004d9c:	6022      	str	r2, [r4, #0]
 8004d9e:	d504      	bpl.n	8004daa <__sflush_r+0x7e>
 8004da0:	1c42      	adds	r2, r0, #1
 8004da2:	d101      	bne.n	8004da8 <__sflush_r+0x7c>
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	b903      	cbnz	r3, 8004daa <__sflush_r+0x7e>
 8004da8:	6560      	str	r0, [r4, #84]	; 0x54
 8004daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dac:	602f      	str	r7, [r5, #0]
 8004dae:	2900      	cmp	r1, #0
 8004db0:	d0c9      	beq.n	8004d46 <__sflush_r+0x1a>
 8004db2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004db6:	4299      	cmp	r1, r3
 8004db8:	d002      	beq.n	8004dc0 <__sflush_r+0x94>
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f7ff fbea 	bl	8004594 <_free_r>
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	6360      	str	r0, [r4, #52]	; 0x34
 8004dc4:	e7c0      	b.n	8004d48 <__sflush_r+0x1c>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b0      	blx	r6
 8004dcc:	1c41      	adds	r1, r0, #1
 8004dce:	d1c8      	bne.n	8004d62 <__sflush_r+0x36>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0c5      	beq.n	8004d62 <__sflush_r+0x36>
 8004dd6:	2b1d      	cmp	r3, #29
 8004dd8:	d001      	beq.n	8004dde <__sflush_r+0xb2>
 8004dda:	2b16      	cmp	r3, #22
 8004ddc:	d101      	bne.n	8004de2 <__sflush_r+0xb6>
 8004dde:	602f      	str	r7, [r5, #0]
 8004de0:	e7b1      	b.n	8004d46 <__sflush_r+0x1a>
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de8:	81a3      	strh	r3, [r4, #12]
 8004dea:	e7ad      	b.n	8004d48 <__sflush_r+0x1c>
 8004dec:	690f      	ldr	r7, [r1, #16]
 8004dee:	2f00      	cmp	r7, #0
 8004df0:	d0a9      	beq.n	8004d46 <__sflush_r+0x1a>
 8004df2:	0793      	lsls	r3, r2, #30
 8004df4:	680e      	ldr	r6, [r1, #0]
 8004df6:	bf08      	it	eq
 8004df8:	694b      	ldreq	r3, [r1, #20]
 8004dfa:	600f      	str	r7, [r1, #0]
 8004dfc:	bf18      	it	ne
 8004dfe:	2300      	movne	r3, #0
 8004e00:	eba6 0807 	sub.w	r8, r6, r7
 8004e04:	608b      	str	r3, [r1, #8]
 8004e06:	f1b8 0f00 	cmp.w	r8, #0
 8004e0a:	dd9c      	ble.n	8004d46 <__sflush_r+0x1a>
 8004e0c:	6a21      	ldr	r1, [r4, #32]
 8004e0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e10:	4643      	mov	r3, r8
 8004e12:	463a      	mov	r2, r7
 8004e14:	4628      	mov	r0, r5
 8004e16:	47b0      	blx	r6
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	dc06      	bgt.n	8004e2a <__sflush_r+0xfe>
 8004e1c:	89a3      	ldrh	r3, [r4, #12]
 8004e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e22:	81a3      	strh	r3, [r4, #12]
 8004e24:	f04f 30ff 	mov.w	r0, #4294967295
 8004e28:	e78e      	b.n	8004d48 <__sflush_r+0x1c>
 8004e2a:	4407      	add	r7, r0
 8004e2c:	eba8 0800 	sub.w	r8, r8, r0
 8004e30:	e7e9      	b.n	8004e06 <__sflush_r+0xda>
 8004e32:	bf00      	nop
 8004e34:	dfbffffe 	.word	0xdfbffffe

08004e38 <_fflush_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	690b      	ldr	r3, [r1, #16]
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	460c      	mov	r4, r1
 8004e40:	b913      	cbnz	r3, 8004e48 <_fflush_r+0x10>
 8004e42:	2500      	movs	r5, #0
 8004e44:	4628      	mov	r0, r5
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	b118      	cbz	r0, 8004e52 <_fflush_r+0x1a>
 8004e4a:	6a03      	ldr	r3, [r0, #32]
 8004e4c:	b90b      	cbnz	r3, 8004e52 <_fflush_r+0x1a>
 8004e4e:	f7ff fa99 	bl	8004384 <__sinit>
 8004e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f3      	beq.n	8004e42 <_fflush_r+0xa>
 8004e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e5c:	07d0      	lsls	r0, r2, #31
 8004e5e:	d404      	bmi.n	8004e6a <_fflush_r+0x32>
 8004e60:	0599      	lsls	r1, r3, #22
 8004e62:	d402      	bmi.n	8004e6a <_fflush_r+0x32>
 8004e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e66:	f7ff fb92 	bl	800458e <__retarget_lock_acquire_recursive>
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	f7ff ff5d 	bl	8004d2c <__sflush_r>
 8004e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e74:	07da      	lsls	r2, r3, #31
 8004e76:	4605      	mov	r5, r0
 8004e78:	d4e4      	bmi.n	8004e44 <_fflush_r+0xc>
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	059b      	lsls	r3, r3, #22
 8004e7e:	d4e1      	bmi.n	8004e44 <_fflush_r+0xc>
 8004e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e82:	f7ff fb85 	bl	8004590 <__retarget_lock_release_recursive>
 8004e86:	e7dd      	b.n	8004e44 <_fflush_r+0xc>

08004e88 <__swbuf_r>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	460e      	mov	r6, r1
 8004e8c:	4614      	mov	r4, r2
 8004e8e:	4605      	mov	r5, r0
 8004e90:	b118      	cbz	r0, 8004e9a <__swbuf_r+0x12>
 8004e92:	6a03      	ldr	r3, [r0, #32]
 8004e94:	b90b      	cbnz	r3, 8004e9a <__swbuf_r+0x12>
 8004e96:	f7ff fa75 	bl	8004384 <__sinit>
 8004e9a:	69a3      	ldr	r3, [r4, #24]
 8004e9c:	60a3      	str	r3, [r4, #8]
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	071a      	lsls	r2, r3, #28
 8004ea2:	d525      	bpl.n	8004ef0 <__swbuf_r+0x68>
 8004ea4:	6923      	ldr	r3, [r4, #16]
 8004ea6:	b31b      	cbz	r3, 8004ef0 <__swbuf_r+0x68>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	6922      	ldr	r2, [r4, #16]
 8004eac:	1a98      	subs	r0, r3, r2
 8004eae:	6963      	ldr	r3, [r4, #20]
 8004eb0:	b2f6      	uxtb	r6, r6
 8004eb2:	4283      	cmp	r3, r0
 8004eb4:	4637      	mov	r7, r6
 8004eb6:	dc04      	bgt.n	8004ec2 <__swbuf_r+0x3a>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f7ff ffbc 	bl	8004e38 <_fflush_r>
 8004ec0:	b9e0      	cbnz	r0, 8004efc <__swbuf_r+0x74>
 8004ec2:	68a3      	ldr	r3, [r4, #8]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	60a3      	str	r3, [r4, #8]
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	6022      	str	r2, [r4, #0]
 8004ece:	701e      	strb	r6, [r3, #0]
 8004ed0:	6962      	ldr	r2, [r4, #20]
 8004ed2:	1c43      	adds	r3, r0, #1
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d004      	beq.n	8004ee2 <__swbuf_r+0x5a>
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	07db      	lsls	r3, r3, #31
 8004edc:	d506      	bpl.n	8004eec <__swbuf_r+0x64>
 8004ede:	2e0a      	cmp	r6, #10
 8004ee0:	d104      	bne.n	8004eec <__swbuf_r+0x64>
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f7ff ffa7 	bl	8004e38 <_fflush_r>
 8004eea:	b938      	cbnz	r0, 8004efc <__swbuf_r+0x74>
 8004eec:	4638      	mov	r0, r7
 8004eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f000 f806 	bl	8004f04 <__swsetup_r>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d0d5      	beq.n	8004ea8 <__swbuf_r+0x20>
 8004efc:	f04f 37ff 	mov.w	r7, #4294967295
 8004f00:	e7f4      	b.n	8004eec <__swbuf_r+0x64>
	...

08004f04 <__swsetup_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <__swsetup_r+0xac>)
 8004f08:	4605      	mov	r5, r0
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	b118      	cbz	r0, 8004f18 <__swsetup_r+0x14>
 8004f10:	6a03      	ldr	r3, [r0, #32]
 8004f12:	b90b      	cbnz	r3, 8004f18 <__swsetup_r+0x14>
 8004f14:	f7ff fa36 	bl	8004384 <__sinit>
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f1e:	0718      	lsls	r0, r3, #28
 8004f20:	d422      	bmi.n	8004f68 <__swsetup_r+0x64>
 8004f22:	06d9      	lsls	r1, r3, #27
 8004f24:	d407      	bmi.n	8004f36 <__swsetup_r+0x32>
 8004f26:	2309      	movs	r3, #9
 8004f28:	602b      	str	r3, [r5, #0]
 8004f2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f2e:	81a3      	strh	r3, [r4, #12]
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295
 8004f34:	e034      	b.n	8004fa0 <__swsetup_r+0x9c>
 8004f36:	0758      	lsls	r0, r3, #29
 8004f38:	d512      	bpl.n	8004f60 <__swsetup_r+0x5c>
 8004f3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f3c:	b141      	cbz	r1, 8004f50 <__swsetup_r+0x4c>
 8004f3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f42:	4299      	cmp	r1, r3
 8004f44:	d002      	beq.n	8004f4c <__swsetup_r+0x48>
 8004f46:	4628      	mov	r0, r5
 8004f48:	f7ff fb24 	bl	8004594 <_free_r>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6363      	str	r3, [r4, #52]	; 0x34
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	6063      	str	r3, [r4, #4]
 8004f5c:	6923      	ldr	r3, [r4, #16]
 8004f5e:	6023      	str	r3, [r4, #0]
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	f043 0308 	orr.w	r3, r3, #8
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	6923      	ldr	r3, [r4, #16]
 8004f6a:	b94b      	cbnz	r3, 8004f80 <__swsetup_r+0x7c>
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f76:	d003      	beq.n	8004f80 <__swsetup_r+0x7c>
 8004f78:	4621      	mov	r1, r4
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 f850 	bl	8005020 <__smakebuf_r>
 8004f80:	89a0      	ldrh	r0, [r4, #12]
 8004f82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f86:	f010 0301 	ands.w	r3, r0, #1
 8004f8a:	d00a      	beq.n	8004fa2 <__swsetup_r+0x9e>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60a3      	str	r3, [r4, #8]
 8004f90:	6963      	ldr	r3, [r4, #20]
 8004f92:	425b      	negs	r3, r3
 8004f94:	61a3      	str	r3, [r4, #24]
 8004f96:	6923      	ldr	r3, [r4, #16]
 8004f98:	b943      	cbnz	r3, 8004fac <__swsetup_r+0xa8>
 8004f9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f9e:	d1c4      	bne.n	8004f2a <__swsetup_r+0x26>
 8004fa0:	bd38      	pop	{r3, r4, r5, pc}
 8004fa2:	0781      	lsls	r1, r0, #30
 8004fa4:	bf58      	it	pl
 8004fa6:	6963      	ldrpl	r3, [r4, #20]
 8004fa8:	60a3      	str	r3, [r4, #8]
 8004faa:	e7f4      	b.n	8004f96 <__swsetup_r+0x92>
 8004fac:	2000      	movs	r0, #0
 8004fae:	e7f7      	b.n	8004fa0 <__swsetup_r+0x9c>
 8004fb0:	20000064 	.word	0x20000064

08004fb4 <_sbrk_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4d06      	ldr	r5, [pc, #24]	; (8004fd0 <_sbrk_r+0x1c>)
 8004fb8:	2300      	movs	r3, #0
 8004fba:	4604      	mov	r4, r0
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	602b      	str	r3, [r5, #0]
 8004fc0:	f7fc f82a 	bl	8001018 <_sbrk>
 8004fc4:	1c43      	adds	r3, r0, #1
 8004fc6:	d102      	bne.n	8004fce <_sbrk_r+0x1a>
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	b103      	cbz	r3, 8004fce <_sbrk_r+0x1a>
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	bd38      	pop	{r3, r4, r5, pc}
 8004fd0:	200009a4 	.word	0x200009a4

08004fd4 <__swhatbuf_r>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	b096      	sub	sp, #88	; 0x58
 8004fe0:	4615      	mov	r5, r2
 8004fe2:	461e      	mov	r6, r3
 8004fe4:	da0d      	bge.n	8005002 <__swhatbuf_r+0x2e>
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004fec:	f04f 0100 	mov.w	r1, #0
 8004ff0:	bf0c      	ite	eq
 8004ff2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004ff6:	2340      	movne	r3, #64	; 0x40
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	6031      	str	r1, [r6, #0]
 8004ffc:	602b      	str	r3, [r5, #0]
 8004ffe:	b016      	add	sp, #88	; 0x58
 8005000:	bd70      	pop	{r4, r5, r6, pc}
 8005002:	466a      	mov	r2, sp
 8005004:	f000 f848 	bl	8005098 <_fstat_r>
 8005008:	2800      	cmp	r0, #0
 800500a:	dbec      	blt.n	8004fe6 <__swhatbuf_r+0x12>
 800500c:	9901      	ldr	r1, [sp, #4]
 800500e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005012:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005016:	4259      	negs	r1, r3
 8005018:	4159      	adcs	r1, r3
 800501a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501e:	e7eb      	b.n	8004ff8 <__swhatbuf_r+0x24>

08005020 <__smakebuf_r>:
 8005020:	898b      	ldrh	r3, [r1, #12]
 8005022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005024:	079d      	lsls	r5, r3, #30
 8005026:	4606      	mov	r6, r0
 8005028:	460c      	mov	r4, r1
 800502a:	d507      	bpl.n	800503c <__smakebuf_r+0x1c>
 800502c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005030:	6023      	str	r3, [r4, #0]
 8005032:	6123      	str	r3, [r4, #16]
 8005034:	2301      	movs	r3, #1
 8005036:	6163      	str	r3, [r4, #20]
 8005038:	b002      	add	sp, #8
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	ab01      	add	r3, sp, #4
 800503e:	466a      	mov	r2, sp
 8005040:	f7ff ffc8 	bl	8004fd4 <__swhatbuf_r>
 8005044:	9900      	ldr	r1, [sp, #0]
 8005046:	4605      	mov	r5, r0
 8005048:	4630      	mov	r0, r6
 800504a:	f7ff fb0f 	bl	800466c <_malloc_r>
 800504e:	b948      	cbnz	r0, 8005064 <__smakebuf_r+0x44>
 8005050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005054:	059a      	lsls	r2, r3, #22
 8005056:	d4ef      	bmi.n	8005038 <__smakebuf_r+0x18>
 8005058:	f023 0303 	bic.w	r3, r3, #3
 800505c:	f043 0302 	orr.w	r3, r3, #2
 8005060:	81a3      	strh	r3, [r4, #12]
 8005062:	e7e3      	b.n	800502c <__smakebuf_r+0xc>
 8005064:	89a3      	ldrh	r3, [r4, #12]
 8005066:	6020      	str	r0, [r4, #0]
 8005068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506c:	81a3      	strh	r3, [r4, #12]
 800506e:	9b00      	ldr	r3, [sp, #0]
 8005070:	6163      	str	r3, [r4, #20]
 8005072:	9b01      	ldr	r3, [sp, #4]
 8005074:	6120      	str	r0, [r4, #16]
 8005076:	b15b      	cbz	r3, 8005090 <__smakebuf_r+0x70>
 8005078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800507c:	4630      	mov	r0, r6
 800507e:	f000 f81d 	bl	80050bc <_isatty_r>
 8005082:	b128      	cbz	r0, 8005090 <__smakebuf_r+0x70>
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	f023 0303 	bic.w	r3, r3, #3
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	81a3      	strh	r3, [r4, #12]
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	431d      	orrs	r5, r3
 8005094:	81a5      	strh	r5, [r4, #12]
 8005096:	e7cf      	b.n	8005038 <__smakebuf_r+0x18>

08005098 <_fstat_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4d07      	ldr	r5, [pc, #28]	; (80050b8 <_fstat_r+0x20>)
 800509c:	2300      	movs	r3, #0
 800509e:	4604      	mov	r4, r0
 80050a0:	4608      	mov	r0, r1
 80050a2:	4611      	mov	r1, r2
 80050a4:	602b      	str	r3, [r5, #0]
 80050a6:	f7fb ff8e 	bl	8000fc6 <_fstat>
 80050aa:	1c43      	adds	r3, r0, #1
 80050ac:	d102      	bne.n	80050b4 <_fstat_r+0x1c>
 80050ae:	682b      	ldr	r3, [r5, #0]
 80050b0:	b103      	cbz	r3, 80050b4 <_fstat_r+0x1c>
 80050b2:	6023      	str	r3, [r4, #0]
 80050b4:	bd38      	pop	{r3, r4, r5, pc}
 80050b6:	bf00      	nop
 80050b8:	200009a4 	.word	0x200009a4

080050bc <_isatty_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4d06      	ldr	r5, [pc, #24]	; (80050d8 <_isatty_r+0x1c>)
 80050c0:	2300      	movs	r3, #0
 80050c2:	4604      	mov	r4, r0
 80050c4:	4608      	mov	r0, r1
 80050c6:	602b      	str	r3, [r5, #0]
 80050c8:	f7fb ff8d 	bl	8000fe6 <_isatty>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_isatty_r+0x1a>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_isatty_r+0x1a>
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	200009a4 	.word	0x200009a4

080050dc <_init>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	bf00      	nop
 80050e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e2:	bc08      	pop	{r3}
 80050e4:	469e      	mov	lr, r3
 80050e6:	4770      	bx	lr

080050e8 <_fini>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr
