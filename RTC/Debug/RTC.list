
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004acc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004c7c  08004c7c  00014c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d10  08004d10  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d10  08004d10  00014d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d18  08004d18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000214  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000284  20000284  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ce53  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002482  00000000  00000000  0002cf36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ae8  00000000  00000000  0002f3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000841  00000000  00000000  0002fea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024c89  00000000  00000000  000306e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000eda5  00000000  00000000  0005536a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9ad6  00000000  00000000  0006410f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003300  00000000  00000000  0013dbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00140ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004c64 	.word	0x08004c64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004c64 	.word	0x08004c64

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	4b27      	ldr	r3, [pc, #156]	; (8000654 <MX_GPIO_Init+0xb8>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a26      	ldr	r2, [pc, #152]	; (8000654 <MX_GPIO_Init+0xb8>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b24      	ldr	r3, [pc, #144]	; (8000654 <MX_GPIO_Init+0xb8>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <MX_GPIO_Init+0xb8>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a1f      	ldr	r2, [pc, #124]	; (8000654 <MX_GPIO_Init+0xb8>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MX_GPIO_Init+0xb8>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_GPIO_Init+0xb8>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a18      	ldr	r2, [pc, #96]	; (8000654 <MX_GPIO_Init+0xb8>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_GPIO_Init+0xb8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_GPIO_Init+0xb8>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a11      	ldr	r2, [pc, #68]	; (8000654 <MX_GPIO_Init+0xb8>)
 8000610:	f043 0308 	orr.w	r3, r3, #8
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_GPIO_Init+0xb8>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f244 0181 	movw	r1, #16513	; 0x4081
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <MX_GPIO_Init+0xbc>)
 800062a:	f000 ffc7 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800062e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_GPIO_Init+0xbc>)
 8000648:	f000 fe0c 	bl	8001264 <HAL_GPIO_Init>

}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40020400 	.word	0x40020400

0800065c <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	b29a      	uxth	r2, r3
 800066c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000670:	68b9      	ldr	r1, [r7, #8]
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <_write+0x28>)
 8000674:	f002 fb1c 	bl	8002cb0 <HAL_UART_Transmit>
	return len;
 8000678:	687b      	ldr	r3, [r7, #4]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000f0 	.word	0x200000f0

08000688 <get_time>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_time(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	// Get the RTC current Time
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800068e:	463b      	mov	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	4619      	mov	r1, r3
 8000694:	4816      	ldr	r0, [pc, #88]	; (80006f0 <get_time+0x68>)
 8000696:	f001 ff3d 	bl	8002514 <HAL_RTC_GetTime>
	// Get the RTC current Date
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2200      	movs	r2, #0
 80006a0:	4619      	mov	r1, r3
 80006a2:	4813      	ldr	r0, [pc, #76]	; (80006f0 <get_time+0x68>)
 80006a4:	f002 f818 	bl	80026d8 <HAL_RTC_GetDate>

	// Display time Format: hh:mm:ss
	sprintf((char *)showTime, "%02d:%02d:%02d\t\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80006a8:	783b      	ldrb	r3, [r7, #0]
 80006aa:	461a      	mov	r2, r3
 80006ac:	787b      	ldrb	r3, [r7, #1]
 80006ae:	4619      	mov	r1, r3
 80006b0:	78bb      	ldrb	r3, [r7, #2]
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	460b      	mov	r3, r1
 80006b6:	490f      	ldr	r1, [pc, #60]	; (80006f4 <get_time+0x6c>)
 80006b8:	480f      	ldr	r0, [pc, #60]	; (80006f8 <get_time+0x70>)
 80006ba:	f003 fbdd 	bl	8003e78 <siprintf>
	// Display time Format: dd-mm-yy
	sprintf((char *)showDate, "%s-%04d-%02d-%02d\t\r\n", ampm[sTime.TimeFormat >> 6],
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	099b      	lsrs	r3, r3, #6
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <get_time+0x74>)
 80006ce:	441a      	add	r2, r3
			 2000 + sDate.Year, sDate.Month, sDate.Date);
 80006d0:	7dfb      	ldrb	r3, [r7, #23]
	sprintf((char *)showDate, "%s-%04d-%02d-%02d\t\r\n", ampm[sTime.TimeFormat >> 6],
 80006d2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
			 2000 + sDate.Year, sDate.Month, sDate.Date);
 80006d6:	7d79      	ldrb	r1, [r7, #21]
 80006d8:	7db8      	ldrb	r0, [r7, #22]
	sprintf((char *)showDate, "%s-%04d-%02d-%02d\t\r\n", ampm[sTime.TimeFormat >> 6],
 80006da:	9001      	str	r0, [sp, #4]
 80006dc:	9100      	str	r1, [sp, #0]
 80006de:	4908      	ldr	r1, [pc, #32]	; (8000700 <get_time+0x78>)
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <get_time+0x7c>)
 80006e2:	f003 fbc9 	bl	8003e78 <siprintf>
}
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000cc 	.word	0x200000cc
 80006f4:	08004c7c 	.word	0x08004c7c
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	20000000 	.word	0x20000000
 8000700:	08004c90 	.word	0x08004c90
 8000704:	200000ac 	.word	0x200000ac

08000708 <set_time>:

void set_time(uint8_t hh, uint8_t mm, uint8_t ss) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	460b      	mov	r3, r1
 8000714:	71bb      	strb	r3, [r7, #6]
 8000716:	4613      	mov	r3, r2
 8000718:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef sTime;

	sTime.Hours = hh; // set hours
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = mm; // set minutes
 800071e:	79bb      	ldrb	r3, [r7, #6]
 8000720:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ss; // set seconds
 8000722:	797b      	ldrb	r3, [r7, #5]
 8000724:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <set_time+0x34>)
 8000730:	f001 fe56 	bl	80023e0 <HAL_RTC_SetTime>
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000cc 	.word	0x200000cc

08000740 <set_Date>:

void set_Date(uint8_t ww, uint8_t mm, uint8_t dd, uint8_t yy) {
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	4604      	mov	r4, r0
 8000748:	4608      	mov	r0, r1
 800074a:	4611      	mov	r1, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4623      	mov	r3, r4
 8000750:	71fb      	strb	r3, [r7, #7]
 8000752:	4603      	mov	r3, r0
 8000754:	71bb      	strb	r3, [r7, #6]
 8000756:	460b      	mov	r3, r1
 8000758:	717b      	strb	r3, [r7, #5]
 800075a:	4613      	mov	r3, r2
 800075c:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef sDate;

	sDate.WeekDay = ww; // date RTC_WEEKDAY_THURSDAY
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	733b      	strb	r3, [r7, #12]
	sDate.Month = mm; // month RTC_MONTH_FEBRUARY
 8000762:	79bb      	ldrb	r3, [r7, #6]
 8000764:	737b      	strb	r3, [r7, #13]
	sDate.Date = dd; // date
 8000766:	797b      	ldrb	r3, [r7, #5]
 8000768:	73bb      	strb	r3, [r7, #14]
	sDate.Year = yy; // year
 800076a:	793b      	ldrb	r3, [r7, #4]
 800076c:	73fb      	strb	r3, [r7, #15]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2200      	movs	r2, #0
 8000774:	4619      	mov	r1, r3
 8000776:	4803      	ldr	r0, [pc, #12]	; (8000784 <set_Date+0x44>)
 8000778:	f001 ff2a 	bl	80025d0 <HAL_RTC_SetDate>
}
 800077c:	bf00      	nop
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	bd90      	pop	{r4, r7, pc}
 8000784:	200000cc 	.word	0x200000cc

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078c:	f000 fb30 	bl	8000df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000790:	f000 f83c 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000794:	f7ff ff02 	bl	800059c <MX_GPIO_Init>
  MX_RTC_Init();
 8000798:	f000 f8d0 	bl	800093c <MX_RTC_Init>
  MX_USART3_UART_Init();
 800079c:	f000 fa8c 	bl	8000cb8 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007a0:	f000 f8a6 	bl	80008f0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  set_time(1,16,20);
 80007a4:	2214      	movs	r2, #20
 80007a6:	2110      	movs	r1, #16
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff ffad 	bl	8000708 <set_time>
  set_Date(RTC_WEEKDAY_MONDAY, 10, 27, 23);
 80007ae:	2317      	movs	r3, #23
 80007b0:	221b      	movs	r2, #27
 80007b2:	210a      	movs	r1, #10
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ffc3 	bl	8000740 <set_Date>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_time();
 80007ba:	f7ff ff65 	bl	8000688 <get_time>

	  HAL_UART_Transmit(&huart3, (uint8_t *)&showTime, strlen(showTime), 1000);
 80007be:	4810      	ldr	r0, [pc, #64]	; (8000800 <main+0x78>)
 80007c0:	f7ff fd16 	bl	80001f0 <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007cc:	490c      	ldr	r1, [pc, #48]	; (8000800 <main+0x78>)
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <main+0x7c>)
 80007d0:	f002 fa6e 	bl	8002cb0 <HAL_UART_Transmit>
	  HAL_Delay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f000 fb7d 	bl	8000ed4 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (uint8_t *)&showDate, strlen(showDate), 1000);
 80007da:	480b      	ldr	r0, [pc, #44]	; (8000808 <main+0x80>)
 80007dc:	f7ff fd08 	bl	80001f0 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e8:	4907      	ldr	r1, [pc, #28]	; (8000808 <main+0x80>)
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <main+0x7c>)
 80007ec:	f002 fa60 	bl	8002cb0 <HAL_UART_Transmit>
	  HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f000 fb6f 	bl	8000ed4 <HAL_Delay>

	  HAL_Delay(1000);
 80007f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fa:	f000 fb6b 	bl	8000ed4 <HAL_Delay>
	  get_time();
 80007fe:	e7dc      	b.n	80007ba <main+0x32>
 8000800:	2000008c 	.word	0x2000008c
 8000804:	200000f0 	.word	0x200000f0
 8000808:	200000ac 	.word	0x200000ac

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2230      	movs	r2, #48	; 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f003 fc24 	bl	8004068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <SystemClock_Config+0xdc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a2b      	ldr	r2, [pc, #172]	; (80008e8 <SystemClock_Config+0xdc>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <SystemClock_Config+0xdc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b26      	ldr	r3, [pc, #152]	; (80008ec <SystemClock_Config+0xe0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a25      	ldr	r2, [pc, #148]	; (80008ec <SystemClock_Config+0xe0>)
 8000856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <SystemClock_Config+0xe0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000868:	2306      	movs	r3, #6
 800086a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000870:	2301      	movs	r3, #1
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000874:	2310      	movs	r3, #16
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000878:	2302      	movs	r3, #2
 800087a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800087c:	2300      	movs	r3, #0
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000880:	2308      	movs	r3, #8
 8000882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000884:	23b4      	movs	r3, #180	; 0xb4
 8000886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	4618      	mov	r0, r3
 8000896:	f000 ff15 	bl	80016c4 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008a0:	f000 f846 	bl	8000930 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a4:	f000 febe 	bl	8001624 <HAL_PWREx_EnableOverDrive>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ae:	f000 f83f 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2302      	movs	r3, #2
 80008b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2105      	movs	r1, #5
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 f96f 	bl	8001bb4 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008dc:	f000 f828 	bl	8000930 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	; 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2027      	movs	r0, #39	; 0x27
 80008fa:	f000 fbea 	bl	80010d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80008fe:	2027      	movs	r0, #39	; 0x27
 8000900:	f000 fc03 	bl	800110a <HAL_NVIC_EnableIRQ>
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	printf("Alarm Callback Occurred!! \r\n");
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <HAL_RTC_AlarmAEventCallback+0x20>)
 8000912:	f003 faa9 	bl	8003e68 <puts>
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <HAL_RTC_AlarmAEventCallback+0x24>)
 800091a:	f000 fe68 	bl	80015ee <HAL_GPIO_TogglePin>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	08004ca8 	.word	0x08004ca8
 800092c:	40020400 	.word	0x40020400

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b090      	sub	sp, #64	; 0x40
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2228      	movs	r2, #40	; 0x28
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f003 fb83 	bl	8004068 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000962:	4b3a      	ldr	r3, [pc, #232]	; (8000a4c <MX_RTC_Init+0x110>)
 8000964:	4a3a      	ldr	r2, [pc, #232]	; (8000a50 <MX_RTC_Init+0x114>)
 8000966:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <MX_RTC_Init+0x110>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800096e:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <MX_RTC_Init+0x110>)
 8000970:	227f      	movs	r2, #127	; 0x7f
 8000972:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000974:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <MX_RTC_Init+0x110>)
 8000976:	22ff      	movs	r2, #255	; 0xff
 8000978:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800097a:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <MX_RTC_Init+0x110>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000980:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <MX_RTC_Init+0x110>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000986:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <MX_RTC_Init+0x110>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800098c:	482f      	ldr	r0, [pc, #188]	; (8000a4c <MX_RTC_Init+0x110>)
 800098e:	f001 fcb1 	bl	80022f4 <HAL_RTC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000998:	f7ff ffca 	bl	8000930 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800099c:	2312      	movs	r3, #18
 800099e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ba:	2201      	movs	r2, #1
 80009bc:	4619      	mov	r1, r3
 80009be:	4823      	ldr	r0, [pc, #140]	; (8000a4c <MX_RTC_Init+0x110>)
 80009c0:	f001 fd0e 	bl	80023e0 <HAL_RTC_SetTime>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80009ca:	f7ff ffb1 	bl	8000930 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009ce:	2301      	movs	r3, #1
 80009d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_OCTOBER;
 80009d4:	2310      	movs	r3, #16
 80009d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80009da:	2301      	movs	r3, #1
 80009dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x23;
 80009e0:	2323      	movs	r3, #35	; 0x23
 80009e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ea:	2201      	movs	r2, #1
 80009ec:	4619      	mov	r1, r3
 80009ee:	4817      	ldr	r0, [pc, #92]	; (8000a4c <MX_RTC_Init+0x110>)
 80009f0:	f001 fdee 	bl	80025d0 <HAL_RTC_SetDate>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80009fa:	f7ff ff99 	bl	8000930 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8000a06:	2310      	movs	r3, #16
 8000a08:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2201      	movs	r2, #1
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_RTC_Init+0x110>)
 8000a36:	f001 fe9f 	bl	8002778 <HAL_RTC_SetAlarm_IT>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000a40:	f7ff ff76 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3740      	adds	r7, #64	; 0x40
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000cc 	.word	0x200000cc
 8000a50:	40002800 	.word	0x40002800

08000a54 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	2230      	movs	r2, #48	; 0x30
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 faff 	bl	8004068 <memset>
  if(rtcHandle->Instance==RTC)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_RTC_MspInit+0x5c>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d119      	bne.n	8000aa8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a74:	2320      	movs	r3, #32
 8000a76:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fa76 	bl	8001f74 <HAL_RCCEx_PeriphCLKConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000a8e:	f7ff ff4f 	bl	8000930 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_RTC_MspInit+0x60>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2029      	movs	r0, #41	; 0x29
 8000a9e:	f000 fb18 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000aa2:	2029      	movs	r0, #41	; 0x29
 8000aa4:	f000 fb31 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3738      	adds	r7, #56	; 0x38
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40002800 	.word	0x40002800
 8000ab4:	42470e3c 	.word	0x42470e3c

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 f99e 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <USART3_IRQHandler+0x10>)
 8000b62:	f002 f937 	bl	8002dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000f0 	.word	0x200000f0

08000b70 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <RTC_Alarm_IRQHandler+0x10>)
 8000b76:	f001 ff41 	bl	80029fc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000cc 	.word	0x200000cc

08000b84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e00a      	b.n	8000bac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b96:	f3af 8000 	nop.w
 8000b9a:	4601      	mov	r1, r0
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	b2ca      	uxtb	r2, r1
 8000ba4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf0      	blt.n	8000b96 <_read+0x12>
  }

  return len;
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be6:	605a      	str	r2, [r3, #4]
  return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_isatty>:

int _isatty(int file)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f003 fa54 	bl	8004104 <__errno>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	220c      	movs	r2, #12
 8000c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20030000 	.word	0x20030000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	200000ec 	.word	0x200000ec
 8000c90:	20000288 	.word	0x20000288

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_USART3_UART_Init+0x4c>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <MX_USART3_UART_Init+0x50>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_USART3_UART_Init+0x4c>)
 8000cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_USART3_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_USART3_UART_Init+0x4c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_USART3_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_USART3_UART_Init+0x4c>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_USART3_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_USART3_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_USART3_UART_Init+0x4c>)
 8000cf0:	f001 ff91 	bl	8002c16 <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cfa:	f7ff fe19 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200000f0 	.word	0x200000f0
 8000d08:	40004800 	.word	0x40004800

08000d0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <HAL_UART_MspInit+0x84>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d12c      	bne.n	8000d88 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_UART_MspInit+0x88>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <HAL_UART_MspInit+0x88>)
 8000d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_UART_MspInit+0x88>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_UART_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <HAL_UART_MspInit+0x88>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_UART_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d84:	f000 fa6e 	bl	8001264 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	; 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40004800 	.word	0x40004800
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020c00 	.word	0x40020c00

08000d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000da2:	490e      	ldr	r1, [pc, #56]	; (8000ddc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db8:	4c0b      	ldr	r4, [pc, #44]	; (8000de8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc6:	f7ff ff65 	bl	8000c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dca:	f003 f9a1 	bl	8004110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dce:	f7ff fcdb 	bl	8000788 <main>
  bx  lr    
 8000dd2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000dd4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ddc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000de0:	08004d20 	.word	0x08004d20
  ldr r2, =_sbss
 8000de4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000de8:	20000284 	.word	0x20000284

08000dec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC_IRQHandler>
	...

08000df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <HAL_Init+0x40>)
 8000dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_Init+0x40>)
 8000e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <HAL_Init+0x40>)
 8000e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 f94f 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1e:	200f      	movs	r0, #15
 8000e20:	f000 f808 	bl	8000e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e24:	f7ff fe48 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023c00 	.word	0x40023c00

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x54>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x58>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f967 	bl	8001126 <HAL_SYSTICK_Config>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00e      	b.n	8000e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d80a      	bhi.n	8000e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f000 f92f 	bl	80010d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <HAL_InitTick+0x5c>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e000      	b.n	8000e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000010 	.word	0x20000010
 8000e90:	2000000c 	.word	0x2000000c

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x20>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000010 	.word	0x20000010
 8000eb8:	20000134 	.word	0x20000134

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_GetTick+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000134 	.word	0x20000134

08000ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000edc:	f7ff ffee 	bl	8000ebc <HAL_GetTick>
 8000ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eec:	d005      	beq.n	8000efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_Delay+0x44>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efa:	bf00      	nop
 8000efc:	f7ff ffde 	bl	8000ebc <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d8f7      	bhi.n	8000efc <HAL_Delay+0x28>
  {
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000010 	.word	0x20000010

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <__NVIC_EnableIRQ+0x38>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f7ff ff8e 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff29 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff3e 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff8e 	bl	8001010 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5d 	bl	8000fbc <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff31 	bl	8000f80 <__NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffa2 	bl	8001078 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff feb6 	bl	8000ebc <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d008      	beq.n	8001170 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e052      	b.n	8001216 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0216 	bic.w	r2, r2, #22
 800117e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800118e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	2b00      	cmp	r3, #0
 8001196:	d103      	bne.n	80011a0 <HAL_DMA_Abort+0x62>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119c:	2b00      	cmp	r3, #0
 800119e:	d007      	beq.n	80011b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0208 	bic.w	r2, r2, #8
 80011ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c0:	e013      	b.n	80011ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011c2:	f7ff fe7b 	bl	8000ebc <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	d90c      	bls.n	80011ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2220      	movs	r2, #32
 80011d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2203      	movs	r2, #3
 80011da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e015      	b.n	8001216 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e4      	bne.n	80011c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fc:	223f      	movs	r2, #63	; 0x3f
 80011fe:	409a      	lsls	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d004      	beq.n	800123c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e00c      	b.n	8001256 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2205      	movs	r2, #5
 8001240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e177      	b.n	8001570 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 8166 	bne.w	800156a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d005      	beq.n	80012b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d130      	bne.n	8001318 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ec:	2201      	movs	r2, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 0201 	and.w	r2, r3, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b03      	cmp	r3, #3
 8001322:	d017      	beq.n	8001354 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d123      	bne.n	80013a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	08da      	lsrs	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3208      	adds	r2, #8
 80013a2:	69b9      	ldr	r1, [r7, #24]
 80013a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80c0 	beq.w	800156a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b66      	ldr	r3, [pc, #408]	; (8001588 <HAL_GPIO_Init+0x324>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a65      	ldr	r2, [pc, #404]	; (8001588 <HAL_GPIO_Init+0x324>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b63      	ldr	r3, [pc, #396]	; (8001588 <HAL_GPIO_Init+0x324>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001406:	4a61      	ldr	r2, [pc, #388]	; (800158c <HAL_GPIO_Init+0x328>)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	220f      	movs	r2, #15
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a58      	ldr	r2, [pc, #352]	; (8001590 <HAL_GPIO_Init+0x32c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d037      	beq.n	80014a2 <HAL_GPIO_Init+0x23e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a57      	ldr	r2, [pc, #348]	; (8001594 <HAL_GPIO_Init+0x330>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d031      	beq.n	800149e <HAL_GPIO_Init+0x23a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a56      	ldr	r2, [pc, #344]	; (8001598 <HAL_GPIO_Init+0x334>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d02b      	beq.n	800149a <HAL_GPIO_Init+0x236>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a55      	ldr	r2, [pc, #340]	; (800159c <HAL_GPIO_Init+0x338>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d025      	beq.n	8001496 <HAL_GPIO_Init+0x232>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a54      	ldr	r2, [pc, #336]	; (80015a0 <HAL_GPIO_Init+0x33c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d01f      	beq.n	8001492 <HAL_GPIO_Init+0x22e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a53      	ldr	r2, [pc, #332]	; (80015a4 <HAL_GPIO_Init+0x340>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d019      	beq.n	800148e <HAL_GPIO_Init+0x22a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <HAL_GPIO_Init+0x344>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d013      	beq.n	800148a <HAL_GPIO_Init+0x226>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a51      	ldr	r2, [pc, #324]	; (80015ac <HAL_GPIO_Init+0x348>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d00d      	beq.n	8001486 <HAL_GPIO_Init+0x222>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a50      	ldr	r2, [pc, #320]	; (80015b0 <HAL_GPIO_Init+0x34c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d007      	beq.n	8001482 <HAL_GPIO_Init+0x21e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4f      	ldr	r2, [pc, #316]	; (80015b4 <HAL_GPIO_Init+0x350>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_GPIO_Init+0x21a>
 800147a:	2309      	movs	r3, #9
 800147c:	e012      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 800147e:	230a      	movs	r3, #10
 8001480:	e010      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 8001482:	2308      	movs	r3, #8
 8001484:	e00e      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 8001486:	2307      	movs	r3, #7
 8001488:	e00c      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 800148a:	2306      	movs	r3, #6
 800148c:	e00a      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 800148e:	2305      	movs	r3, #5
 8001490:	e008      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 8001492:	2304      	movs	r3, #4
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 8001496:	2303      	movs	r3, #3
 8001498:	e004      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 800149a:	2302      	movs	r3, #2
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 80014a2:	2300      	movs	r3, #0
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	f002 0203 	and.w	r2, r2, #3
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	4093      	lsls	r3, r2
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b4:	4935      	ldr	r1, [pc, #212]	; (800158c <HAL_GPIO_Init+0x328>)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <HAL_GPIO_Init+0x354>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e6:	4a34      	ldr	r2, [pc, #208]	; (80015b8 <HAL_GPIO_Init+0x354>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ec:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <HAL_GPIO_Init+0x354>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001510:	4a29      	ldr	r2, [pc, #164]	; (80015b8 <HAL_GPIO_Init+0x354>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <HAL_GPIO_Init+0x354>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800153a:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <HAL_GPIO_Init+0x354>)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_GPIO_Init+0x354>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <HAL_GPIO_Init+0x354>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3301      	adds	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	2b0f      	cmp	r3, #15
 8001574:	f67f ae84 	bls.w	8001280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	40013800 	.word	0x40013800
 8001590:	40020000 	.word	0x40020000
 8001594:	40020400 	.word	0x40020400
 8001598:	40020800 	.word	0x40020800
 800159c:	40020c00 	.word	0x40020c00
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40021400 	.word	0x40021400
 80015a8:	40021800 	.word	0x40021800
 80015ac:	40021c00 	.word	0x40021c00
 80015b0:	40022000 	.word	0x40022000
 80015b4:	40022400 	.word	0x40022400
 80015b8:	40013c00 	.word	0x40013c00

080015bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
 80015c8:	4613      	mov	r3, r2
 80015ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d2:	887a      	ldrh	r2, [r7, #2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d8:	e003      	b.n	80015e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015da:	887b      	ldrh	r3, [r7, #2]
 80015dc:	041a      	lsls	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	619a      	str	r2, [r3, #24]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001600:	887a      	ldrh	r2, [r7, #2]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4013      	ands	r3, r2
 8001606:	041a      	lsls	r2, r3, #16
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43d9      	mvns	r1, r3
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	400b      	ands	r3, r1
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	619a      	str	r2, [r3, #24]
}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001650:	f7ff fc34 	bl	8000ebc <HAL_GetTick>
 8001654:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001656:	e009      	b.n	800166c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001658:	f7ff fc30 	bl	8000ebc <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001666:	d901      	bls.n	800166c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e01f      	b.n	80016ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <HAL_PWREx_EnableOverDrive+0x98>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001678:	d1ee      	bne.n	8001658 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001680:	f7ff fc1c 	bl	8000ebc <HAL_GetTick>
 8001684:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001686:	e009      	b.n	800169c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001688:	f7ff fc18 	bl	8000ebc <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001696:	d901      	bls.n	800169c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e007      	b.n	80016ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <HAL_PWREx_EnableOverDrive+0x98>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016a8:	d1ee      	bne.n	8001688 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	420e0040 	.word	0x420e0040
 80016bc:	40007000 	.word	0x40007000
 80016c0:	420e0044 	.word	0x420e0044

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e267      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d075      	beq.n	80017ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016e2:	4b88      	ldr	r3, [pc, #544]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d00c      	beq.n	8001708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ee:	4b85      	ldr	r3, [pc, #532]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d112      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fa:	4b82      	ldr	r3, [pc, #520]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001706:	d10b      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b7e      	ldr	r3, [pc, #504]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d05b      	beq.n	80017cc <HAL_RCC_OscConfig+0x108>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d157      	bne.n	80017cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e242      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x74>
 800172a:	4b76      	ldr	r3, [pc, #472]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a75      	ldr	r2, [pc, #468]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x98>
 8001742:	4b70      	ldr	r3, [pc, #448]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a6f      	ldr	r2, [pc, #444]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b6d      	ldr	r3, [pc, #436]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a6c      	ldr	r2, [pc, #432]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 800175c:	4b69      	ldr	r3, [pc, #420]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a68      	ldr	r2, [pc, #416]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b66      	ldr	r3, [pc, #408]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a65      	ldr	r2, [pc, #404]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fb9e 	bl	8000ebc <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fb9a 	bl	8000ebc <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e207      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xc0>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fb8a 	bl	8000ebc <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fb86 	bl	8000ebc <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1f3      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	4b51      	ldr	r3, [pc, #324]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0xe8>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d063      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017da:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e6:	4b47      	ldr	r3, [pc, #284]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d11c      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f2:	4b44      	ldr	r3, [pc, #272]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	4b41      	ldr	r3, [pc, #260]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e1c7      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4937      	ldr	r1, [pc, #220]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	e03a      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001834:	4b34      	ldr	r3, [pc, #208]	; (8001908 <HAL_RCC_OscConfig+0x244>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff fb3f 	bl	8000ebc <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff fb3b 	bl	8000ebc <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1a8      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4925      	ldr	r1, [pc, #148]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_RCC_OscConfig+0x244>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fb1e 	bl	8000ebc <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff fb1a 	bl	8000ebc <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e187      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d036      	beq.n	800191c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d016      	beq.n	80018e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_RCC_OscConfig+0x248>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff fafe 	bl	8000ebc <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff fafa 	bl	8000ebc <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e167      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80018d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x200>
 80018e2:	e01b      	b.n	800191c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_OscConfig+0x248>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fae7 	bl	8000ebc <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f0:	e00e      	b.n	8001910 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff fae3 	bl	8000ebc <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d907      	bls.n	8001910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e150      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
 8001904:	40023800 	.word	0x40023800
 8001908:	42470000 	.word	0x42470000
 800190c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	4b88      	ldr	r3, [pc, #544]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1ea      	bne.n	80018f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8097 	beq.w	8001a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b81      	ldr	r3, [pc, #516]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10f      	bne.n	800195a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b7d      	ldr	r3, [pc, #500]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a7c      	ldr	r2, [pc, #496]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b7a      	ldr	r3, [pc, #488]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001956:	2301      	movs	r3, #1
 8001958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195a:	4b77      	ldr	r3, [pc, #476]	; (8001b38 <HAL_RCC_OscConfig+0x474>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d118      	bne.n	8001998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001966:	4b74      	ldr	r3, [pc, #464]	; (8001b38 <HAL_RCC_OscConfig+0x474>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a73      	ldr	r2, [pc, #460]	; (8001b38 <HAL_RCC_OscConfig+0x474>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001972:	f7ff faa3 	bl	8000ebc <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197a:	f7ff fa9f 	bl	8000ebc <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e10c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_RCC_OscConfig+0x474>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x2ea>
 80019a0:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a4:	4a63      	ldr	r2, [pc, #396]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6713      	str	r3, [r2, #112]	; 0x70
 80019ac:	e01c      	b.n	80019e8 <HAL_RCC_OscConfig+0x324>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x30c>
 80019b6:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	4a5e      	ldr	r2, [pc, #376]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6713      	str	r3, [r2, #112]	; 0x70
 80019c2:	4b5c      	ldr	r3, [pc, #368]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c6:	4a5b      	ldr	r2, [pc, #364]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6713      	str	r3, [r2, #112]	; 0x70
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0x324>
 80019d0:	4b58      	ldr	r3, [pc, #352]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d4:	4a57      	ldr	r2, [pc, #348]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	6713      	str	r3, [r2, #112]	; 0x70
 80019dc:	4b55      	ldr	r3, [pc, #340]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	4a54      	ldr	r2, [pc, #336]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019e2:	f023 0304 	bic.w	r3, r3, #4
 80019e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d015      	beq.n	8001a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff fa64 	bl	8000ebc <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff fa60 	bl	8000ebc <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0cb      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0e:	4b49      	ldr	r3, [pc, #292]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0ee      	beq.n	80019f8 <HAL_RCC_OscConfig+0x334>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fa4e 	bl	8000ebc <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7ff fa4a 	bl	8000ebc <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0b5      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ee      	bne.n	8001a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4c:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	4a38      	ldr	r2, [pc, #224]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80a1 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d05c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d141      	bne.n	8001afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fa1e 	bl	8000ebc <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff fa1a 	bl	8000ebc <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e087      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69da      	ldr	r2, [r3, #28]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	019b      	lsls	r3, r3, #6
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	3b01      	subs	r3, #1
 8001abc:	041b      	lsls	r3, r3, #16
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	491b      	ldr	r1, [pc, #108]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f9f3 	bl	8000ebc <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff f9ef 	bl	8000ebc <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e05c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x416>
 8001af8:	e054      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff f9dc 	bl	8000ebc <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f9d8 	bl	8000ebc <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e045      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x444>
 8001b26:	e03d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e038      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_RCC_OscConfig+0x4ec>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d028      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d121      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d11a      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b70:	4013      	ands	r3, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d111      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	085b      	lsrs	r3, r3, #1
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0cc      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d90c      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b65      	ldr	r3, [pc, #404]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b63      	ldr	r3, [pc, #396]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0b8      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c08:	4b59      	ldr	r3, [pc, #356]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a58      	ldr	r2, [pc, #352]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c20:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2c:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	494d      	ldr	r1, [pc, #308]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d044      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d119      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e07f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e06f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e067      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4934      	ldr	r1, [pc, #208]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7ff f90a 	bl	8000ebc <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff f906 	bl	8000ebc <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e04f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d20c      	bcs.n	8001cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e032      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4916      	ldr	r1, [pc, #88]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	490e      	ldr	r1, [pc, #56]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d3a:	f000 f821 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	490a      	ldr	r1, [pc, #40]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	5ccb      	ldrb	r3, [r1, r3]
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f86a 	bl	8000e34 <HAL_InitTick>

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023c00 	.word	0x40023c00
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08004cc4 	.word	0x08004cc4
 8001d78:	20000008 	.word	0x20000008
 8001d7c:	2000000c 	.word	0x2000000c

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d84:	b090      	sub	sp, #64	; 0x40
 8001d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d90:	2300      	movs	r3, #0
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d98:	4b59      	ldr	r3, [pc, #356]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d00d      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	f200 80a1 	bhi.w	8001eec <HAL_RCC_GetSysClockFreq+0x16c>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x3a>
 8001db2:	e09b      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x184>)
 8001db6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001db8:	e09b      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dba:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dbe:	e098      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dca:	4b4d      	ldr	r3, [pc, #308]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d028      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd6:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	099b      	lsrs	r3, r3, #6
 8001ddc:	2200      	movs	r2, #0
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	627a      	str	r2, [r7, #36]	; 0x24
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001de8:	2100      	movs	r1, #0
 8001dea:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dec:	fb03 f201 	mul.w	r2, r3, r1
 8001df0:	2300      	movs	r3, #0
 8001df2:	fb00 f303 	mul.w	r3, r0, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	4a43      	ldr	r2, [pc, #268]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dfa:	fba0 1202 	umull	r1, r2, r0, r2
 8001dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e00:	460a      	mov	r2, r1
 8001e02:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e06:	4413      	add	r3, r2
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	61fa      	str	r2, [r7, #28]
 8001e12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e1a:	f7fe fa41 	bl	80002a0 <__aeabi_uldivmod>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4613      	mov	r3, r2
 8001e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e26:	e053      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	099b      	lsrs	r3, r3, #6
 8001e2e:	2200      	movs	r2, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	617a      	str	r2, [r7, #20]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e3a:	f04f 0b00 	mov.w	fp, #0
 8001e3e:	4652      	mov	r2, sl
 8001e40:	465b      	mov	r3, fp
 8001e42:	f04f 0000 	mov.w	r0, #0
 8001e46:	f04f 0100 	mov.w	r1, #0
 8001e4a:	0159      	lsls	r1, r3, #5
 8001e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e50:	0150      	lsls	r0, r2, #5
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	ebb2 080a 	subs.w	r8, r2, sl
 8001e5a:	eb63 090b 	sbc.w	r9, r3, fp
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e72:	ebb2 0408 	subs.w	r4, r2, r8
 8001e76:	eb63 0509 	sbc.w	r5, r3, r9
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	00eb      	lsls	r3, r5, #3
 8001e84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e88:	00e2      	lsls	r2, r4, #3
 8001e8a:	4614      	mov	r4, r2
 8001e8c:	461d      	mov	r5, r3
 8001e8e:	eb14 030a 	adds.w	r3, r4, sl
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	eb45 030b 	adc.w	r3, r5, fp
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	028b      	lsls	r3, r1, #10
 8001eaa:	4621      	mov	r1, r4
 8001eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	028a      	lsls	r2, r1, #10
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	60fa      	str	r2, [r7, #12]
 8001ec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ec4:	f7fe f9ec 	bl	80002a0 <__aeabi_uldivmod>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4613      	mov	r3, r2
 8001ece:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	0c1b      	lsrs	r3, r3, #16
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	3301      	adds	r3, #1
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001eea:	e002      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3740      	adds	r7, #64	; 0x40
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	00f42400 	.word	0x00f42400
 8001f08:	017d7840 	.word	0x017d7840

08001f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f28:	f7ff fff0 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	0a9b      	lsrs	r3, r3, #10
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4903      	ldr	r1, [pc, #12]	; (8001f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	08004cd4 	.word	0x08004cd4

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f50:	f7ff ffdc 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0b5b      	lsrs	r3, r3, #13
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4903      	ldr	r1, [pc, #12]	; (8001f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	08004cd4 	.word	0x08004cd4

08001f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d105      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d075      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001fa8:	4b91      	ldr	r3, [pc, #580]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fae:	f7fe ff85 	bl	8000ebc <HAL_GetTick>
 8001fb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001fb6:	f7fe ff81 	bl	8000ebc <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e189      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fc8:	4b8a      	ldr	r3, [pc, #552]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f0      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	019a      	lsls	r2, r3, #6
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	071b      	lsls	r3, r3, #28
 8001fec:	4981      	ldr	r1, [pc, #516]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01f      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002000:	4b7c      	ldr	r3, [pc, #496]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002006:	0f1b      	lsrs	r3, r3, #28
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	019a      	lsls	r2, r3, #6
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	061b      	lsls	r3, r3, #24
 800201a:	431a      	orrs	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	071b      	lsls	r3, r3, #28
 8002020:	4974      	ldr	r1, [pc, #464]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002028:	4b72      	ldr	r3, [pc, #456]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800202a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800202e:	f023 021f 	bic.w	r2, r3, #31
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	3b01      	subs	r3, #1
 8002038:	496e      	ldr	r1, [pc, #440]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00d      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	019a      	lsls	r2, r3, #6
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	061b      	lsls	r3, r3, #24
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	071b      	lsls	r3, r3, #28
 8002060:	4964      	ldr	r1, [pc, #400]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002068:	4b61      	ldr	r3, [pc, #388]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800206e:	f7fe ff25 	bl	8000ebc <HAL_GetTick>
 8002072:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002076:	f7fe ff21 	bl	8000ebc <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e129      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002088:	4b5a      	ldr	r3, [pc, #360]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d079      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80020ac:	4b52      	ldr	r3, [pc, #328]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020b2:	f7fe ff03 	bl	8000ebc <HAL_GetTick>
 80020b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80020ba:	f7fe feff 	bl	8000ebc <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e107      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020cc:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020d8:	d0ef      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d020      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020e6:	4b43      	ldr	r3, [pc, #268]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ec:	0f1b      	lsrs	r3, r3, #28
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	019a      	lsls	r2, r3, #6
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	061b      	lsls	r3, r3, #24
 8002100:	431a      	orrs	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	071b      	lsls	r3, r3, #28
 8002106:	493b      	ldr	r1, [pc, #236]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800210e:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002114:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	3b01      	subs	r3, #1
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	4934      	ldr	r1, [pc, #208]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01e      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002134:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	0e1b      	lsrs	r3, r3, #24
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	019a      	lsls	r2, r3, #6
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	061b      	lsls	r3, r3, #24
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	071b      	lsls	r3, r3, #28
 8002154:	4927      	ldr	r1, [pc, #156]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800215e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002162:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	4922      	ldr	r1, [pc, #136]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002172:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002178:	f7fe fea0 	bl	8000ebc <HAL_GetTick>
 800217c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002180:	f7fe fe9c 	bl	8000ebc <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e0a4      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800219a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800219e:	d1ef      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 808b 	beq.w	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80021d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021d6:	f7fe fe71 	bl	8000ebc <HAL_GetTick>
 80021da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021dc:	e010      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021de:	f7fe fe6d 	bl	8000ebc <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d909      	bls.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e075      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80021f0:	42470068 	.word	0x42470068
 80021f4:	40023800 	.word	0x40023800
 80021f8:	42470070 	.word	0x42470070
 80021fc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002200:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0e8      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800220c:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002214:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d02f      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	429a      	cmp	r2, r3
 8002228:	d028      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800222a:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002232:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002234:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800223a:	4b2c      	ldr	r3, [pc, #176]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002240:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d114      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002252:	f7fe fe33 	bl	8000ebc <HAL_GetTick>
 8002256:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7fe fe2f 	bl	8000ebc <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e035      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0ee      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002288:	d10d      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800229a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800229e:	4912      	ldr	r1, [pc, #72]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]
 80022a4:	e005      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80022ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022b0:	6093      	str	r3, [r2, #8]
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80022b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022be:	490a      	ldr	r1, [pc, #40]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80022d8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40007000 	.word	0x40007000
 80022e8:	40023800 	.word	0x40023800
 80022ec:	42470e40 	.word	0x42470e40
 80022f0:	424711e0 	.word	0x424711e0

080022f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e066      	b.n	80023d8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7f5b      	ldrb	r3, [r3, #29]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7fe fb9a 	bl	8000a54 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	22ca      	movs	r2, #202	; 0xca
 800232c:	625a      	str	r2, [r3, #36]	; 0x24
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2253      	movs	r2, #83	; 0x53
 8002334:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fbce 	bl	8002ad8 <RTC_EnterInitMode>
 800233c:	4603      	mov	r3, r0
 800233e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d12c      	bne.n	80023a0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002358:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6899      	ldr	r1, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68d2      	ldr	r2, [r2, #12]
 8002380:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6919      	ldr	r1, [r3, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	041a      	lsls	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fbd5 	bl	8002b46 <RTC_ExitInitMode>
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d113      	bne.n	80023ce <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	22ff      	movs	r2, #255	; 0xff
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	7f1b      	ldrb	r3, [r3, #28]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_RTC_SetTime+0x1c>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e087      	b.n	800250c <HAL_RTC_SetTime+0x12c>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2202      	movs	r2, #2
 8002406:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d126      	bne.n	800245c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2200      	movs	r2, #0
 8002420:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fbb2 	bl	8002b90 <RTC_ByteToBcd2>
 800242c:	4603      	mov	r3, r0
 800242e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	785b      	ldrb	r3, [r3, #1]
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fbab 	bl	8002b90 <RTC_ByteToBcd2>
 800243a:	4603      	mov	r3, r0
 800243c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800243e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	789b      	ldrb	r3, [r3, #2]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fba3 	bl	8002b90 <RTC_ByteToBcd2>
 800244a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800244c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	78db      	ldrb	r3, [r3, #3]
 8002454:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e018      	b.n	800248e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d102      	bne.n	8002470 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2200      	movs	r2, #0
 800246e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	785b      	ldrb	r3, [r3, #1]
 800247a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800247c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002482:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	78db      	ldrb	r3, [r3, #3]
 8002488:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	22ca      	movs	r2, #202	; 0xca
 8002494:	625a      	str	r2, [r3, #36]	; 0x24
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2253      	movs	r2, #83	; 0x53
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fb1a 	bl	8002ad8 <RTC_EnterInitMode>
 80024a4:	4603      	mov	r3, r0
 80024a6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d120      	bne.n	80024f0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80024b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80024bc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6899      	ldr	r1, [r3, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	431a      	orrs	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fb2d 	bl	8002b46 <RTC_ExitInitMode>
 80024ec:	4603      	mov	r3, r0
 80024ee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	22ff      	movs	r2, #255	; 0xff
 8002502:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	771a      	strb	r2, [r3, #28]

  return status;
 800250a:	7cfb      	ldrb	r3, [r7, #19]
}
 800250c:	4618      	mov	r0, r3
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	bd90      	pop	{r4, r7, pc}

08002514 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002546:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800254a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	0c1b      	lsrs	r3, r3, #16
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002556:	b2da      	uxtb	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002566:	b2da      	uxtb	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002574:	b2da      	uxtb	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	0d9b      	lsrs	r3, r3, #22
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d11a      	bne.n	80025c6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fb18 	bl	8002bca <RTC_Bcd2ToByte>
 800259a:	4603      	mov	r3, r0
 800259c:	461a      	mov	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fb0f 	bl	8002bca <RTC_Bcd2ToByte>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	789b      	ldrb	r3, [r3, #2]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fb06 	bl	8002bca <RTC_Bcd2ToByte>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	7f1b      	ldrb	r3, [r3, #28]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_RTC_SetDate+0x1c>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e071      	b.n	80026d0 <HAL_RTC_SetDate+0x100>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2202      	movs	r2, #2
 80025f6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10e      	bne.n	800261c <HAL_RTC_SetDate+0x4c>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	785b      	ldrb	r3, [r3, #1]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	785b      	ldrb	r3, [r3, #1]
 800260e:	f023 0310 	bic.w	r3, r3, #16
 8002612:	b2db      	uxtb	r3, r3
 8002614:	330a      	adds	r3, #10
 8002616:	b2da      	uxtb	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11c      	bne.n	800265c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	78db      	ldrb	r3, [r3, #3]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fab2 	bl	8002b90 <RTC_ByteToBcd2>
 800262c:	4603      	mov	r3, r0
 800262e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 faab 	bl	8002b90 <RTC_ByteToBcd2>
 800263a:	4603      	mov	r3, r0
 800263c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800263e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	789b      	ldrb	r3, [r3, #2]
 8002644:	4618      	mov	r0, r3
 8002646:	f000 faa3 	bl	8002b90 <RTC_ByteToBcd2>
 800264a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800264c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e00e      	b.n	800267a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	78db      	ldrb	r3, [r3, #3]
 8002660:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002668:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800266e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	22ca      	movs	r2, #202	; 0xca
 8002680:	625a      	str	r2, [r3, #36]	; 0x24
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2253      	movs	r2, #83	; 0x53
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fa24 	bl	8002ad8 <RTC_EnterInitMode>
 8002690:	4603      	mov	r3, r0
 8002692:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10c      	bne.n	80026b4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80026a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80026a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fa4b 	bl	8002b46 <RTC_ExitInitMode>
 80026b0:	4603      	mov	r3, r0
 80026b2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	22ff      	movs	r2, #255	; 0xff
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	771a      	strb	r2, [r3, #28]

  return status;
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	371c      	adds	r7, #28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd90      	pop	{r4, r7, pc}

080026d8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80026f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80026f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	0c1b      	lsrs	r3, r3, #16
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	0a1b      	lsrs	r3, r3, #8
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800271a:	b2da      	uxtb	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	0b5b      	lsrs	r3, r3, #13
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	b2da      	uxtb	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11a      	bne.n	800276c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	78db      	ldrb	r3, [r3, #3]
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fa45 	bl	8002bca <RTC_Bcd2ToByte>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fa3c 	bl	8002bca <RTC_Bcd2ToByte>
 8002752:	4603      	mov	r3, r0
 8002754:	461a      	mov	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	789b      	ldrb	r3, [r3, #2]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fa33 	bl	8002bca <RTC_Bcd2ToByte>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002784:	4b9a      	ldr	r3, [pc, #616]	; (80029f0 <HAL_RTC_SetAlarm_IT+0x278>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a9a      	ldr	r2, [pc, #616]	; (80029f4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0adb      	lsrs	r3, r3, #11
 8002790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	7f1b      	ldrb	r3, [r3, #28]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_RTC_SetAlarm_IT+0x36>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e11c      	b.n	80029e8 <HAL_RTC_SetAlarm_IT+0x270>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2202      	movs	r2, #2
 80027b8:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d137      	bne.n	8002830 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2200      	movs	r2, #0
 80027d2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 f9d9 	bl	8002b90 <RTC_ByteToBcd2>
 80027de:	4603      	mov	r3, r0
 80027e0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	785b      	ldrb	r3, [r3, #1]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f9d2 	bl	8002b90 <RTC_ByteToBcd2>
 80027ec:	4603      	mov	r3, r0
 80027ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80027f0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	789b      	ldrb	r3, [r3, #2]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f9ca 	bl	8002b90 <RTC_ByteToBcd2>
 80027fc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80027fe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	78db      	ldrb	r3, [r3, #3]
 8002806:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002808:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f9bc 	bl	8002b90 <RTC_ByteToBcd2>
 8002818:	4603      	mov	r3, r0
 800281a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800281c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002824:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800282a:	4313      	orrs	r3, r2
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	e023      	b.n	8002878 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2200      	movs	r2, #0
 8002842:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002850:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002856:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	78db      	ldrb	r3, [r3, #3]
 800285c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800285e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002866:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002868:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800286e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002874:	4313      	orrs	r3, r2
 8002876:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	22ca      	movs	r2, #202	; 0xca
 800288a:	625a      	str	r2, [r3, #36]	; 0x24
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2253      	movs	r2, #83	; 0x53
 8002892:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289c:	d141      	bne.n	8002922 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ac:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80028be:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	1e5a      	subs	r2, r3, #1
 80028c4:	617a      	str	r2, [r7, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10b      	bne.n	80028e2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	22ff      	movs	r2, #255	; 0xff
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2203      	movs	r2, #3
 80028d6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e082      	b.n	80029e8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0e7      	beq.n	80028c0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800290e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	e04b      	b.n	80029ba <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002930:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002942:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RTC_SetAlarm_IT+0x278>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	0adb      	lsrs	r3, r3, #11
 8002950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	1e5a      	subs	r2, r3, #1
 800295e:	617a      	str	r2, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	22ff      	movs	r2, #255	; 0xff
 800296a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2203      	movs	r2, #3
 8002970:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e035      	b.n	80029e8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0e7      	beq.n	800295a <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_RTC_SetAlarm_IT+0x280>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <HAL_RTC_SetAlarm_IT+0x280>)
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c4:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <HAL_RTC_SetAlarm_IT+0x280>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <HAL_RTC_SetAlarm_IT+0x280>)
 80029cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	22ff      	movs	r2, #255	; 0xff
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3724      	adds	r7, #36	; 0x24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd90      	pop	{r4, r7, pc}
 80029f0:	20000008 	.word	0x20000008
 80029f4:	10624dd3 	.word	0x10624dd3
 80029f8:	40013c00 	.word	0x40013c00

080029fc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d012      	beq.n	8002a38 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00b      	beq.n	8002a38 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fd ff71 	bl	8000908 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002a36:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d012      	beq.n	8002a6c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00b      	beq.n	8002a6c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f8d4 	bl	8002c02 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002a6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002a6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a72:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	775a      	strb	r2, [r3, #29]
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40013c00 	.word	0x40013c00

08002a88 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aa4:	f7fe fa0a 	bl	8000ebc <HAL_GetTick>
 8002aa8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002aaa:	e009      	b.n	8002ac0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002aac:	f7fe fa06 	bl	8000ebc <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aba:	d901      	bls.n	8002ac0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e007      	b.n	8002ad0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0ee      	beq.n	8002aac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d122      	bne.n	8002b3c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b04:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b06:	f7fe f9d9 	bl	8000ebc <HAL_GetTick>
 8002b0a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b0c:	e00c      	b.n	8002b28 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b0e:	f7fe f9d5 	bl	8000ebc <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b1c:	d904      	bls.n	8002b28 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2204      	movs	r2, #4
 8002b22:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d102      	bne.n	8002b3c <RTC_EnterInitMode+0x64>
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d1e8      	bne.n	8002b0e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b60:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff89 	bl	8002a88 <HAL_RTC_WaitForSynchro>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002b9e:	e005      	b.n	8002bac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	3b0a      	subs	r3, #10
 8002baa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	2b09      	cmp	r3, #9
 8002bb0:	d8f6      	bhi.n	8002ba0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	b2db      	uxtb	r3, r3
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b085      	sub	sp, #20
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	0092      	lsls	r2, r2, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b2db      	uxtb	r3, r3
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e03f      	b.n	8002ca8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d106      	bne.n	8002c42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7fe f865 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2224      	movs	r2, #36	; 0x24
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fd7a 	bl	8003754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d17c      	bne.n	8002dca <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_UART_Transmit+0x2c>
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e075      	b.n	8002dcc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_UART_Transmit+0x3e>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e06e      	b.n	8002dcc <HAL_UART_Transmit+0x11c>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2221      	movs	r2, #33	; 0x21
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d04:	f7fe f8da 	bl	8000ebc <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	88fa      	ldrh	r2, [r7, #6]
 8002d0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1e:	d108      	bne.n	8002d32 <HAL_UART_Transmit+0x82>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d104      	bne.n	8002d32 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e003      	b.n	8002d3a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d42:	e02a      	b.n	8002d9a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 faf8 	bl	8003344 <UART_WaitOnFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e036      	b.n	8002dcc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10b      	bne.n	8002d7c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d72:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	3302      	adds	r3, #2
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	e007      	b.n	8002d8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	781a      	ldrb	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1cf      	bne.n	8002d44 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2200      	movs	r2, #0
 8002dac:	2140      	movs	r1, #64	; 0x40
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fac8 	bl	8003344 <UART_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e006      	b.n	8002dcc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e000      	b.n	8002dcc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002dca:	2302      	movs	r3, #2
  }
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3720      	adds	r7, #32
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b0ba      	sub	sp, #232	; 0xe8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10f      	bne.n	8002e3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <HAL_UART_IRQHandler+0x66>
 8002e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fbd3 	bl	80035de <UART_Receive_IT>
      return;
 8002e38:	e256      	b.n	80032e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80de 	beq.w	8003000 <HAL_UART_IRQHandler+0x22c>
 8002e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80d1 	beq.w	8003000 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <HAL_UART_IRQHandler+0xae>
 8002e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f043 0201 	orr.w	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_UART_IRQHandler+0xd2>
 8002e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f043 0202 	orr.w	r2, r3, #2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_UART_IRQHandler+0xf6>
 8002eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f043 0204 	orr.w	r2, r3, #4
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d011      	beq.n	8002efa <HAL_UART_IRQHandler+0x126>
 8002ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f043 0208 	orr.w	r2, r3, #8
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 81ed 	beq.w	80032de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_UART_IRQHandler+0x14e>
 8002f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fb5e 	bl	80035de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d103      	bne.n	8002f4e <HAL_UART_IRQHandler+0x17a>
 8002f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d04f      	beq.n	8002fee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fa66 	bl	8003420 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b40      	cmp	r3, #64	; 0x40
 8002f60:	d141      	bne.n	8002fe6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3314      	adds	r3, #20
 8002f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3314      	adds	r3, #20
 8002f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1d9      	bne.n	8002f62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d013      	beq.n	8002fde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	4a7d      	ldr	r2, [pc, #500]	; (80031b0 <HAL_UART_IRQHandler+0x3dc>)
 8002fbc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe f92b 	bl	800121e <HAL_DMA_Abort_IT>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d016      	beq.n	8002ffc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	e00e      	b.n	8002ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f99a 	bl	8003318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe4:	e00a      	b.n	8002ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f996 	bl	8003318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	e006      	b.n	8002ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f992 	bl	8003318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ffa:	e170      	b.n	80032de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	bf00      	nop
    return;
 8002ffe:	e16e      	b.n	80032de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	2b01      	cmp	r3, #1
 8003006:	f040 814a 	bne.w	800329e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800300a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8143 	beq.w	800329e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 813c 	beq.w	800329e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	f040 80b4 	bne.w	80031b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8140 	beq.w	80032e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800306a:	429a      	cmp	r2, r3
 800306c:	f080 8139 	bcs.w	80032e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003076:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003082:	f000 8088 	beq.w	8003196 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	330c      	adds	r3, #12
 800308c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800309c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1d9      	bne.n	8003086 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3314      	adds	r3, #20
 80030d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3314      	adds	r3, #20
 80030f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003102:	e841 2300 	strex	r3, r2, [r1]
 8003106:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1e1      	bne.n	80030d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3314      	adds	r3, #20
 8003114:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800311e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3314      	adds	r3, #20
 800312e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003132:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003134:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003138:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e3      	bne.n	800310e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	330c      	adds	r3, #12
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315e:	e853 3f00 	ldrex	r3, [r3]
 8003162:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003166:	f023 0310 	bic.w	r3, r3, #16
 800316a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	330c      	adds	r3, #12
 8003174:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003178:	65ba      	str	r2, [r7, #88]	; 0x58
 800317a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800317e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003180:	e841 2300 	strex	r3, r2, [r1]
 8003184:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1e3      	bne.n	8003154 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd ffd4 	bl	800113e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800319e:	b29b      	uxth	r3, r3
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	4619      	mov	r1, r3
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f8c0 	bl	800332c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031ac:	e099      	b.n	80032e2 <HAL_UART_IRQHandler+0x50e>
 80031ae:	bf00      	nop
 80031b0:	080034e7 	.word	0x080034e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031bc:	b29b      	uxth	r3, r3
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 808b 	beq.w	80032e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80031d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8086 	beq.w	80032e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	330c      	adds	r3, #12
 80031e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80031fe:	647a      	str	r2, [r7, #68]	; 0x44
 8003200:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800320c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e3      	bne.n	80031da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3314      	adds	r3, #20
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	623b      	str	r3, [r7, #32]
   return(result);
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3314      	adds	r3, #20
 8003232:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003236:	633a      	str	r2, [r7, #48]	; 0x30
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800323c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e3      	bne.n	8003212 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	330c      	adds	r3, #12
 800325e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	60fb      	str	r3, [r7, #12]
   return(result);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0310 	bic.w	r3, r3, #16
 800326e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	330c      	adds	r3, #12
 8003278:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800327c:	61fa      	str	r2, [r7, #28]
 800327e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	69b9      	ldr	r1, [r7, #24]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	617b      	str	r3, [r7, #20]
   return(result);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e3      	bne.n	8003258 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f848 	bl	800332c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800329c:	e023      	b.n	80032e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_UART_IRQHandler+0x4ea>
 80032aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f929 	bl	800350e <UART_Transmit_IT>
    return;
 80032bc:	e014      	b.n	80032e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00e      	beq.n	80032e8 <HAL_UART_IRQHandler+0x514>
 80032ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f969 	bl	80035ae <UART_EndTransmit_IT>
    return;
 80032dc:	e004      	b.n	80032e8 <HAL_UART_IRQHandler+0x514>
    return;
 80032de:	bf00      	nop
 80032e0:	e002      	b.n	80032e8 <HAL_UART_IRQHandler+0x514>
      return;
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <HAL_UART_IRQHandler+0x514>
      return;
 80032e6:	bf00      	nop
  }
}
 80032e8:	37e8      	adds	r7, #232	; 0xe8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop

080032f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b090      	sub	sp, #64	; 0x40
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003354:	e050      	b.n	80033f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d04c      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800335e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <UART_WaitOnFlagUntilTimeout+0x30>
 8003364:	f7fd fdaa 	bl	8000ebc <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003370:	429a      	cmp	r2, r3
 8003372:	d241      	bcs.n	80033f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	330c      	adds	r3, #12
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	e853 3f00 	ldrex	r3, [r3]
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003394:	637a      	str	r2, [r7, #52]	; 0x34
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800339a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e5      	bne.n	8003374 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3314      	adds	r3, #20
 80033ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	613b      	str	r3, [r7, #16]
   return(result);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3314      	adds	r3, #20
 80033c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033c8:	623a      	str	r2, [r7, #32]
 80033ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	69f9      	ldr	r1, [r7, #28]
 80033ce:	6a3a      	ldr	r2, [r7, #32]
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e5      	bne.n	80033a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e00f      	b.n	8003418 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	429a      	cmp	r2, r3
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	429a      	cmp	r2, r3
 8003414:	d09f      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3740      	adds	r7, #64	; 0x40
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003420:	b480      	push	{r7}
 8003422:	b095      	sub	sp, #84	; 0x54
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800343e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003448:	643a      	str	r2, [r7, #64]	; 0x40
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800344e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e5      	bne.n	8003428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3314      	adds	r3, #20
 8003462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	61fb      	str	r3, [r7, #28]
   return(result);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	64bb      	str	r3, [r7, #72]	; 0x48
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3314      	adds	r3, #20
 800347a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800347c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e5      	bne.n	800345c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	2b01      	cmp	r3, #1
 8003496:	d119      	bne.n	80034cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f023 0310 	bic.w	r3, r3, #16
 80034ae:	647b      	str	r3, [r7, #68]	; 0x44
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034b8:	61ba      	str	r2, [r7, #24]
 80034ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	6979      	ldr	r1, [r7, #20]
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	613b      	str	r3, [r7, #16]
   return(result);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e5      	bne.n	8003498 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034da:	bf00      	nop
 80034dc:	3754      	adds	r7, #84	; 0x54
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f7ff ff09 	bl	8003318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b21      	cmp	r3, #33	; 0x21
 8003520:	d13e      	bne.n	80035a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352a:	d114      	bne.n	8003556 <UART_Transmit_IT+0x48>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d110      	bne.n	8003556 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003548:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	1c9a      	adds	r2, r3, #2
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	621a      	str	r2, [r3, #32]
 8003554:	e008      	b.n	8003568 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	1c59      	adds	r1, r3, #1
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6211      	str	r1, [r2, #32]
 8003560:	781a      	ldrb	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29b      	uxth	r3, r3
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4619      	mov	r1, r3
 8003576:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10f      	bne.n	800359c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800358a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	e000      	b.n	80035a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff fe8e 	bl	80032f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b08c      	sub	sp, #48	; 0x30
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b22      	cmp	r3, #34	; 0x22
 80035f0:	f040 80ab 	bne.w	800374a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fc:	d117      	bne.n	800362e <UART_Receive_IT+0x50>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d113      	bne.n	800362e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003606:	2300      	movs	r3, #0
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	b29b      	uxth	r3, r3
 8003618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361c:	b29a      	uxth	r2, r3
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	1c9a      	adds	r2, r3, #2
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	629a      	str	r2, [r3, #40]	; 0x28
 800362c:	e026      	b.n	800367c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003634:	2300      	movs	r3, #0
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003640:	d007      	beq.n	8003652 <UART_Receive_IT+0x74>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <UART_Receive_IT+0x82>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	e008      	b.n	8003672 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800366c:	b2da      	uxtb	r2, r3
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29b      	uxth	r3, r3
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4619      	mov	r1, r3
 800368a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800368c:	2b00      	cmp	r3, #0
 800368e:	d15a      	bne.n	8003746 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0220 	bic.w	r2, r2, #32
 800369e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d135      	bne.n	800373c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	330c      	adds	r3, #12
 80036dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	e853 3f00 	ldrex	r3, [r3]
 80036e4:	613b      	str	r3, [r7, #16]
   return(result);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f023 0310 	bic.w	r3, r3, #16
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	330c      	adds	r3, #12
 80036f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f6:	623a      	str	r2, [r7, #32]
 80036f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	69f9      	ldr	r1, [r7, #28]
 80036fc:	6a3a      	ldr	r2, [r7, #32]
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	61bb      	str	r3, [r7, #24]
   return(result);
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e5      	bne.n	80036d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b10      	cmp	r3, #16
 8003716:	d10a      	bne.n	800372e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff fdf9 	bl	800332c <HAL_UARTEx_RxEventCallback>
 800373a:	e002      	b.n	8003742 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff fde1 	bl	8003304 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e002      	b.n	800374c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800374a:	2302      	movs	r3, #2
  }
}
 800374c:	4618      	mov	r0, r3
 800374e:	3730      	adds	r7, #48	; 0x30
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003758:	b0c0      	sub	sp, #256	; 0x100
 800375a:	af00      	add	r7, sp, #0
 800375c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003770:	68d9      	ldr	r1, [r3, #12]
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	ea40 0301 	orr.w	r3, r0, r1
 800377c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	431a      	orrs	r2, r3
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	431a      	orrs	r2, r3
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037ac:	f021 010c 	bic.w	r1, r1, #12
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037ba:	430b      	orrs	r3, r1
 80037bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ce:	6999      	ldr	r1, [r3, #24]
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	ea40 0301 	orr.w	r3, r0, r1
 80037da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b8f      	ldr	r3, [pc, #572]	; (8003a20 <UART_SetConfig+0x2cc>)
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d005      	beq.n	80037f4 <UART_SetConfig+0xa0>
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b8d      	ldr	r3, [pc, #564]	; (8003a24 <UART_SetConfig+0x2d0>)
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d104      	bne.n	80037fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037f4:	f7fe fbaa 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 80037f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037fc:	e003      	b.n	8003806 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037fe:	f7fe fb91 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 8003802:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003810:	f040 810c 	bne.w	8003a2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003818:	2200      	movs	r2, #0
 800381a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800381e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003822:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003826:	4622      	mov	r2, r4
 8003828:	462b      	mov	r3, r5
 800382a:	1891      	adds	r1, r2, r2
 800382c:	65b9      	str	r1, [r7, #88]	; 0x58
 800382e:	415b      	adcs	r3, r3
 8003830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003832:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003836:	4621      	mov	r1, r4
 8003838:	eb12 0801 	adds.w	r8, r2, r1
 800383c:	4629      	mov	r1, r5
 800383e:	eb43 0901 	adc.w	r9, r3, r1
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003856:	4690      	mov	r8, r2
 8003858:	4699      	mov	r9, r3
 800385a:	4623      	mov	r3, r4
 800385c:	eb18 0303 	adds.w	r3, r8, r3
 8003860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003864:	462b      	mov	r3, r5
 8003866:	eb49 0303 	adc.w	r3, r9, r3
 800386a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800387a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800387e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003882:	460b      	mov	r3, r1
 8003884:	18db      	adds	r3, r3, r3
 8003886:	653b      	str	r3, [r7, #80]	; 0x50
 8003888:	4613      	mov	r3, r2
 800388a:	eb42 0303 	adc.w	r3, r2, r3
 800388e:	657b      	str	r3, [r7, #84]	; 0x54
 8003890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003894:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003898:	f7fc fd02 	bl	80002a0 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4b61      	ldr	r3, [pc, #388]	; (8003a28 <UART_SetConfig+0x2d4>)
 80038a2:	fba3 2302 	umull	r2, r3, r3, r2
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	011c      	lsls	r4, r3, #4
 80038aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	1891      	adds	r1, r2, r2
 80038c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80038c4:	415b      	adcs	r3, r3
 80038c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038cc:	4641      	mov	r1, r8
 80038ce:	eb12 0a01 	adds.w	sl, r2, r1
 80038d2:	4649      	mov	r1, r9
 80038d4:	eb43 0b01 	adc.w	fp, r3, r1
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ec:	4692      	mov	sl, r2
 80038ee:	469b      	mov	fp, r3
 80038f0:	4643      	mov	r3, r8
 80038f2:	eb1a 0303 	adds.w	r3, sl, r3
 80038f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038fa:	464b      	mov	r3, r9
 80038fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003910:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003914:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003918:	460b      	mov	r3, r1
 800391a:	18db      	adds	r3, r3, r3
 800391c:	643b      	str	r3, [r7, #64]	; 0x40
 800391e:	4613      	mov	r3, r2
 8003920:	eb42 0303 	adc.w	r3, r2, r3
 8003924:	647b      	str	r3, [r7, #68]	; 0x44
 8003926:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800392a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800392e:	f7fc fcb7 	bl	80002a0 <__aeabi_uldivmod>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4611      	mov	r1, r2
 8003938:	4b3b      	ldr	r3, [pc, #236]	; (8003a28 <UART_SetConfig+0x2d4>)
 800393a:	fba3 2301 	umull	r2, r3, r3, r1
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2264      	movs	r2, #100	; 0x64
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	1acb      	subs	r3, r1, r3
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800394e:	4b36      	ldr	r3, [pc, #216]	; (8003a28 <UART_SetConfig+0x2d4>)
 8003950:	fba3 2302 	umull	r2, r3, r3, r2
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800395c:	441c      	add	r4, r3
 800395e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003962:	2200      	movs	r2, #0
 8003964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003968:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800396c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003970:	4642      	mov	r2, r8
 8003972:	464b      	mov	r3, r9
 8003974:	1891      	adds	r1, r2, r2
 8003976:	63b9      	str	r1, [r7, #56]	; 0x38
 8003978:	415b      	adcs	r3, r3
 800397a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800397c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003980:	4641      	mov	r1, r8
 8003982:	1851      	adds	r1, r2, r1
 8003984:	6339      	str	r1, [r7, #48]	; 0x30
 8003986:	4649      	mov	r1, r9
 8003988:	414b      	adcs	r3, r1
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003998:	4659      	mov	r1, fp
 800399a:	00cb      	lsls	r3, r1, #3
 800399c:	4651      	mov	r1, sl
 800399e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a2:	4651      	mov	r1, sl
 80039a4:	00ca      	lsls	r2, r1, #3
 80039a6:	4610      	mov	r0, r2
 80039a8:	4619      	mov	r1, r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	4642      	mov	r2, r8
 80039ae:	189b      	adds	r3, r3, r2
 80039b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039b4:	464b      	mov	r3, r9
 80039b6:	460a      	mov	r2, r1
 80039b8:	eb42 0303 	adc.w	r3, r2, r3
 80039bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039d4:	460b      	mov	r3, r1
 80039d6:	18db      	adds	r3, r3, r3
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039da:	4613      	mov	r3, r2
 80039dc:	eb42 0303 	adc.w	r3, r2, r3
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039ea:	f7fc fc59 	bl	80002a0 <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <UART_SetConfig+0x2d4>)
 80039f4:	fba3 1302 	umull	r1, r3, r3, r2
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	2164      	movs	r1, #100	; 0x64
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	3332      	adds	r3, #50	; 0x32
 8003a06:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <UART_SetConfig+0x2d4>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	f003 0207 	and.w	r2, r3, #7
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4422      	add	r2, r4
 8003a1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a1c:	e106      	b.n	8003c2c <UART_SetConfig+0x4d8>
 8003a1e:	bf00      	nop
 8003a20:	40011000 	.word	0x40011000
 8003a24:	40011400 	.word	0x40011400
 8003a28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a3e:	4642      	mov	r2, r8
 8003a40:	464b      	mov	r3, r9
 8003a42:	1891      	adds	r1, r2, r2
 8003a44:	6239      	str	r1, [r7, #32]
 8003a46:	415b      	adcs	r3, r3
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a4e:	4641      	mov	r1, r8
 8003a50:	1854      	adds	r4, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb43 0501 	adc.w	r5, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	00eb      	lsls	r3, r5, #3
 8003a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a66:	00e2      	lsls	r2, r4, #3
 8003a68:	4614      	mov	r4, r2
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	4643      	mov	r3, r8
 8003a6e:	18e3      	adds	r3, r4, r3
 8003a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a74:	464b      	mov	r3, r9
 8003a76:	eb45 0303 	adc.w	r3, r5, r3
 8003a7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	008b      	lsls	r3, r1, #2
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	008a      	lsls	r2, r1, #2
 8003aa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003aac:	f7fc fbf8 	bl	80002a0 <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4b60      	ldr	r3, [pc, #384]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	011c      	lsls	r4, r3, #4
 8003abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ac8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003acc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	1891      	adds	r1, r2, r2
 8003ad6:	61b9      	str	r1, [r7, #24]
 8003ad8:	415b      	adcs	r3, r3
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	1851      	adds	r1, r2, r1
 8003ae4:	6139      	str	r1, [r7, #16]
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	414b      	adcs	r3, r1
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003af8:	4659      	mov	r1, fp
 8003afa:	00cb      	lsls	r3, r1, #3
 8003afc:	4651      	mov	r1, sl
 8003afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b02:	4651      	mov	r1, sl
 8003b04:	00ca      	lsls	r2, r1, #3
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b14:	464b      	mov	r3, r9
 8003b16:	460a      	mov	r2, r1
 8003b18:	eb42 0303 	adc.w	r3, r2, r3
 8003b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b38:	4649      	mov	r1, r9
 8003b3a:	008b      	lsls	r3, r1, #2
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b42:	4641      	mov	r1, r8
 8003b44:	008a      	lsls	r2, r1, #2
 8003b46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b4a:	f7fc fba9 	bl	80002a0 <__aeabi_uldivmod>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	4b38      	ldr	r3, [pc, #224]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003b56:	fba3 2301 	umull	r2, r3, r3, r1
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2264      	movs	r2, #100	; 0x64
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	1acb      	subs	r3, r1, r3
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	3332      	adds	r3, #50	; 0x32
 8003b68:	4a33      	ldr	r2, [pc, #204]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b74:	441c      	add	r4, r3
 8003b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	673b      	str	r3, [r7, #112]	; 0x70
 8003b7e:	677a      	str	r2, [r7, #116]	; 0x74
 8003b80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b84:	4642      	mov	r2, r8
 8003b86:	464b      	mov	r3, r9
 8003b88:	1891      	adds	r1, r2, r2
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	415b      	adcs	r3, r3
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b94:	4641      	mov	r1, r8
 8003b96:	1851      	adds	r1, r2, r1
 8003b98:	6039      	str	r1, [r7, #0]
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	414b      	adcs	r3, r1
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bac:	4659      	mov	r1, fp
 8003bae:	00cb      	lsls	r3, r1, #3
 8003bb0:	4651      	mov	r1, sl
 8003bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bb6:	4651      	mov	r1, sl
 8003bb8:	00ca      	lsls	r2, r1, #3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	189b      	adds	r3, r3, r2
 8003bc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	460a      	mov	r2, r1
 8003bca:	eb42 0303 	adc.w	r3, r2, r3
 8003bce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	663b      	str	r3, [r7, #96]	; 0x60
 8003bda:	667a      	str	r2, [r7, #100]	; 0x64
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003be8:	4649      	mov	r1, r9
 8003bea:	008b      	lsls	r3, r1, #2
 8003bec:	4641      	mov	r1, r8
 8003bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	008a      	lsls	r2, r1, #2
 8003bf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bfa:	f7fc fb51 	bl	80002a0 <__aeabi_uldivmod>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003c04:	fba3 1302 	umull	r1, r3, r3, r2
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	2164      	movs	r1, #100	; 0x64
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	3332      	adds	r3, #50	; 0x32
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003c18:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	f003 020f 	and.w	r2, r3, #15
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4422      	add	r2, r4
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c32:	46bd      	mov	sp, r7
 8003c34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c38:	51eb851f 	.word	0x51eb851f

08003c3c <std>:
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	4604      	mov	r4, r0
 8003c42:	e9c0 3300 	strd	r3, r3, [r0]
 8003c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c4a:	6083      	str	r3, [r0, #8]
 8003c4c:	8181      	strh	r1, [r0, #12]
 8003c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8003c50:	81c2      	strh	r2, [r0, #14]
 8003c52:	6183      	str	r3, [r0, #24]
 8003c54:	4619      	mov	r1, r3
 8003c56:	2208      	movs	r2, #8
 8003c58:	305c      	adds	r0, #92	; 0x5c
 8003c5a:	f000 fa05 	bl	8004068 <memset>
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <std+0x58>)
 8003c60:	6263      	str	r3, [r4, #36]	; 0x24
 8003c62:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <std+0x5c>)
 8003c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c66:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <std+0x60>)
 8003c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <std+0x64>)
 8003c6c:	6323      	str	r3, [r4, #48]	; 0x30
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <std+0x68>)
 8003c70:	6224      	str	r4, [r4, #32]
 8003c72:	429c      	cmp	r4, r3
 8003c74:	d006      	beq.n	8003c84 <std+0x48>
 8003c76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003c7a:	4294      	cmp	r4, r2
 8003c7c:	d002      	beq.n	8003c84 <std+0x48>
 8003c7e:	33d0      	adds	r3, #208	; 0xd0
 8003c80:	429c      	cmp	r4, r3
 8003c82:	d105      	bne.n	8003c90 <std+0x54>
 8003c84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c8c:	f000 ba64 	b.w	8004158 <__retarget_lock_init_recursive>
 8003c90:	bd10      	pop	{r4, pc}
 8003c92:	bf00      	nop
 8003c94:	08003eb9 	.word	0x08003eb9
 8003c98:	08003edb 	.word	0x08003edb
 8003c9c:	08003f13 	.word	0x08003f13
 8003ca0:	08003f37 	.word	0x08003f37
 8003ca4:	20000138 	.word	0x20000138

08003ca8 <stdio_exit_handler>:
 8003ca8:	4a02      	ldr	r2, [pc, #8]	; (8003cb4 <stdio_exit_handler+0xc>)
 8003caa:	4903      	ldr	r1, [pc, #12]	; (8003cb8 <stdio_exit_handler+0x10>)
 8003cac:	4803      	ldr	r0, [pc, #12]	; (8003cbc <stdio_exit_handler+0x14>)
 8003cae:	f000 b869 	b.w	8003d84 <_fwalk_sglue>
 8003cb2:	bf00      	nop
 8003cb4:	20000014 	.word	0x20000014
 8003cb8:	08004a2d 	.word	0x08004a2d
 8003cbc:	20000020 	.word	0x20000020

08003cc0 <cleanup_stdio>:
 8003cc0:	6841      	ldr	r1, [r0, #4]
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <cleanup_stdio+0x34>)
 8003cc4:	4299      	cmp	r1, r3
 8003cc6:	b510      	push	{r4, lr}
 8003cc8:	4604      	mov	r4, r0
 8003cca:	d001      	beq.n	8003cd0 <cleanup_stdio+0x10>
 8003ccc:	f000 feae 	bl	8004a2c <_fflush_r>
 8003cd0:	68a1      	ldr	r1, [r4, #8]
 8003cd2:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <cleanup_stdio+0x38>)
 8003cd4:	4299      	cmp	r1, r3
 8003cd6:	d002      	beq.n	8003cde <cleanup_stdio+0x1e>
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f000 fea7 	bl	8004a2c <_fflush_r>
 8003cde:	68e1      	ldr	r1, [r4, #12]
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <cleanup_stdio+0x3c>)
 8003ce2:	4299      	cmp	r1, r3
 8003ce4:	d004      	beq.n	8003cf0 <cleanup_stdio+0x30>
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cec:	f000 be9e 	b.w	8004a2c <_fflush_r>
 8003cf0:	bd10      	pop	{r4, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000138 	.word	0x20000138
 8003cf8:	200001a0 	.word	0x200001a0
 8003cfc:	20000208 	.word	0x20000208

08003d00 <global_stdio_init.part.0>:
 8003d00:	b510      	push	{r4, lr}
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <global_stdio_init.part.0+0x30>)
 8003d04:	4c0b      	ldr	r4, [pc, #44]	; (8003d34 <global_stdio_init.part.0+0x34>)
 8003d06:	4a0c      	ldr	r2, [pc, #48]	; (8003d38 <global_stdio_init.part.0+0x38>)
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2104      	movs	r1, #4
 8003d10:	f7ff ff94 	bl	8003c3c <std>
 8003d14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d18:	2201      	movs	r2, #1
 8003d1a:	2109      	movs	r1, #9
 8003d1c:	f7ff ff8e 	bl	8003c3c <std>
 8003d20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d24:	2202      	movs	r2, #2
 8003d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d2a:	2112      	movs	r1, #18
 8003d2c:	f7ff bf86 	b.w	8003c3c <std>
 8003d30:	20000270 	.word	0x20000270
 8003d34:	20000138 	.word	0x20000138
 8003d38:	08003ca9 	.word	0x08003ca9

08003d3c <__sfp_lock_acquire>:
 8003d3c:	4801      	ldr	r0, [pc, #4]	; (8003d44 <__sfp_lock_acquire+0x8>)
 8003d3e:	f000 ba0c 	b.w	800415a <__retarget_lock_acquire_recursive>
 8003d42:	bf00      	nop
 8003d44:	20000279 	.word	0x20000279

08003d48 <__sfp_lock_release>:
 8003d48:	4801      	ldr	r0, [pc, #4]	; (8003d50 <__sfp_lock_release+0x8>)
 8003d4a:	f000 ba07 	b.w	800415c <__retarget_lock_release_recursive>
 8003d4e:	bf00      	nop
 8003d50:	20000279 	.word	0x20000279

08003d54 <__sinit>:
 8003d54:	b510      	push	{r4, lr}
 8003d56:	4604      	mov	r4, r0
 8003d58:	f7ff fff0 	bl	8003d3c <__sfp_lock_acquire>
 8003d5c:	6a23      	ldr	r3, [r4, #32]
 8003d5e:	b11b      	cbz	r3, 8003d68 <__sinit+0x14>
 8003d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d64:	f7ff bff0 	b.w	8003d48 <__sfp_lock_release>
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <__sinit+0x28>)
 8003d6a:	6223      	str	r3, [r4, #32]
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <__sinit+0x2c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f5      	bne.n	8003d60 <__sinit+0xc>
 8003d74:	f7ff ffc4 	bl	8003d00 <global_stdio_init.part.0>
 8003d78:	e7f2      	b.n	8003d60 <__sinit+0xc>
 8003d7a:	bf00      	nop
 8003d7c:	08003cc1 	.word	0x08003cc1
 8003d80:	20000270 	.word	0x20000270

08003d84 <_fwalk_sglue>:
 8003d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d88:	4607      	mov	r7, r0
 8003d8a:	4688      	mov	r8, r1
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	2600      	movs	r6, #0
 8003d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d94:	f1b9 0901 	subs.w	r9, r9, #1
 8003d98:	d505      	bpl.n	8003da6 <_fwalk_sglue+0x22>
 8003d9a:	6824      	ldr	r4, [r4, #0]
 8003d9c:	2c00      	cmp	r4, #0
 8003d9e:	d1f7      	bne.n	8003d90 <_fwalk_sglue+0xc>
 8003da0:	4630      	mov	r0, r6
 8003da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003da6:	89ab      	ldrh	r3, [r5, #12]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d907      	bls.n	8003dbc <_fwalk_sglue+0x38>
 8003dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003db0:	3301      	adds	r3, #1
 8003db2:	d003      	beq.n	8003dbc <_fwalk_sglue+0x38>
 8003db4:	4629      	mov	r1, r5
 8003db6:	4638      	mov	r0, r7
 8003db8:	47c0      	blx	r8
 8003dba:	4306      	orrs	r6, r0
 8003dbc:	3568      	adds	r5, #104	; 0x68
 8003dbe:	e7e9      	b.n	8003d94 <_fwalk_sglue+0x10>

08003dc0 <_puts_r>:
 8003dc0:	6a03      	ldr	r3, [r0, #32]
 8003dc2:	b570      	push	{r4, r5, r6, lr}
 8003dc4:	6884      	ldr	r4, [r0, #8]
 8003dc6:	4605      	mov	r5, r0
 8003dc8:	460e      	mov	r6, r1
 8003dca:	b90b      	cbnz	r3, 8003dd0 <_puts_r+0x10>
 8003dcc:	f7ff ffc2 	bl	8003d54 <__sinit>
 8003dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dd2:	07db      	lsls	r3, r3, #31
 8003dd4:	d405      	bmi.n	8003de2 <_puts_r+0x22>
 8003dd6:	89a3      	ldrh	r3, [r4, #12]
 8003dd8:	0598      	lsls	r0, r3, #22
 8003dda:	d402      	bmi.n	8003de2 <_puts_r+0x22>
 8003ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dde:	f000 f9bc 	bl	800415a <__retarget_lock_acquire_recursive>
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	0719      	lsls	r1, r3, #28
 8003de6:	d513      	bpl.n	8003e10 <_puts_r+0x50>
 8003de8:	6923      	ldr	r3, [r4, #16]
 8003dea:	b18b      	cbz	r3, 8003e10 <_puts_r+0x50>
 8003dec:	3e01      	subs	r6, #1
 8003dee:	68a3      	ldr	r3, [r4, #8]
 8003df0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003df4:	3b01      	subs	r3, #1
 8003df6:	60a3      	str	r3, [r4, #8]
 8003df8:	b9e9      	cbnz	r1, 8003e36 <_puts_r+0x76>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	da2e      	bge.n	8003e5c <_puts_r+0x9c>
 8003dfe:	4622      	mov	r2, r4
 8003e00:	210a      	movs	r1, #10
 8003e02:	4628      	mov	r0, r5
 8003e04:	f000 f89b 	bl	8003f3e <__swbuf_r>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d007      	beq.n	8003e1c <_puts_r+0x5c>
 8003e0c:	250a      	movs	r5, #10
 8003e0e:	e007      	b.n	8003e20 <_puts_r+0x60>
 8003e10:	4621      	mov	r1, r4
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 f8d0 	bl	8003fb8 <__swsetup_r>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d0e7      	beq.n	8003dec <_puts_r+0x2c>
 8003e1c:	f04f 35ff 	mov.w	r5, #4294967295
 8003e20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e22:	07da      	lsls	r2, r3, #31
 8003e24:	d405      	bmi.n	8003e32 <_puts_r+0x72>
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	059b      	lsls	r3, r3, #22
 8003e2a:	d402      	bmi.n	8003e32 <_puts_r+0x72>
 8003e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e2e:	f000 f995 	bl	800415c <__retarget_lock_release_recursive>
 8003e32:	4628      	mov	r0, r5
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	da04      	bge.n	8003e44 <_puts_r+0x84>
 8003e3a:	69a2      	ldr	r2, [r4, #24]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	dc06      	bgt.n	8003e4e <_puts_r+0x8e>
 8003e40:	290a      	cmp	r1, #10
 8003e42:	d004      	beq.n	8003e4e <_puts_r+0x8e>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	6022      	str	r2, [r4, #0]
 8003e4a:	7019      	strb	r1, [r3, #0]
 8003e4c:	e7cf      	b.n	8003dee <_puts_r+0x2e>
 8003e4e:	4622      	mov	r2, r4
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 f874 	bl	8003f3e <__swbuf_r>
 8003e56:	3001      	adds	r0, #1
 8003e58:	d1c9      	bne.n	8003dee <_puts_r+0x2e>
 8003e5a:	e7df      	b.n	8003e1c <_puts_r+0x5c>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	250a      	movs	r5, #10
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	6022      	str	r2, [r4, #0]
 8003e64:	701d      	strb	r5, [r3, #0]
 8003e66:	e7db      	b.n	8003e20 <_puts_r+0x60>

08003e68 <puts>:
 8003e68:	4b02      	ldr	r3, [pc, #8]	; (8003e74 <puts+0xc>)
 8003e6a:	4601      	mov	r1, r0
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	f7ff bfa7 	b.w	8003dc0 <_puts_r>
 8003e72:	bf00      	nop
 8003e74:	2000006c 	.word	0x2000006c

08003e78 <siprintf>:
 8003e78:	b40e      	push	{r1, r2, r3}
 8003e7a:	b500      	push	{lr}
 8003e7c:	b09c      	sub	sp, #112	; 0x70
 8003e7e:	ab1d      	add	r3, sp, #116	; 0x74
 8003e80:	9002      	str	r0, [sp, #8]
 8003e82:	9006      	str	r0, [sp, #24]
 8003e84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e88:	4809      	ldr	r0, [pc, #36]	; (8003eb0 <siprintf+0x38>)
 8003e8a:	9107      	str	r1, [sp, #28]
 8003e8c:	9104      	str	r1, [sp, #16]
 8003e8e:	4909      	ldr	r1, [pc, #36]	; (8003eb4 <siprintf+0x3c>)
 8003e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e94:	9105      	str	r1, [sp, #20]
 8003e96:	6800      	ldr	r0, [r0, #0]
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	a902      	add	r1, sp, #8
 8003e9c:	f000 fab2 	bl	8004404 <_svfiprintf_r>
 8003ea0:	9b02      	ldr	r3, [sp, #8]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	b01c      	add	sp, #112	; 0x70
 8003ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eac:	b003      	add	sp, #12
 8003eae:	4770      	bx	lr
 8003eb0:	2000006c 	.word	0x2000006c
 8003eb4:	ffff0208 	.word	0xffff0208

08003eb8 <__sread>:
 8003eb8:	b510      	push	{r4, lr}
 8003eba:	460c      	mov	r4, r1
 8003ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec0:	f000 f8fc 	bl	80040bc <_read_r>
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	bfab      	itete	ge
 8003ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003eca:	89a3      	ldrhlt	r3, [r4, #12]
 8003ecc:	181b      	addge	r3, r3, r0
 8003ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ed2:	bfac      	ite	ge
 8003ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ed6:	81a3      	strhlt	r3, [r4, #12]
 8003ed8:	bd10      	pop	{r4, pc}

08003eda <__swrite>:
 8003eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ede:	461f      	mov	r7, r3
 8003ee0:	898b      	ldrh	r3, [r1, #12]
 8003ee2:	05db      	lsls	r3, r3, #23
 8003ee4:	4605      	mov	r5, r0
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	4616      	mov	r6, r2
 8003eea:	d505      	bpl.n	8003ef8 <__swrite+0x1e>
 8003eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f000 f8d0 	bl	8004098 <_lseek_r>
 8003ef8:	89a3      	ldrh	r3, [r4, #12]
 8003efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f02:	81a3      	strh	r3, [r4, #12]
 8003f04:	4632      	mov	r2, r6
 8003f06:	463b      	mov	r3, r7
 8003f08:	4628      	mov	r0, r5
 8003f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f0e:	f000 b8e7 	b.w	80040e0 <_write_r>

08003f12 <__sseek>:
 8003f12:	b510      	push	{r4, lr}
 8003f14:	460c      	mov	r4, r1
 8003f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f1a:	f000 f8bd 	bl	8004098 <_lseek_r>
 8003f1e:	1c43      	adds	r3, r0, #1
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	bf15      	itete	ne
 8003f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f2e:	81a3      	strheq	r3, [r4, #12]
 8003f30:	bf18      	it	ne
 8003f32:	81a3      	strhne	r3, [r4, #12]
 8003f34:	bd10      	pop	{r4, pc}

08003f36 <__sclose>:
 8003f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3a:	f000 b89d 	b.w	8004078 <_close_r>

08003f3e <__swbuf_r>:
 8003f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f40:	460e      	mov	r6, r1
 8003f42:	4614      	mov	r4, r2
 8003f44:	4605      	mov	r5, r0
 8003f46:	b118      	cbz	r0, 8003f50 <__swbuf_r+0x12>
 8003f48:	6a03      	ldr	r3, [r0, #32]
 8003f4a:	b90b      	cbnz	r3, 8003f50 <__swbuf_r+0x12>
 8003f4c:	f7ff ff02 	bl	8003d54 <__sinit>
 8003f50:	69a3      	ldr	r3, [r4, #24]
 8003f52:	60a3      	str	r3, [r4, #8]
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	071a      	lsls	r2, r3, #28
 8003f58:	d525      	bpl.n	8003fa6 <__swbuf_r+0x68>
 8003f5a:	6923      	ldr	r3, [r4, #16]
 8003f5c:	b31b      	cbz	r3, 8003fa6 <__swbuf_r+0x68>
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	6922      	ldr	r2, [r4, #16]
 8003f62:	1a98      	subs	r0, r3, r2
 8003f64:	6963      	ldr	r3, [r4, #20]
 8003f66:	b2f6      	uxtb	r6, r6
 8003f68:	4283      	cmp	r3, r0
 8003f6a:	4637      	mov	r7, r6
 8003f6c:	dc04      	bgt.n	8003f78 <__swbuf_r+0x3a>
 8003f6e:	4621      	mov	r1, r4
 8003f70:	4628      	mov	r0, r5
 8003f72:	f000 fd5b 	bl	8004a2c <_fflush_r>
 8003f76:	b9e0      	cbnz	r0, 8003fb2 <__swbuf_r+0x74>
 8003f78:	68a3      	ldr	r3, [r4, #8]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	60a3      	str	r3, [r4, #8]
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	6022      	str	r2, [r4, #0]
 8003f84:	701e      	strb	r6, [r3, #0]
 8003f86:	6962      	ldr	r2, [r4, #20]
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d004      	beq.n	8003f98 <__swbuf_r+0x5a>
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	07db      	lsls	r3, r3, #31
 8003f92:	d506      	bpl.n	8003fa2 <__swbuf_r+0x64>
 8003f94:	2e0a      	cmp	r6, #10
 8003f96:	d104      	bne.n	8003fa2 <__swbuf_r+0x64>
 8003f98:	4621      	mov	r1, r4
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f000 fd46 	bl	8004a2c <_fflush_r>
 8003fa0:	b938      	cbnz	r0, 8003fb2 <__swbuf_r+0x74>
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f000 f805 	bl	8003fb8 <__swsetup_r>
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d0d5      	beq.n	8003f5e <__swbuf_r+0x20>
 8003fb2:	f04f 37ff 	mov.w	r7, #4294967295
 8003fb6:	e7f4      	b.n	8003fa2 <__swbuf_r+0x64>

08003fb8 <__swsetup_r>:
 8003fb8:	b538      	push	{r3, r4, r5, lr}
 8003fba:	4b2a      	ldr	r3, [pc, #168]	; (8004064 <__swsetup_r+0xac>)
 8003fbc:	4605      	mov	r5, r0
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	b118      	cbz	r0, 8003fcc <__swsetup_r+0x14>
 8003fc4:	6a03      	ldr	r3, [r0, #32]
 8003fc6:	b90b      	cbnz	r3, 8003fcc <__swsetup_r+0x14>
 8003fc8:	f7ff fec4 	bl	8003d54 <__sinit>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fd2:	0718      	lsls	r0, r3, #28
 8003fd4:	d422      	bmi.n	800401c <__swsetup_r+0x64>
 8003fd6:	06d9      	lsls	r1, r3, #27
 8003fd8:	d407      	bmi.n	8003fea <__swsetup_r+0x32>
 8003fda:	2309      	movs	r3, #9
 8003fdc:	602b      	str	r3, [r5, #0]
 8003fde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fe2:	81a3      	strh	r3, [r4, #12]
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe8:	e034      	b.n	8004054 <__swsetup_r+0x9c>
 8003fea:	0758      	lsls	r0, r3, #29
 8003fec:	d512      	bpl.n	8004014 <__swsetup_r+0x5c>
 8003fee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ff0:	b141      	cbz	r1, 8004004 <__swsetup_r+0x4c>
 8003ff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ff6:	4299      	cmp	r1, r3
 8003ff8:	d002      	beq.n	8004000 <__swsetup_r+0x48>
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f000 f8b0 	bl	8004160 <_free_r>
 8004000:	2300      	movs	r3, #0
 8004002:	6363      	str	r3, [r4, #52]	; 0x34
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800400a:	81a3      	strh	r3, [r4, #12]
 800400c:	2300      	movs	r3, #0
 800400e:	6063      	str	r3, [r4, #4]
 8004010:	6923      	ldr	r3, [r4, #16]
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	89a3      	ldrh	r3, [r4, #12]
 8004016:	f043 0308 	orr.w	r3, r3, #8
 800401a:	81a3      	strh	r3, [r4, #12]
 800401c:	6923      	ldr	r3, [r4, #16]
 800401e:	b94b      	cbnz	r3, 8004034 <__swsetup_r+0x7c>
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402a:	d003      	beq.n	8004034 <__swsetup_r+0x7c>
 800402c:	4621      	mov	r1, r4
 800402e:	4628      	mov	r0, r5
 8004030:	f000 fd4a 	bl	8004ac8 <__smakebuf_r>
 8004034:	89a0      	ldrh	r0, [r4, #12]
 8004036:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800403a:	f010 0301 	ands.w	r3, r0, #1
 800403e:	d00a      	beq.n	8004056 <__swsetup_r+0x9e>
 8004040:	2300      	movs	r3, #0
 8004042:	60a3      	str	r3, [r4, #8]
 8004044:	6963      	ldr	r3, [r4, #20]
 8004046:	425b      	negs	r3, r3
 8004048:	61a3      	str	r3, [r4, #24]
 800404a:	6923      	ldr	r3, [r4, #16]
 800404c:	b943      	cbnz	r3, 8004060 <__swsetup_r+0xa8>
 800404e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004052:	d1c4      	bne.n	8003fde <__swsetup_r+0x26>
 8004054:	bd38      	pop	{r3, r4, r5, pc}
 8004056:	0781      	lsls	r1, r0, #30
 8004058:	bf58      	it	pl
 800405a:	6963      	ldrpl	r3, [r4, #20]
 800405c:	60a3      	str	r3, [r4, #8]
 800405e:	e7f4      	b.n	800404a <__swsetup_r+0x92>
 8004060:	2000      	movs	r0, #0
 8004062:	e7f7      	b.n	8004054 <__swsetup_r+0x9c>
 8004064:	2000006c 	.word	0x2000006c

08004068 <memset>:
 8004068:	4402      	add	r2, r0
 800406a:	4603      	mov	r3, r0
 800406c:	4293      	cmp	r3, r2
 800406e:	d100      	bne.n	8004072 <memset+0xa>
 8004070:	4770      	bx	lr
 8004072:	f803 1b01 	strb.w	r1, [r3], #1
 8004076:	e7f9      	b.n	800406c <memset+0x4>

08004078 <_close_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4d06      	ldr	r5, [pc, #24]	; (8004094 <_close_r+0x1c>)
 800407c:	2300      	movs	r3, #0
 800407e:	4604      	mov	r4, r0
 8004080:	4608      	mov	r0, r1
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	f7fc fd9b 	bl	8000bbe <_close>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	d102      	bne.n	8004092 <_close_r+0x1a>
 800408c:	682b      	ldr	r3, [r5, #0]
 800408e:	b103      	cbz	r3, 8004092 <_close_r+0x1a>
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	bd38      	pop	{r3, r4, r5, pc}
 8004094:	20000274 	.word	0x20000274

08004098 <_lseek_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4d07      	ldr	r5, [pc, #28]	; (80040b8 <_lseek_r+0x20>)
 800409c:	4604      	mov	r4, r0
 800409e:	4608      	mov	r0, r1
 80040a0:	4611      	mov	r1, r2
 80040a2:	2200      	movs	r2, #0
 80040a4:	602a      	str	r2, [r5, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f7fc fdb0 	bl	8000c0c <_lseek>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d102      	bne.n	80040b6 <_lseek_r+0x1e>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	b103      	cbz	r3, 80040b6 <_lseek_r+0x1e>
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	bd38      	pop	{r3, r4, r5, pc}
 80040b8:	20000274 	.word	0x20000274

080040bc <_read_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4d07      	ldr	r5, [pc, #28]	; (80040dc <_read_r+0x20>)
 80040c0:	4604      	mov	r4, r0
 80040c2:	4608      	mov	r0, r1
 80040c4:	4611      	mov	r1, r2
 80040c6:	2200      	movs	r2, #0
 80040c8:	602a      	str	r2, [r5, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f7fc fd5a 	bl	8000b84 <_read>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_read_r+0x1e>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_read_r+0x1e>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	20000274 	.word	0x20000274

080040e0 <_write_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4d07      	ldr	r5, [pc, #28]	; (8004100 <_write_r+0x20>)
 80040e4:	4604      	mov	r4, r0
 80040e6:	4608      	mov	r0, r1
 80040e8:	4611      	mov	r1, r2
 80040ea:	2200      	movs	r2, #0
 80040ec:	602a      	str	r2, [r5, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f7fc fab4 	bl	800065c <_write>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d102      	bne.n	80040fe <_write_r+0x1e>
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	b103      	cbz	r3, 80040fe <_write_r+0x1e>
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
 8004100:	20000274 	.word	0x20000274

08004104 <__errno>:
 8004104:	4b01      	ldr	r3, [pc, #4]	; (800410c <__errno+0x8>)
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	2000006c 	.word	0x2000006c

08004110 <__libc_init_array>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	4d0d      	ldr	r5, [pc, #52]	; (8004148 <__libc_init_array+0x38>)
 8004114:	4c0d      	ldr	r4, [pc, #52]	; (800414c <__libc_init_array+0x3c>)
 8004116:	1b64      	subs	r4, r4, r5
 8004118:	10a4      	asrs	r4, r4, #2
 800411a:	2600      	movs	r6, #0
 800411c:	42a6      	cmp	r6, r4
 800411e:	d109      	bne.n	8004134 <__libc_init_array+0x24>
 8004120:	4d0b      	ldr	r5, [pc, #44]	; (8004150 <__libc_init_array+0x40>)
 8004122:	4c0c      	ldr	r4, [pc, #48]	; (8004154 <__libc_init_array+0x44>)
 8004124:	f000 fd9e 	bl	8004c64 <_init>
 8004128:	1b64      	subs	r4, r4, r5
 800412a:	10a4      	asrs	r4, r4, #2
 800412c:	2600      	movs	r6, #0
 800412e:	42a6      	cmp	r6, r4
 8004130:	d105      	bne.n	800413e <__libc_init_array+0x2e>
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	f855 3b04 	ldr.w	r3, [r5], #4
 8004138:	4798      	blx	r3
 800413a:	3601      	adds	r6, #1
 800413c:	e7ee      	b.n	800411c <__libc_init_array+0xc>
 800413e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004142:	4798      	blx	r3
 8004144:	3601      	adds	r6, #1
 8004146:	e7f2      	b.n	800412e <__libc_init_array+0x1e>
 8004148:	08004d18 	.word	0x08004d18
 800414c:	08004d18 	.word	0x08004d18
 8004150:	08004d18 	.word	0x08004d18
 8004154:	08004d1c 	.word	0x08004d1c

08004158 <__retarget_lock_init_recursive>:
 8004158:	4770      	bx	lr

0800415a <__retarget_lock_acquire_recursive>:
 800415a:	4770      	bx	lr

0800415c <__retarget_lock_release_recursive>:
 800415c:	4770      	bx	lr
	...

08004160 <_free_r>:
 8004160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004162:	2900      	cmp	r1, #0
 8004164:	d044      	beq.n	80041f0 <_free_r+0x90>
 8004166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800416a:	9001      	str	r0, [sp, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	f1a1 0404 	sub.w	r4, r1, #4
 8004172:	bfb8      	it	lt
 8004174:	18e4      	addlt	r4, r4, r3
 8004176:	f000 f8df 	bl	8004338 <__malloc_lock>
 800417a:	4a1e      	ldr	r2, [pc, #120]	; (80041f4 <_free_r+0x94>)
 800417c:	9801      	ldr	r0, [sp, #4]
 800417e:	6813      	ldr	r3, [r2, #0]
 8004180:	b933      	cbnz	r3, 8004190 <_free_r+0x30>
 8004182:	6063      	str	r3, [r4, #4]
 8004184:	6014      	str	r4, [r2, #0]
 8004186:	b003      	add	sp, #12
 8004188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800418c:	f000 b8da 	b.w	8004344 <__malloc_unlock>
 8004190:	42a3      	cmp	r3, r4
 8004192:	d908      	bls.n	80041a6 <_free_r+0x46>
 8004194:	6825      	ldr	r5, [r4, #0]
 8004196:	1961      	adds	r1, r4, r5
 8004198:	428b      	cmp	r3, r1
 800419a:	bf01      	itttt	eq
 800419c:	6819      	ldreq	r1, [r3, #0]
 800419e:	685b      	ldreq	r3, [r3, #4]
 80041a0:	1949      	addeq	r1, r1, r5
 80041a2:	6021      	streq	r1, [r4, #0]
 80041a4:	e7ed      	b.n	8004182 <_free_r+0x22>
 80041a6:	461a      	mov	r2, r3
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	b10b      	cbz	r3, 80041b0 <_free_r+0x50>
 80041ac:	42a3      	cmp	r3, r4
 80041ae:	d9fa      	bls.n	80041a6 <_free_r+0x46>
 80041b0:	6811      	ldr	r1, [r2, #0]
 80041b2:	1855      	adds	r5, r2, r1
 80041b4:	42a5      	cmp	r5, r4
 80041b6:	d10b      	bne.n	80041d0 <_free_r+0x70>
 80041b8:	6824      	ldr	r4, [r4, #0]
 80041ba:	4421      	add	r1, r4
 80041bc:	1854      	adds	r4, r2, r1
 80041be:	42a3      	cmp	r3, r4
 80041c0:	6011      	str	r1, [r2, #0]
 80041c2:	d1e0      	bne.n	8004186 <_free_r+0x26>
 80041c4:	681c      	ldr	r4, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	6053      	str	r3, [r2, #4]
 80041ca:	440c      	add	r4, r1
 80041cc:	6014      	str	r4, [r2, #0]
 80041ce:	e7da      	b.n	8004186 <_free_r+0x26>
 80041d0:	d902      	bls.n	80041d8 <_free_r+0x78>
 80041d2:	230c      	movs	r3, #12
 80041d4:	6003      	str	r3, [r0, #0]
 80041d6:	e7d6      	b.n	8004186 <_free_r+0x26>
 80041d8:	6825      	ldr	r5, [r4, #0]
 80041da:	1961      	adds	r1, r4, r5
 80041dc:	428b      	cmp	r3, r1
 80041de:	bf04      	itt	eq
 80041e0:	6819      	ldreq	r1, [r3, #0]
 80041e2:	685b      	ldreq	r3, [r3, #4]
 80041e4:	6063      	str	r3, [r4, #4]
 80041e6:	bf04      	itt	eq
 80041e8:	1949      	addeq	r1, r1, r5
 80041ea:	6021      	streq	r1, [r4, #0]
 80041ec:	6054      	str	r4, [r2, #4]
 80041ee:	e7ca      	b.n	8004186 <_free_r+0x26>
 80041f0:	b003      	add	sp, #12
 80041f2:	bd30      	pop	{r4, r5, pc}
 80041f4:	2000027c 	.word	0x2000027c

080041f8 <sbrk_aligned>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4e0e      	ldr	r6, [pc, #56]	; (8004234 <sbrk_aligned+0x3c>)
 80041fc:	460c      	mov	r4, r1
 80041fe:	6831      	ldr	r1, [r6, #0]
 8004200:	4605      	mov	r5, r0
 8004202:	b911      	cbnz	r1, 800420a <sbrk_aligned+0x12>
 8004204:	f000 fcd8 	bl	8004bb8 <_sbrk_r>
 8004208:	6030      	str	r0, [r6, #0]
 800420a:	4621      	mov	r1, r4
 800420c:	4628      	mov	r0, r5
 800420e:	f000 fcd3 	bl	8004bb8 <_sbrk_r>
 8004212:	1c43      	adds	r3, r0, #1
 8004214:	d00a      	beq.n	800422c <sbrk_aligned+0x34>
 8004216:	1cc4      	adds	r4, r0, #3
 8004218:	f024 0403 	bic.w	r4, r4, #3
 800421c:	42a0      	cmp	r0, r4
 800421e:	d007      	beq.n	8004230 <sbrk_aligned+0x38>
 8004220:	1a21      	subs	r1, r4, r0
 8004222:	4628      	mov	r0, r5
 8004224:	f000 fcc8 	bl	8004bb8 <_sbrk_r>
 8004228:	3001      	adds	r0, #1
 800422a:	d101      	bne.n	8004230 <sbrk_aligned+0x38>
 800422c:	f04f 34ff 	mov.w	r4, #4294967295
 8004230:	4620      	mov	r0, r4
 8004232:	bd70      	pop	{r4, r5, r6, pc}
 8004234:	20000280 	.word	0x20000280

08004238 <_malloc_r>:
 8004238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800423c:	1ccd      	adds	r5, r1, #3
 800423e:	f025 0503 	bic.w	r5, r5, #3
 8004242:	3508      	adds	r5, #8
 8004244:	2d0c      	cmp	r5, #12
 8004246:	bf38      	it	cc
 8004248:	250c      	movcc	r5, #12
 800424a:	2d00      	cmp	r5, #0
 800424c:	4607      	mov	r7, r0
 800424e:	db01      	blt.n	8004254 <_malloc_r+0x1c>
 8004250:	42a9      	cmp	r1, r5
 8004252:	d905      	bls.n	8004260 <_malloc_r+0x28>
 8004254:	230c      	movs	r3, #12
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	2600      	movs	r6, #0
 800425a:	4630      	mov	r0, r6
 800425c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004260:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004334 <_malloc_r+0xfc>
 8004264:	f000 f868 	bl	8004338 <__malloc_lock>
 8004268:	f8d8 3000 	ldr.w	r3, [r8]
 800426c:	461c      	mov	r4, r3
 800426e:	bb5c      	cbnz	r4, 80042c8 <_malloc_r+0x90>
 8004270:	4629      	mov	r1, r5
 8004272:	4638      	mov	r0, r7
 8004274:	f7ff ffc0 	bl	80041f8 <sbrk_aligned>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	4604      	mov	r4, r0
 800427c:	d155      	bne.n	800432a <_malloc_r+0xf2>
 800427e:	f8d8 4000 	ldr.w	r4, [r8]
 8004282:	4626      	mov	r6, r4
 8004284:	2e00      	cmp	r6, #0
 8004286:	d145      	bne.n	8004314 <_malloc_r+0xdc>
 8004288:	2c00      	cmp	r4, #0
 800428a:	d048      	beq.n	800431e <_malloc_r+0xe6>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	4631      	mov	r1, r6
 8004290:	4638      	mov	r0, r7
 8004292:	eb04 0903 	add.w	r9, r4, r3
 8004296:	f000 fc8f 	bl	8004bb8 <_sbrk_r>
 800429a:	4581      	cmp	r9, r0
 800429c:	d13f      	bne.n	800431e <_malloc_r+0xe6>
 800429e:	6821      	ldr	r1, [r4, #0]
 80042a0:	1a6d      	subs	r5, r5, r1
 80042a2:	4629      	mov	r1, r5
 80042a4:	4638      	mov	r0, r7
 80042a6:	f7ff ffa7 	bl	80041f8 <sbrk_aligned>
 80042aa:	3001      	adds	r0, #1
 80042ac:	d037      	beq.n	800431e <_malloc_r+0xe6>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	442b      	add	r3, r5
 80042b2:	6023      	str	r3, [r4, #0]
 80042b4:	f8d8 3000 	ldr.w	r3, [r8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d038      	beq.n	800432e <_malloc_r+0xf6>
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	42a2      	cmp	r2, r4
 80042c0:	d12b      	bne.n	800431a <_malloc_r+0xe2>
 80042c2:	2200      	movs	r2, #0
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	e00f      	b.n	80042e8 <_malloc_r+0xb0>
 80042c8:	6822      	ldr	r2, [r4, #0]
 80042ca:	1b52      	subs	r2, r2, r5
 80042cc:	d41f      	bmi.n	800430e <_malloc_r+0xd6>
 80042ce:	2a0b      	cmp	r2, #11
 80042d0:	d917      	bls.n	8004302 <_malloc_r+0xca>
 80042d2:	1961      	adds	r1, r4, r5
 80042d4:	42a3      	cmp	r3, r4
 80042d6:	6025      	str	r5, [r4, #0]
 80042d8:	bf18      	it	ne
 80042da:	6059      	strne	r1, [r3, #4]
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	bf08      	it	eq
 80042e0:	f8c8 1000 	streq.w	r1, [r8]
 80042e4:	5162      	str	r2, [r4, r5]
 80042e6:	604b      	str	r3, [r1, #4]
 80042e8:	4638      	mov	r0, r7
 80042ea:	f104 060b 	add.w	r6, r4, #11
 80042ee:	f000 f829 	bl	8004344 <__malloc_unlock>
 80042f2:	f026 0607 	bic.w	r6, r6, #7
 80042f6:	1d23      	adds	r3, r4, #4
 80042f8:	1af2      	subs	r2, r6, r3
 80042fa:	d0ae      	beq.n	800425a <_malloc_r+0x22>
 80042fc:	1b9b      	subs	r3, r3, r6
 80042fe:	50a3      	str	r3, [r4, r2]
 8004300:	e7ab      	b.n	800425a <_malloc_r+0x22>
 8004302:	42a3      	cmp	r3, r4
 8004304:	6862      	ldr	r2, [r4, #4]
 8004306:	d1dd      	bne.n	80042c4 <_malloc_r+0x8c>
 8004308:	f8c8 2000 	str.w	r2, [r8]
 800430c:	e7ec      	b.n	80042e8 <_malloc_r+0xb0>
 800430e:	4623      	mov	r3, r4
 8004310:	6864      	ldr	r4, [r4, #4]
 8004312:	e7ac      	b.n	800426e <_malloc_r+0x36>
 8004314:	4634      	mov	r4, r6
 8004316:	6876      	ldr	r6, [r6, #4]
 8004318:	e7b4      	b.n	8004284 <_malloc_r+0x4c>
 800431a:	4613      	mov	r3, r2
 800431c:	e7cc      	b.n	80042b8 <_malloc_r+0x80>
 800431e:	230c      	movs	r3, #12
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	4638      	mov	r0, r7
 8004324:	f000 f80e 	bl	8004344 <__malloc_unlock>
 8004328:	e797      	b.n	800425a <_malloc_r+0x22>
 800432a:	6025      	str	r5, [r4, #0]
 800432c:	e7dc      	b.n	80042e8 <_malloc_r+0xb0>
 800432e:	605b      	str	r3, [r3, #4]
 8004330:	deff      	udf	#255	; 0xff
 8004332:	bf00      	nop
 8004334:	2000027c 	.word	0x2000027c

08004338 <__malloc_lock>:
 8004338:	4801      	ldr	r0, [pc, #4]	; (8004340 <__malloc_lock+0x8>)
 800433a:	f7ff bf0e 	b.w	800415a <__retarget_lock_acquire_recursive>
 800433e:	bf00      	nop
 8004340:	20000278 	.word	0x20000278

08004344 <__malloc_unlock>:
 8004344:	4801      	ldr	r0, [pc, #4]	; (800434c <__malloc_unlock+0x8>)
 8004346:	f7ff bf09 	b.w	800415c <__retarget_lock_release_recursive>
 800434a:	bf00      	nop
 800434c:	20000278 	.word	0x20000278

08004350 <__ssputs_r>:
 8004350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004354:	688e      	ldr	r6, [r1, #8]
 8004356:	461f      	mov	r7, r3
 8004358:	42be      	cmp	r6, r7
 800435a:	680b      	ldr	r3, [r1, #0]
 800435c:	4682      	mov	sl, r0
 800435e:	460c      	mov	r4, r1
 8004360:	4690      	mov	r8, r2
 8004362:	d82c      	bhi.n	80043be <__ssputs_r+0x6e>
 8004364:	898a      	ldrh	r2, [r1, #12]
 8004366:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800436a:	d026      	beq.n	80043ba <__ssputs_r+0x6a>
 800436c:	6965      	ldr	r5, [r4, #20]
 800436e:	6909      	ldr	r1, [r1, #16]
 8004370:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004374:	eba3 0901 	sub.w	r9, r3, r1
 8004378:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800437c:	1c7b      	adds	r3, r7, #1
 800437e:	444b      	add	r3, r9
 8004380:	106d      	asrs	r5, r5, #1
 8004382:	429d      	cmp	r5, r3
 8004384:	bf38      	it	cc
 8004386:	461d      	movcc	r5, r3
 8004388:	0553      	lsls	r3, r2, #21
 800438a:	d527      	bpl.n	80043dc <__ssputs_r+0x8c>
 800438c:	4629      	mov	r1, r5
 800438e:	f7ff ff53 	bl	8004238 <_malloc_r>
 8004392:	4606      	mov	r6, r0
 8004394:	b360      	cbz	r0, 80043f0 <__ssputs_r+0xa0>
 8004396:	6921      	ldr	r1, [r4, #16]
 8004398:	464a      	mov	r2, r9
 800439a:	f000 fc1d 	bl	8004bd8 <memcpy>
 800439e:	89a3      	ldrh	r3, [r4, #12]
 80043a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a8:	81a3      	strh	r3, [r4, #12]
 80043aa:	6126      	str	r6, [r4, #16]
 80043ac:	6165      	str	r5, [r4, #20]
 80043ae:	444e      	add	r6, r9
 80043b0:	eba5 0509 	sub.w	r5, r5, r9
 80043b4:	6026      	str	r6, [r4, #0]
 80043b6:	60a5      	str	r5, [r4, #8]
 80043b8:	463e      	mov	r6, r7
 80043ba:	42be      	cmp	r6, r7
 80043bc:	d900      	bls.n	80043c0 <__ssputs_r+0x70>
 80043be:	463e      	mov	r6, r7
 80043c0:	6820      	ldr	r0, [r4, #0]
 80043c2:	4632      	mov	r2, r6
 80043c4:	4641      	mov	r1, r8
 80043c6:	f000 fbbb 	bl	8004b40 <memmove>
 80043ca:	68a3      	ldr	r3, [r4, #8]
 80043cc:	1b9b      	subs	r3, r3, r6
 80043ce:	60a3      	str	r3, [r4, #8]
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	4433      	add	r3, r6
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	2000      	movs	r0, #0
 80043d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043dc:	462a      	mov	r2, r5
 80043de:	f000 fc09 	bl	8004bf4 <_realloc_r>
 80043e2:	4606      	mov	r6, r0
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d1e0      	bne.n	80043aa <__ssputs_r+0x5a>
 80043e8:	6921      	ldr	r1, [r4, #16]
 80043ea:	4650      	mov	r0, sl
 80043ec:	f7ff feb8 	bl	8004160 <_free_r>
 80043f0:	230c      	movs	r3, #12
 80043f2:	f8ca 3000 	str.w	r3, [sl]
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043fc:	81a3      	strh	r3, [r4, #12]
 80043fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004402:	e7e9      	b.n	80043d8 <__ssputs_r+0x88>

08004404 <_svfiprintf_r>:
 8004404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	4698      	mov	r8, r3
 800440a:	898b      	ldrh	r3, [r1, #12]
 800440c:	061b      	lsls	r3, r3, #24
 800440e:	b09d      	sub	sp, #116	; 0x74
 8004410:	4607      	mov	r7, r0
 8004412:	460d      	mov	r5, r1
 8004414:	4614      	mov	r4, r2
 8004416:	d50e      	bpl.n	8004436 <_svfiprintf_r+0x32>
 8004418:	690b      	ldr	r3, [r1, #16]
 800441a:	b963      	cbnz	r3, 8004436 <_svfiprintf_r+0x32>
 800441c:	2140      	movs	r1, #64	; 0x40
 800441e:	f7ff ff0b 	bl	8004238 <_malloc_r>
 8004422:	6028      	str	r0, [r5, #0]
 8004424:	6128      	str	r0, [r5, #16]
 8004426:	b920      	cbnz	r0, 8004432 <_svfiprintf_r+0x2e>
 8004428:	230c      	movs	r3, #12
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	f04f 30ff 	mov.w	r0, #4294967295
 8004430:	e0d0      	b.n	80045d4 <_svfiprintf_r+0x1d0>
 8004432:	2340      	movs	r3, #64	; 0x40
 8004434:	616b      	str	r3, [r5, #20]
 8004436:	2300      	movs	r3, #0
 8004438:	9309      	str	r3, [sp, #36]	; 0x24
 800443a:	2320      	movs	r3, #32
 800443c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004440:	f8cd 800c 	str.w	r8, [sp, #12]
 8004444:	2330      	movs	r3, #48	; 0x30
 8004446:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80045ec <_svfiprintf_r+0x1e8>
 800444a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800444e:	f04f 0901 	mov.w	r9, #1
 8004452:	4623      	mov	r3, r4
 8004454:	469a      	mov	sl, r3
 8004456:	f813 2b01 	ldrb.w	r2, [r3], #1
 800445a:	b10a      	cbz	r2, 8004460 <_svfiprintf_r+0x5c>
 800445c:	2a25      	cmp	r2, #37	; 0x25
 800445e:	d1f9      	bne.n	8004454 <_svfiprintf_r+0x50>
 8004460:	ebba 0b04 	subs.w	fp, sl, r4
 8004464:	d00b      	beq.n	800447e <_svfiprintf_r+0x7a>
 8004466:	465b      	mov	r3, fp
 8004468:	4622      	mov	r2, r4
 800446a:	4629      	mov	r1, r5
 800446c:	4638      	mov	r0, r7
 800446e:	f7ff ff6f 	bl	8004350 <__ssputs_r>
 8004472:	3001      	adds	r0, #1
 8004474:	f000 80a9 	beq.w	80045ca <_svfiprintf_r+0x1c6>
 8004478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800447a:	445a      	add	r2, fp
 800447c:	9209      	str	r2, [sp, #36]	; 0x24
 800447e:	f89a 3000 	ldrb.w	r3, [sl]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 80a1 	beq.w	80045ca <_svfiprintf_r+0x1c6>
 8004488:	2300      	movs	r3, #0
 800448a:	f04f 32ff 	mov.w	r2, #4294967295
 800448e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004492:	f10a 0a01 	add.w	sl, sl, #1
 8004496:	9304      	str	r3, [sp, #16]
 8004498:	9307      	str	r3, [sp, #28]
 800449a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800449e:	931a      	str	r3, [sp, #104]	; 0x68
 80044a0:	4654      	mov	r4, sl
 80044a2:	2205      	movs	r2, #5
 80044a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a8:	4850      	ldr	r0, [pc, #320]	; (80045ec <_svfiprintf_r+0x1e8>)
 80044aa:	f7fb fea9 	bl	8000200 <memchr>
 80044ae:	9a04      	ldr	r2, [sp, #16]
 80044b0:	b9d8      	cbnz	r0, 80044ea <_svfiprintf_r+0xe6>
 80044b2:	06d0      	lsls	r0, r2, #27
 80044b4:	bf44      	itt	mi
 80044b6:	2320      	movmi	r3, #32
 80044b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044bc:	0711      	lsls	r1, r2, #28
 80044be:	bf44      	itt	mi
 80044c0:	232b      	movmi	r3, #43	; 0x2b
 80044c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044c6:	f89a 3000 	ldrb.w	r3, [sl]
 80044ca:	2b2a      	cmp	r3, #42	; 0x2a
 80044cc:	d015      	beq.n	80044fa <_svfiprintf_r+0xf6>
 80044ce:	9a07      	ldr	r2, [sp, #28]
 80044d0:	4654      	mov	r4, sl
 80044d2:	2000      	movs	r0, #0
 80044d4:	f04f 0c0a 	mov.w	ip, #10
 80044d8:	4621      	mov	r1, r4
 80044da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044de:	3b30      	subs	r3, #48	; 0x30
 80044e0:	2b09      	cmp	r3, #9
 80044e2:	d94d      	bls.n	8004580 <_svfiprintf_r+0x17c>
 80044e4:	b1b0      	cbz	r0, 8004514 <_svfiprintf_r+0x110>
 80044e6:	9207      	str	r2, [sp, #28]
 80044e8:	e014      	b.n	8004514 <_svfiprintf_r+0x110>
 80044ea:	eba0 0308 	sub.w	r3, r0, r8
 80044ee:	fa09 f303 	lsl.w	r3, r9, r3
 80044f2:	4313      	orrs	r3, r2
 80044f4:	9304      	str	r3, [sp, #16]
 80044f6:	46a2      	mov	sl, r4
 80044f8:	e7d2      	b.n	80044a0 <_svfiprintf_r+0x9c>
 80044fa:	9b03      	ldr	r3, [sp, #12]
 80044fc:	1d19      	adds	r1, r3, #4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	9103      	str	r1, [sp, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	bfbb      	ittet	lt
 8004506:	425b      	neglt	r3, r3
 8004508:	f042 0202 	orrlt.w	r2, r2, #2
 800450c:	9307      	strge	r3, [sp, #28]
 800450e:	9307      	strlt	r3, [sp, #28]
 8004510:	bfb8      	it	lt
 8004512:	9204      	strlt	r2, [sp, #16]
 8004514:	7823      	ldrb	r3, [r4, #0]
 8004516:	2b2e      	cmp	r3, #46	; 0x2e
 8004518:	d10c      	bne.n	8004534 <_svfiprintf_r+0x130>
 800451a:	7863      	ldrb	r3, [r4, #1]
 800451c:	2b2a      	cmp	r3, #42	; 0x2a
 800451e:	d134      	bne.n	800458a <_svfiprintf_r+0x186>
 8004520:	9b03      	ldr	r3, [sp, #12]
 8004522:	1d1a      	adds	r2, r3, #4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	9203      	str	r2, [sp, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	bfb8      	it	lt
 800452c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004530:	3402      	adds	r4, #2
 8004532:	9305      	str	r3, [sp, #20]
 8004534:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80045fc <_svfiprintf_r+0x1f8>
 8004538:	7821      	ldrb	r1, [r4, #0]
 800453a:	2203      	movs	r2, #3
 800453c:	4650      	mov	r0, sl
 800453e:	f7fb fe5f 	bl	8000200 <memchr>
 8004542:	b138      	cbz	r0, 8004554 <_svfiprintf_r+0x150>
 8004544:	9b04      	ldr	r3, [sp, #16]
 8004546:	eba0 000a 	sub.w	r0, r0, sl
 800454a:	2240      	movs	r2, #64	; 0x40
 800454c:	4082      	lsls	r2, r0
 800454e:	4313      	orrs	r3, r2
 8004550:	3401      	adds	r4, #1
 8004552:	9304      	str	r3, [sp, #16]
 8004554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004558:	4825      	ldr	r0, [pc, #148]	; (80045f0 <_svfiprintf_r+0x1ec>)
 800455a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800455e:	2206      	movs	r2, #6
 8004560:	f7fb fe4e 	bl	8000200 <memchr>
 8004564:	2800      	cmp	r0, #0
 8004566:	d038      	beq.n	80045da <_svfiprintf_r+0x1d6>
 8004568:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <_svfiprintf_r+0x1f0>)
 800456a:	bb1b      	cbnz	r3, 80045b4 <_svfiprintf_r+0x1b0>
 800456c:	9b03      	ldr	r3, [sp, #12]
 800456e:	3307      	adds	r3, #7
 8004570:	f023 0307 	bic.w	r3, r3, #7
 8004574:	3308      	adds	r3, #8
 8004576:	9303      	str	r3, [sp, #12]
 8004578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800457a:	4433      	add	r3, r6
 800457c:	9309      	str	r3, [sp, #36]	; 0x24
 800457e:	e768      	b.n	8004452 <_svfiprintf_r+0x4e>
 8004580:	fb0c 3202 	mla	r2, ip, r2, r3
 8004584:	460c      	mov	r4, r1
 8004586:	2001      	movs	r0, #1
 8004588:	e7a6      	b.n	80044d8 <_svfiprintf_r+0xd4>
 800458a:	2300      	movs	r3, #0
 800458c:	3401      	adds	r4, #1
 800458e:	9305      	str	r3, [sp, #20]
 8004590:	4619      	mov	r1, r3
 8004592:	f04f 0c0a 	mov.w	ip, #10
 8004596:	4620      	mov	r0, r4
 8004598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800459c:	3a30      	subs	r2, #48	; 0x30
 800459e:	2a09      	cmp	r2, #9
 80045a0:	d903      	bls.n	80045aa <_svfiprintf_r+0x1a6>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0c6      	beq.n	8004534 <_svfiprintf_r+0x130>
 80045a6:	9105      	str	r1, [sp, #20]
 80045a8:	e7c4      	b.n	8004534 <_svfiprintf_r+0x130>
 80045aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80045ae:	4604      	mov	r4, r0
 80045b0:	2301      	movs	r3, #1
 80045b2:	e7f0      	b.n	8004596 <_svfiprintf_r+0x192>
 80045b4:	ab03      	add	r3, sp, #12
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	462a      	mov	r2, r5
 80045ba:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <_svfiprintf_r+0x1f4>)
 80045bc:	a904      	add	r1, sp, #16
 80045be:	4638      	mov	r0, r7
 80045c0:	f3af 8000 	nop.w
 80045c4:	1c42      	adds	r2, r0, #1
 80045c6:	4606      	mov	r6, r0
 80045c8:	d1d6      	bne.n	8004578 <_svfiprintf_r+0x174>
 80045ca:	89ab      	ldrh	r3, [r5, #12]
 80045cc:	065b      	lsls	r3, r3, #25
 80045ce:	f53f af2d 	bmi.w	800442c <_svfiprintf_r+0x28>
 80045d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045d4:	b01d      	add	sp, #116	; 0x74
 80045d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045da:	ab03      	add	r3, sp, #12
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	462a      	mov	r2, r5
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <_svfiprintf_r+0x1f4>)
 80045e2:	a904      	add	r1, sp, #16
 80045e4:	4638      	mov	r0, r7
 80045e6:	f000 f879 	bl	80046dc <_printf_i>
 80045ea:	e7eb      	b.n	80045c4 <_svfiprintf_r+0x1c0>
 80045ec:	08004cdc 	.word	0x08004cdc
 80045f0:	08004ce6 	.word	0x08004ce6
 80045f4:	00000000 	.word	0x00000000
 80045f8:	08004351 	.word	0x08004351
 80045fc:	08004ce2 	.word	0x08004ce2

08004600 <_printf_common>:
 8004600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004604:	4616      	mov	r6, r2
 8004606:	4699      	mov	r9, r3
 8004608:	688a      	ldr	r2, [r1, #8]
 800460a:	690b      	ldr	r3, [r1, #16]
 800460c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004610:	4293      	cmp	r3, r2
 8004612:	bfb8      	it	lt
 8004614:	4613      	movlt	r3, r2
 8004616:	6033      	str	r3, [r6, #0]
 8004618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800461c:	4607      	mov	r7, r0
 800461e:	460c      	mov	r4, r1
 8004620:	b10a      	cbz	r2, 8004626 <_printf_common+0x26>
 8004622:	3301      	adds	r3, #1
 8004624:	6033      	str	r3, [r6, #0]
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	0699      	lsls	r1, r3, #26
 800462a:	bf42      	ittt	mi
 800462c:	6833      	ldrmi	r3, [r6, #0]
 800462e:	3302      	addmi	r3, #2
 8004630:	6033      	strmi	r3, [r6, #0]
 8004632:	6825      	ldr	r5, [r4, #0]
 8004634:	f015 0506 	ands.w	r5, r5, #6
 8004638:	d106      	bne.n	8004648 <_printf_common+0x48>
 800463a:	f104 0a19 	add.w	sl, r4, #25
 800463e:	68e3      	ldr	r3, [r4, #12]
 8004640:	6832      	ldr	r2, [r6, #0]
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	42ab      	cmp	r3, r5
 8004646:	dc26      	bgt.n	8004696 <_printf_common+0x96>
 8004648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800464c:	1e13      	subs	r3, r2, #0
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	bf18      	it	ne
 8004652:	2301      	movne	r3, #1
 8004654:	0692      	lsls	r2, r2, #26
 8004656:	d42b      	bmi.n	80046b0 <_printf_common+0xb0>
 8004658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800465c:	4649      	mov	r1, r9
 800465e:	4638      	mov	r0, r7
 8004660:	47c0      	blx	r8
 8004662:	3001      	adds	r0, #1
 8004664:	d01e      	beq.n	80046a4 <_printf_common+0xa4>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	6922      	ldr	r2, [r4, #16]
 800466a:	f003 0306 	and.w	r3, r3, #6
 800466e:	2b04      	cmp	r3, #4
 8004670:	bf02      	ittt	eq
 8004672:	68e5      	ldreq	r5, [r4, #12]
 8004674:	6833      	ldreq	r3, [r6, #0]
 8004676:	1aed      	subeq	r5, r5, r3
 8004678:	68a3      	ldr	r3, [r4, #8]
 800467a:	bf0c      	ite	eq
 800467c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004680:	2500      	movne	r5, #0
 8004682:	4293      	cmp	r3, r2
 8004684:	bfc4      	itt	gt
 8004686:	1a9b      	subgt	r3, r3, r2
 8004688:	18ed      	addgt	r5, r5, r3
 800468a:	2600      	movs	r6, #0
 800468c:	341a      	adds	r4, #26
 800468e:	42b5      	cmp	r5, r6
 8004690:	d11a      	bne.n	80046c8 <_printf_common+0xc8>
 8004692:	2000      	movs	r0, #0
 8004694:	e008      	b.n	80046a8 <_printf_common+0xa8>
 8004696:	2301      	movs	r3, #1
 8004698:	4652      	mov	r2, sl
 800469a:	4649      	mov	r1, r9
 800469c:	4638      	mov	r0, r7
 800469e:	47c0      	blx	r8
 80046a0:	3001      	adds	r0, #1
 80046a2:	d103      	bne.n	80046ac <_printf_common+0xac>
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295
 80046a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ac:	3501      	adds	r5, #1
 80046ae:	e7c6      	b.n	800463e <_printf_common+0x3e>
 80046b0:	18e1      	adds	r1, r4, r3
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	2030      	movs	r0, #48	; 0x30
 80046b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046ba:	4422      	add	r2, r4
 80046bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046c4:	3302      	adds	r3, #2
 80046c6:	e7c7      	b.n	8004658 <_printf_common+0x58>
 80046c8:	2301      	movs	r3, #1
 80046ca:	4622      	mov	r2, r4
 80046cc:	4649      	mov	r1, r9
 80046ce:	4638      	mov	r0, r7
 80046d0:	47c0      	blx	r8
 80046d2:	3001      	adds	r0, #1
 80046d4:	d0e6      	beq.n	80046a4 <_printf_common+0xa4>
 80046d6:	3601      	adds	r6, #1
 80046d8:	e7d9      	b.n	800468e <_printf_common+0x8e>
	...

080046dc <_printf_i>:
 80046dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046e0:	7e0f      	ldrb	r7, [r1, #24]
 80046e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046e4:	2f78      	cmp	r7, #120	; 0x78
 80046e6:	4691      	mov	r9, r2
 80046e8:	4680      	mov	r8, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	469a      	mov	sl, r3
 80046ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046f2:	d807      	bhi.n	8004704 <_printf_i+0x28>
 80046f4:	2f62      	cmp	r7, #98	; 0x62
 80046f6:	d80a      	bhi.n	800470e <_printf_i+0x32>
 80046f8:	2f00      	cmp	r7, #0
 80046fa:	f000 80d4 	beq.w	80048a6 <_printf_i+0x1ca>
 80046fe:	2f58      	cmp	r7, #88	; 0x58
 8004700:	f000 80c0 	beq.w	8004884 <_printf_i+0x1a8>
 8004704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800470c:	e03a      	b.n	8004784 <_printf_i+0xa8>
 800470e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004712:	2b15      	cmp	r3, #21
 8004714:	d8f6      	bhi.n	8004704 <_printf_i+0x28>
 8004716:	a101      	add	r1, pc, #4	; (adr r1, 800471c <_printf_i+0x40>)
 8004718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800471c:	08004775 	.word	0x08004775
 8004720:	08004789 	.word	0x08004789
 8004724:	08004705 	.word	0x08004705
 8004728:	08004705 	.word	0x08004705
 800472c:	08004705 	.word	0x08004705
 8004730:	08004705 	.word	0x08004705
 8004734:	08004789 	.word	0x08004789
 8004738:	08004705 	.word	0x08004705
 800473c:	08004705 	.word	0x08004705
 8004740:	08004705 	.word	0x08004705
 8004744:	08004705 	.word	0x08004705
 8004748:	0800488d 	.word	0x0800488d
 800474c:	080047b5 	.word	0x080047b5
 8004750:	08004847 	.word	0x08004847
 8004754:	08004705 	.word	0x08004705
 8004758:	08004705 	.word	0x08004705
 800475c:	080048af 	.word	0x080048af
 8004760:	08004705 	.word	0x08004705
 8004764:	080047b5 	.word	0x080047b5
 8004768:	08004705 	.word	0x08004705
 800476c:	08004705 	.word	0x08004705
 8004770:	0800484f 	.word	0x0800484f
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	1d1a      	adds	r2, r3, #4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	602a      	str	r2, [r5, #0]
 800477c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004784:	2301      	movs	r3, #1
 8004786:	e09f      	b.n	80048c8 <_printf_i+0x1ec>
 8004788:	6820      	ldr	r0, [r4, #0]
 800478a:	682b      	ldr	r3, [r5, #0]
 800478c:	0607      	lsls	r7, r0, #24
 800478e:	f103 0104 	add.w	r1, r3, #4
 8004792:	6029      	str	r1, [r5, #0]
 8004794:	d501      	bpl.n	800479a <_printf_i+0xbe>
 8004796:	681e      	ldr	r6, [r3, #0]
 8004798:	e003      	b.n	80047a2 <_printf_i+0xc6>
 800479a:	0646      	lsls	r6, r0, #25
 800479c:	d5fb      	bpl.n	8004796 <_printf_i+0xba>
 800479e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047a2:	2e00      	cmp	r6, #0
 80047a4:	da03      	bge.n	80047ae <_printf_i+0xd2>
 80047a6:	232d      	movs	r3, #45	; 0x2d
 80047a8:	4276      	negs	r6, r6
 80047aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ae:	485a      	ldr	r0, [pc, #360]	; (8004918 <_printf_i+0x23c>)
 80047b0:	230a      	movs	r3, #10
 80047b2:	e012      	b.n	80047da <_printf_i+0xfe>
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	1d19      	adds	r1, r3, #4
 80047ba:	6029      	str	r1, [r5, #0]
 80047bc:	0605      	lsls	r5, r0, #24
 80047be:	d501      	bpl.n	80047c4 <_printf_i+0xe8>
 80047c0:	681e      	ldr	r6, [r3, #0]
 80047c2:	e002      	b.n	80047ca <_printf_i+0xee>
 80047c4:	0641      	lsls	r1, r0, #25
 80047c6:	d5fb      	bpl.n	80047c0 <_printf_i+0xe4>
 80047c8:	881e      	ldrh	r6, [r3, #0]
 80047ca:	4853      	ldr	r0, [pc, #332]	; (8004918 <_printf_i+0x23c>)
 80047cc:	2f6f      	cmp	r7, #111	; 0x6f
 80047ce:	bf0c      	ite	eq
 80047d0:	2308      	moveq	r3, #8
 80047d2:	230a      	movne	r3, #10
 80047d4:	2100      	movs	r1, #0
 80047d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047da:	6865      	ldr	r5, [r4, #4]
 80047dc:	60a5      	str	r5, [r4, #8]
 80047de:	2d00      	cmp	r5, #0
 80047e0:	bfa2      	ittt	ge
 80047e2:	6821      	ldrge	r1, [r4, #0]
 80047e4:	f021 0104 	bicge.w	r1, r1, #4
 80047e8:	6021      	strge	r1, [r4, #0]
 80047ea:	b90e      	cbnz	r6, 80047f0 <_printf_i+0x114>
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	d04b      	beq.n	8004888 <_printf_i+0x1ac>
 80047f0:	4615      	mov	r5, r2
 80047f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80047f6:	fb03 6711 	mls	r7, r3, r1, r6
 80047fa:	5dc7      	ldrb	r7, [r0, r7]
 80047fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004800:	4637      	mov	r7, r6
 8004802:	42bb      	cmp	r3, r7
 8004804:	460e      	mov	r6, r1
 8004806:	d9f4      	bls.n	80047f2 <_printf_i+0x116>
 8004808:	2b08      	cmp	r3, #8
 800480a:	d10b      	bne.n	8004824 <_printf_i+0x148>
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	07de      	lsls	r6, r3, #31
 8004810:	d508      	bpl.n	8004824 <_printf_i+0x148>
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	6861      	ldr	r1, [r4, #4]
 8004816:	4299      	cmp	r1, r3
 8004818:	bfde      	ittt	le
 800481a:	2330      	movle	r3, #48	; 0x30
 800481c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004820:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004824:	1b52      	subs	r2, r2, r5
 8004826:	6122      	str	r2, [r4, #16]
 8004828:	f8cd a000 	str.w	sl, [sp]
 800482c:	464b      	mov	r3, r9
 800482e:	aa03      	add	r2, sp, #12
 8004830:	4621      	mov	r1, r4
 8004832:	4640      	mov	r0, r8
 8004834:	f7ff fee4 	bl	8004600 <_printf_common>
 8004838:	3001      	adds	r0, #1
 800483a:	d14a      	bne.n	80048d2 <_printf_i+0x1f6>
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	b004      	add	sp, #16
 8004842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	f043 0320 	orr.w	r3, r3, #32
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	4833      	ldr	r0, [pc, #204]	; (800491c <_printf_i+0x240>)
 8004850:	2778      	movs	r7, #120	; 0x78
 8004852:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	6829      	ldr	r1, [r5, #0]
 800485a:	061f      	lsls	r7, r3, #24
 800485c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004860:	d402      	bmi.n	8004868 <_printf_i+0x18c>
 8004862:	065f      	lsls	r7, r3, #25
 8004864:	bf48      	it	mi
 8004866:	b2b6      	uxthmi	r6, r6
 8004868:	07df      	lsls	r7, r3, #31
 800486a:	bf48      	it	mi
 800486c:	f043 0320 	orrmi.w	r3, r3, #32
 8004870:	6029      	str	r1, [r5, #0]
 8004872:	bf48      	it	mi
 8004874:	6023      	strmi	r3, [r4, #0]
 8004876:	b91e      	cbnz	r6, 8004880 <_printf_i+0x1a4>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	f023 0320 	bic.w	r3, r3, #32
 800487e:	6023      	str	r3, [r4, #0]
 8004880:	2310      	movs	r3, #16
 8004882:	e7a7      	b.n	80047d4 <_printf_i+0xf8>
 8004884:	4824      	ldr	r0, [pc, #144]	; (8004918 <_printf_i+0x23c>)
 8004886:	e7e4      	b.n	8004852 <_printf_i+0x176>
 8004888:	4615      	mov	r5, r2
 800488a:	e7bd      	b.n	8004808 <_printf_i+0x12c>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	6826      	ldr	r6, [r4, #0]
 8004890:	6961      	ldr	r1, [r4, #20]
 8004892:	1d18      	adds	r0, r3, #4
 8004894:	6028      	str	r0, [r5, #0]
 8004896:	0635      	lsls	r5, r6, #24
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	d501      	bpl.n	80048a0 <_printf_i+0x1c4>
 800489c:	6019      	str	r1, [r3, #0]
 800489e:	e002      	b.n	80048a6 <_printf_i+0x1ca>
 80048a0:	0670      	lsls	r0, r6, #25
 80048a2:	d5fb      	bpl.n	800489c <_printf_i+0x1c0>
 80048a4:	8019      	strh	r1, [r3, #0]
 80048a6:	2300      	movs	r3, #0
 80048a8:	6123      	str	r3, [r4, #16]
 80048aa:	4615      	mov	r5, r2
 80048ac:	e7bc      	b.n	8004828 <_printf_i+0x14c>
 80048ae:	682b      	ldr	r3, [r5, #0]
 80048b0:	1d1a      	adds	r2, r3, #4
 80048b2:	602a      	str	r2, [r5, #0]
 80048b4:	681d      	ldr	r5, [r3, #0]
 80048b6:	6862      	ldr	r2, [r4, #4]
 80048b8:	2100      	movs	r1, #0
 80048ba:	4628      	mov	r0, r5
 80048bc:	f7fb fca0 	bl	8000200 <memchr>
 80048c0:	b108      	cbz	r0, 80048c6 <_printf_i+0x1ea>
 80048c2:	1b40      	subs	r0, r0, r5
 80048c4:	6060      	str	r0, [r4, #4]
 80048c6:	6863      	ldr	r3, [r4, #4]
 80048c8:	6123      	str	r3, [r4, #16]
 80048ca:	2300      	movs	r3, #0
 80048cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048d0:	e7aa      	b.n	8004828 <_printf_i+0x14c>
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	462a      	mov	r2, r5
 80048d6:	4649      	mov	r1, r9
 80048d8:	4640      	mov	r0, r8
 80048da:	47d0      	blx	sl
 80048dc:	3001      	adds	r0, #1
 80048de:	d0ad      	beq.n	800483c <_printf_i+0x160>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	079b      	lsls	r3, r3, #30
 80048e4:	d413      	bmi.n	800490e <_printf_i+0x232>
 80048e6:	68e0      	ldr	r0, [r4, #12]
 80048e8:	9b03      	ldr	r3, [sp, #12]
 80048ea:	4298      	cmp	r0, r3
 80048ec:	bfb8      	it	lt
 80048ee:	4618      	movlt	r0, r3
 80048f0:	e7a6      	b.n	8004840 <_printf_i+0x164>
 80048f2:	2301      	movs	r3, #1
 80048f4:	4632      	mov	r2, r6
 80048f6:	4649      	mov	r1, r9
 80048f8:	4640      	mov	r0, r8
 80048fa:	47d0      	blx	sl
 80048fc:	3001      	adds	r0, #1
 80048fe:	d09d      	beq.n	800483c <_printf_i+0x160>
 8004900:	3501      	adds	r5, #1
 8004902:	68e3      	ldr	r3, [r4, #12]
 8004904:	9903      	ldr	r1, [sp, #12]
 8004906:	1a5b      	subs	r3, r3, r1
 8004908:	42ab      	cmp	r3, r5
 800490a:	dcf2      	bgt.n	80048f2 <_printf_i+0x216>
 800490c:	e7eb      	b.n	80048e6 <_printf_i+0x20a>
 800490e:	2500      	movs	r5, #0
 8004910:	f104 0619 	add.w	r6, r4, #25
 8004914:	e7f5      	b.n	8004902 <_printf_i+0x226>
 8004916:	bf00      	nop
 8004918:	08004ced 	.word	0x08004ced
 800491c:	08004cfe 	.word	0x08004cfe

08004920 <__sflush_r>:
 8004920:	898a      	ldrh	r2, [r1, #12]
 8004922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004926:	4605      	mov	r5, r0
 8004928:	0710      	lsls	r0, r2, #28
 800492a:	460c      	mov	r4, r1
 800492c:	d458      	bmi.n	80049e0 <__sflush_r+0xc0>
 800492e:	684b      	ldr	r3, [r1, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	dc05      	bgt.n	8004940 <__sflush_r+0x20>
 8004934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	dc02      	bgt.n	8004940 <__sflush_r+0x20>
 800493a:	2000      	movs	r0, #0
 800493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004942:	2e00      	cmp	r6, #0
 8004944:	d0f9      	beq.n	800493a <__sflush_r+0x1a>
 8004946:	2300      	movs	r3, #0
 8004948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800494c:	682f      	ldr	r7, [r5, #0]
 800494e:	6a21      	ldr	r1, [r4, #32]
 8004950:	602b      	str	r3, [r5, #0]
 8004952:	d032      	beq.n	80049ba <__sflush_r+0x9a>
 8004954:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004956:	89a3      	ldrh	r3, [r4, #12]
 8004958:	075a      	lsls	r2, r3, #29
 800495a:	d505      	bpl.n	8004968 <__sflush_r+0x48>
 800495c:	6863      	ldr	r3, [r4, #4]
 800495e:	1ac0      	subs	r0, r0, r3
 8004960:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004962:	b10b      	cbz	r3, 8004968 <__sflush_r+0x48>
 8004964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004966:	1ac0      	subs	r0, r0, r3
 8004968:	2300      	movs	r3, #0
 800496a:	4602      	mov	r2, r0
 800496c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800496e:	6a21      	ldr	r1, [r4, #32]
 8004970:	4628      	mov	r0, r5
 8004972:	47b0      	blx	r6
 8004974:	1c43      	adds	r3, r0, #1
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	d106      	bne.n	8004988 <__sflush_r+0x68>
 800497a:	6829      	ldr	r1, [r5, #0]
 800497c:	291d      	cmp	r1, #29
 800497e:	d82b      	bhi.n	80049d8 <__sflush_r+0xb8>
 8004980:	4a29      	ldr	r2, [pc, #164]	; (8004a28 <__sflush_r+0x108>)
 8004982:	410a      	asrs	r2, r1
 8004984:	07d6      	lsls	r6, r2, #31
 8004986:	d427      	bmi.n	80049d8 <__sflush_r+0xb8>
 8004988:	2200      	movs	r2, #0
 800498a:	6062      	str	r2, [r4, #4]
 800498c:	04d9      	lsls	r1, r3, #19
 800498e:	6922      	ldr	r2, [r4, #16]
 8004990:	6022      	str	r2, [r4, #0]
 8004992:	d504      	bpl.n	800499e <__sflush_r+0x7e>
 8004994:	1c42      	adds	r2, r0, #1
 8004996:	d101      	bne.n	800499c <__sflush_r+0x7c>
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	b903      	cbnz	r3, 800499e <__sflush_r+0x7e>
 800499c:	6560      	str	r0, [r4, #84]	; 0x54
 800499e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049a0:	602f      	str	r7, [r5, #0]
 80049a2:	2900      	cmp	r1, #0
 80049a4:	d0c9      	beq.n	800493a <__sflush_r+0x1a>
 80049a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049aa:	4299      	cmp	r1, r3
 80049ac:	d002      	beq.n	80049b4 <__sflush_r+0x94>
 80049ae:	4628      	mov	r0, r5
 80049b0:	f7ff fbd6 	bl	8004160 <_free_r>
 80049b4:	2000      	movs	r0, #0
 80049b6:	6360      	str	r0, [r4, #52]	; 0x34
 80049b8:	e7c0      	b.n	800493c <__sflush_r+0x1c>
 80049ba:	2301      	movs	r3, #1
 80049bc:	4628      	mov	r0, r5
 80049be:	47b0      	blx	r6
 80049c0:	1c41      	adds	r1, r0, #1
 80049c2:	d1c8      	bne.n	8004956 <__sflush_r+0x36>
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0c5      	beq.n	8004956 <__sflush_r+0x36>
 80049ca:	2b1d      	cmp	r3, #29
 80049cc:	d001      	beq.n	80049d2 <__sflush_r+0xb2>
 80049ce:	2b16      	cmp	r3, #22
 80049d0:	d101      	bne.n	80049d6 <__sflush_r+0xb6>
 80049d2:	602f      	str	r7, [r5, #0]
 80049d4:	e7b1      	b.n	800493a <__sflush_r+0x1a>
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049dc:	81a3      	strh	r3, [r4, #12]
 80049de:	e7ad      	b.n	800493c <__sflush_r+0x1c>
 80049e0:	690f      	ldr	r7, [r1, #16]
 80049e2:	2f00      	cmp	r7, #0
 80049e4:	d0a9      	beq.n	800493a <__sflush_r+0x1a>
 80049e6:	0793      	lsls	r3, r2, #30
 80049e8:	680e      	ldr	r6, [r1, #0]
 80049ea:	bf08      	it	eq
 80049ec:	694b      	ldreq	r3, [r1, #20]
 80049ee:	600f      	str	r7, [r1, #0]
 80049f0:	bf18      	it	ne
 80049f2:	2300      	movne	r3, #0
 80049f4:	eba6 0807 	sub.w	r8, r6, r7
 80049f8:	608b      	str	r3, [r1, #8]
 80049fa:	f1b8 0f00 	cmp.w	r8, #0
 80049fe:	dd9c      	ble.n	800493a <__sflush_r+0x1a>
 8004a00:	6a21      	ldr	r1, [r4, #32]
 8004a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a04:	4643      	mov	r3, r8
 8004a06:	463a      	mov	r2, r7
 8004a08:	4628      	mov	r0, r5
 8004a0a:	47b0      	blx	r6
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	dc06      	bgt.n	8004a1e <__sflush_r+0xfe>
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a16:	81a3      	strh	r3, [r4, #12]
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	e78e      	b.n	800493c <__sflush_r+0x1c>
 8004a1e:	4407      	add	r7, r0
 8004a20:	eba8 0800 	sub.w	r8, r8, r0
 8004a24:	e7e9      	b.n	80049fa <__sflush_r+0xda>
 8004a26:	bf00      	nop
 8004a28:	dfbffffe 	.word	0xdfbffffe

08004a2c <_fflush_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	690b      	ldr	r3, [r1, #16]
 8004a30:	4605      	mov	r5, r0
 8004a32:	460c      	mov	r4, r1
 8004a34:	b913      	cbnz	r3, 8004a3c <_fflush_r+0x10>
 8004a36:	2500      	movs	r5, #0
 8004a38:	4628      	mov	r0, r5
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	b118      	cbz	r0, 8004a46 <_fflush_r+0x1a>
 8004a3e:	6a03      	ldr	r3, [r0, #32]
 8004a40:	b90b      	cbnz	r3, 8004a46 <_fflush_r+0x1a>
 8004a42:	f7ff f987 	bl	8003d54 <__sinit>
 8004a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f3      	beq.n	8004a36 <_fflush_r+0xa>
 8004a4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a50:	07d0      	lsls	r0, r2, #31
 8004a52:	d404      	bmi.n	8004a5e <_fflush_r+0x32>
 8004a54:	0599      	lsls	r1, r3, #22
 8004a56:	d402      	bmi.n	8004a5e <_fflush_r+0x32>
 8004a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a5a:	f7ff fb7e 	bl	800415a <__retarget_lock_acquire_recursive>
 8004a5e:	4628      	mov	r0, r5
 8004a60:	4621      	mov	r1, r4
 8004a62:	f7ff ff5d 	bl	8004920 <__sflush_r>
 8004a66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a68:	07da      	lsls	r2, r3, #31
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	d4e4      	bmi.n	8004a38 <_fflush_r+0xc>
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	059b      	lsls	r3, r3, #22
 8004a72:	d4e1      	bmi.n	8004a38 <_fflush_r+0xc>
 8004a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a76:	f7ff fb71 	bl	800415c <__retarget_lock_release_recursive>
 8004a7a:	e7dd      	b.n	8004a38 <_fflush_r+0xc>

08004a7c <__swhatbuf_r>:
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	460c      	mov	r4, r1
 8004a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a84:	2900      	cmp	r1, #0
 8004a86:	b096      	sub	sp, #88	; 0x58
 8004a88:	4615      	mov	r5, r2
 8004a8a:	461e      	mov	r6, r3
 8004a8c:	da0d      	bge.n	8004aaa <__swhatbuf_r+0x2e>
 8004a8e:	89a3      	ldrh	r3, [r4, #12]
 8004a90:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a94:	f04f 0100 	mov.w	r1, #0
 8004a98:	bf0c      	ite	eq
 8004a9a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004a9e:	2340      	movne	r3, #64	; 0x40
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	6031      	str	r1, [r6, #0]
 8004aa4:	602b      	str	r3, [r5, #0]
 8004aa6:	b016      	add	sp, #88	; 0x58
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
 8004aaa:	466a      	mov	r2, sp
 8004aac:	f000 f862 	bl	8004b74 <_fstat_r>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	dbec      	blt.n	8004a8e <__swhatbuf_r+0x12>
 8004ab4:	9901      	ldr	r1, [sp, #4]
 8004ab6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004aba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004abe:	4259      	negs	r1, r3
 8004ac0:	4159      	adcs	r1, r3
 8004ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac6:	e7eb      	b.n	8004aa0 <__swhatbuf_r+0x24>

08004ac8 <__smakebuf_r>:
 8004ac8:	898b      	ldrh	r3, [r1, #12]
 8004aca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004acc:	079d      	lsls	r5, r3, #30
 8004ace:	4606      	mov	r6, r0
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	d507      	bpl.n	8004ae4 <__smakebuf_r+0x1c>
 8004ad4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	6123      	str	r3, [r4, #16]
 8004adc:	2301      	movs	r3, #1
 8004ade:	6163      	str	r3, [r4, #20]
 8004ae0:	b002      	add	sp, #8
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	ab01      	add	r3, sp, #4
 8004ae6:	466a      	mov	r2, sp
 8004ae8:	f7ff ffc8 	bl	8004a7c <__swhatbuf_r>
 8004aec:	9900      	ldr	r1, [sp, #0]
 8004aee:	4605      	mov	r5, r0
 8004af0:	4630      	mov	r0, r6
 8004af2:	f7ff fba1 	bl	8004238 <_malloc_r>
 8004af6:	b948      	cbnz	r0, 8004b0c <__smakebuf_r+0x44>
 8004af8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004afc:	059a      	lsls	r2, r3, #22
 8004afe:	d4ef      	bmi.n	8004ae0 <__smakebuf_r+0x18>
 8004b00:	f023 0303 	bic.w	r3, r3, #3
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	81a3      	strh	r3, [r4, #12]
 8004b0a:	e7e3      	b.n	8004ad4 <__smakebuf_r+0xc>
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	6020      	str	r0, [r4, #0]
 8004b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b14:	81a3      	strh	r3, [r4, #12]
 8004b16:	9b00      	ldr	r3, [sp, #0]
 8004b18:	6163      	str	r3, [r4, #20]
 8004b1a:	9b01      	ldr	r3, [sp, #4]
 8004b1c:	6120      	str	r0, [r4, #16]
 8004b1e:	b15b      	cbz	r3, 8004b38 <__smakebuf_r+0x70>
 8004b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b24:	4630      	mov	r0, r6
 8004b26:	f000 f837 	bl	8004b98 <_isatty_r>
 8004b2a:	b128      	cbz	r0, 8004b38 <__smakebuf_r+0x70>
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	81a3      	strh	r3, [r4, #12]
 8004b38:	89a3      	ldrh	r3, [r4, #12]
 8004b3a:	431d      	orrs	r5, r3
 8004b3c:	81a5      	strh	r5, [r4, #12]
 8004b3e:	e7cf      	b.n	8004ae0 <__smakebuf_r+0x18>

08004b40 <memmove>:
 8004b40:	4288      	cmp	r0, r1
 8004b42:	b510      	push	{r4, lr}
 8004b44:	eb01 0402 	add.w	r4, r1, r2
 8004b48:	d902      	bls.n	8004b50 <memmove+0x10>
 8004b4a:	4284      	cmp	r4, r0
 8004b4c:	4623      	mov	r3, r4
 8004b4e:	d807      	bhi.n	8004b60 <memmove+0x20>
 8004b50:	1e43      	subs	r3, r0, #1
 8004b52:	42a1      	cmp	r1, r4
 8004b54:	d008      	beq.n	8004b68 <memmove+0x28>
 8004b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b5e:	e7f8      	b.n	8004b52 <memmove+0x12>
 8004b60:	4402      	add	r2, r0
 8004b62:	4601      	mov	r1, r0
 8004b64:	428a      	cmp	r2, r1
 8004b66:	d100      	bne.n	8004b6a <memmove+0x2a>
 8004b68:	bd10      	pop	{r4, pc}
 8004b6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b72:	e7f7      	b.n	8004b64 <memmove+0x24>

08004b74 <_fstat_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4d07      	ldr	r5, [pc, #28]	; (8004b94 <_fstat_r+0x20>)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	602b      	str	r3, [r5, #0]
 8004b82:	f7fc f828 	bl	8000bd6 <_fstat>
 8004b86:	1c43      	adds	r3, r0, #1
 8004b88:	d102      	bne.n	8004b90 <_fstat_r+0x1c>
 8004b8a:	682b      	ldr	r3, [r5, #0]
 8004b8c:	b103      	cbz	r3, 8004b90 <_fstat_r+0x1c>
 8004b8e:	6023      	str	r3, [r4, #0]
 8004b90:	bd38      	pop	{r3, r4, r5, pc}
 8004b92:	bf00      	nop
 8004b94:	20000274 	.word	0x20000274

08004b98 <_isatty_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4d06      	ldr	r5, [pc, #24]	; (8004bb4 <_isatty_r+0x1c>)
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	602b      	str	r3, [r5, #0]
 8004ba4:	f7fc f827 	bl	8000bf6 <_isatty>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d102      	bne.n	8004bb2 <_isatty_r+0x1a>
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	b103      	cbz	r3, 8004bb2 <_isatty_r+0x1a>
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	20000274 	.word	0x20000274

08004bb8 <_sbrk_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	4d06      	ldr	r5, [pc, #24]	; (8004bd4 <_sbrk_r+0x1c>)
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	602b      	str	r3, [r5, #0]
 8004bc4:	f7fc f830 	bl	8000c28 <_sbrk>
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	d102      	bne.n	8004bd2 <_sbrk_r+0x1a>
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	b103      	cbz	r3, 8004bd2 <_sbrk_r+0x1a>
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	20000274 	.word	0x20000274

08004bd8 <memcpy>:
 8004bd8:	440a      	add	r2, r1
 8004bda:	4291      	cmp	r1, r2
 8004bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004be0:	d100      	bne.n	8004be4 <memcpy+0xc>
 8004be2:	4770      	bx	lr
 8004be4:	b510      	push	{r4, lr}
 8004be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bee:	4291      	cmp	r1, r2
 8004bf0:	d1f9      	bne.n	8004be6 <memcpy+0xe>
 8004bf2:	bd10      	pop	{r4, pc}

08004bf4 <_realloc_r>:
 8004bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf8:	4680      	mov	r8, r0
 8004bfa:	4614      	mov	r4, r2
 8004bfc:	460e      	mov	r6, r1
 8004bfe:	b921      	cbnz	r1, 8004c0a <_realloc_r+0x16>
 8004c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c04:	4611      	mov	r1, r2
 8004c06:	f7ff bb17 	b.w	8004238 <_malloc_r>
 8004c0a:	b92a      	cbnz	r2, 8004c18 <_realloc_r+0x24>
 8004c0c:	f7ff faa8 	bl	8004160 <_free_r>
 8004c10:	4625      	mov	r5, r4
 8004c12:	4628      	mov	r0, r5
 8004c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c18:	f000 f81b 	bl	8004c52 <_malloc_usable_size_r>
 8004c1c:	4284      	cmp	r4, r0
 8004c1e:	4607      	mov	r7, r0
 8004c20:	d802      	bhi.n	8004c28 <_realloc_r+0x34>
 8004c22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c26:	d812      	bhi.n	8004c4e <_realloc_r+0x5a>
 8004c28:	4621      	mov	r1, r4
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	f7ff fb04 	bl	8004238 <_malloc_r>
 8004c30:	4605      	mov	r5, r0
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d0ed      	beq.n	8004c12 <_realloc_r+0x1e>
 8004c36:	42bc      	cmp	r4, r7
 8004c38:	4622      	mov	r2, r4
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	bf28      	it	cs
 8004c3e:	463a      	movcs	r2, r7
 8004c40:	f7ff ffca 	bl	8004bd8 <memcpy>
 8004c44:	4631      	mov	r1, r6
 8004c46:	4640      	mov	r0, r8
 8004c48:	f7ff fa8a 	bl	8004160 <_free_r>
 8004c4c:	e7e1      	b.n	8004c12 <_realloc_r+0x1e>
 8004c4e:	4635      	mov	r5, r6
 8004c50:	e7df      	b.n	8004c12 <_realloc_r+0x1e>

08004c52 <_malloc_usable_size_r>:
 8004c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c56:	1f18      	subs	r0, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bfbc      	itt	lt
 8004c5c:	580b      	ldrlt	r3, [r1, r0]
 8004c5e:	18c0      	addlt	r0, r0, r3
 8004c60:	4770      	bx	lr
	...

08004c64 <_init>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	bf00      	nop
 8004c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6a:	bc08      	pop	{r3}
 8004c6c:	469e      	mov	lr, r3
 8004c6e:	4770      	bx	lr

08004c70 <_fini>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr
